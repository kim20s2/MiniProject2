
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001084  080110e8  080110e8  000120e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801216c  0801216c  00014250  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801216c  0801216c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012174  08012174  00014250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012174  08012174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012178  08012178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  0801217c  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006cc0  20000250  080123cc  00014250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006f10  080123cc  00014f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020489  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cce  00000000  00000000  00034709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  000393d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001648  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cea2  00000000  00000000  0003c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f9b  00000000  00000000  00059532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a41c7  00000000  00000000  0007d4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009568  00000000  00000000  001216d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080110cc 	.word	0x080110cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	080110cc 	.word	0x080110cc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 ba09 	b.w	80010ec <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9be 	b.w	80010ec <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	468e      	mov	lr, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d962      	bls.n	8000ed0 <__udivmoddi4+0xdc>
 8000e0a:	fab2 f682 	clz	r6, r2
 8000e0e:	b14e      	cbz	r6, 8000e24 <__udivmoddi4+0x30>
 8000e10:	f1c6 0320 	rsb	r3, r6, #32
 8000e14:	fa01 f806 	lsl.w	r8, r1, r6
 8000e18:	fa20 f303 	lsr.w	r3, r0, r3
 8000e1c:	40b7      	lsls	r7, r6
 8000e1e:	ea43 0808 	orr.w	r8, r3, r8
 8000e22:	40b4      	lsls	r4, r6
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f fc87 	uxth.w	ip, r7
 8000e2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e30:	0c23      	lsrs	r3, r4, #16
 8000e32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e48:	f080 80ea 	bcs.w	8001020 <__udivmoddi4+0x22c>
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f240 80e7 	bls.w	8001020 <__udivmoddi4+0x22c>
 8000e52:	3902      	subs	r1, #2
 8000e54:	443b      	add	r3, r7
 8000e56:	1a9a      	subs	r2, r3, r2
 8000e58:	b2a3      	uxth	r3, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e6a:	459c      	cmp	ip, r3
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x8e>
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	f080 80d6 	bcs.w	8001024 <__udivmoddi4+0x230>
 8000e78:	459c      	cmp	ip, r3
 8000e7a:	f240 80d3 	bls.w	8001024 <__udivmoddi4+0x230>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3802      	subs	r0, #2
 8000e82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e86:	eba3 030c 	sub.w	r3, r3, ip
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40f3      	lsrs	r3, r6
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xb6>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb0>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x14c>
 8000eb2:	4573      	cmp	r3, lr
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xc8>
 8000eb6:	4282      	cmp	r2, r0
 8000eb8:	f200 8105 	bhi.w	80010c6 <__udivmoddi4+0x2d2>
 8000ebc:	1a84      	subs	r4, r0, r2
 8000ebe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4690      	mov	r8, r2
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000eca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ece:	e7e2      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	f000 8090 	beq.w	8000ff6 <__udivmoddi4+0x202>
 8000ed6:	fab2 f682 	clz	r6, r2
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	f040 80a4 	bne.w	8001028 <__udivmoddi4+0x234>
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	b280      	uxth	r0, r0
 8000eea:	b2bc      	uxth	r4, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ef2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000efa:	fb04 f20c 	mul.w	r2, r4, ip
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x11e>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x11c>
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	f200 80e0 	bhi.w	80010d0 <__udivmoddi4+0x2dc>
 8000f10:	46c4      	mov	ip, r8
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f20:	fb02 f404 	mul.w	r4, r2, r4
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x144>
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x142>
 8000f30:	429c      	cmp	r4, r3
 8000f32:	f200 80ca 	bhi.w	80010ca <__udivmoddi4+0x2d6>
 8000f36:	4602      	mov	r2, r0
 8000f38:	1b1b      	subs	r3, r3, r4
 8000f3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f50:	fa20 f306 	lsr.w	r3, r0, r6
 8000f54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f5c:	4323      	orrs	r3, r4
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	fa1f fc87 	uxth.w	ip, r7
 8000f66:	fbbe f0f9 	udiv	r0, lr, r9
 8000f6a:	0c1c      	lsrs	r4, r3, #16
 8000f6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f78:	45a6      	cmp	lr, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x1a0>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f86:	f080 809c 	bcs.w	80010c2 <__udivmoddi4+0x2ce>
 8000f8a:	45a6      	cmp	lr, r4
 8000f8c:	f240 8099 	bls.w	80010c2 <__udivmoddi4+0x2ce>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	eba4 040e 	sub.w	r4, r4, lr
 8000f98:	fa1f fe83 	uxth.w	lr, r3
 8000f9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fa0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fa4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fa8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fac:	45a4      	cmp	ip, r4
 8000fae:	d908      	bls.n	8000fc2 <__udivmoddi4+0x1ce>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fb6:	f080 8082 	bcs.w	80010be <__udivmoddi4+0x2ca>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d97f      	bls.n	80010be <__udivmoddi4+0x2ca>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fc6:	eba4 040c 	sub.w	r4, r4, ip
 8000fca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fce:	4564      	cmp	r4, ip
 8000fd0:	4673      	mov	r3, lr
 8000fd2:	46e1      	mov	r9, ip
 8000fd4:	d362      	bcc.n	800109c <__udivmoddi4+0x2a8>
 8000fd6:	d05f      	beq.n	8001098 <__udivmoddi4+0x2a4>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x1fe>
 8000fda:	ebb8 0203 	subs.w	r2, r8, r3
 8000fde:	eb64 0409 	sbc.w	r4, r4, r9
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fea:	431e      	orrs	r6, r3
 8000fec:	40cc      	lsrs	r4, r1
 8000fee:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	e74f      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ff6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ffa:	0c01      	lsrs	r1, r0, #16
 8000ffc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001000:	b280      	uxth	r0, r0
 8001002:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001006:	463b      	mov	r3, r7
 8001008:	4638      	mov	r0, r7
 800100a:	463c      	mov	r4, r7
 800100c:	46b8      	mov	r8, r7
 800100e:	46be      	mov	lr, r7
 8001010:	2620      	movs	r6, #32
 8001012:	fbb1 f1f7 	udiv	r1, r1, r7
 8001016:	eba2 0208 	sub.w	r2, r2, r8
 800101a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800101e:	e766      	b.n	8000eee <__udivmoddi4+0xfa>
 8001020:	4601      	mov	r1, r0
 8001022:	e718      	b.n	8000e56 <__udivmoddi4+0x62>
 8001024:	4610      	mov	r0, r2
 8001026:	e72c      	b.n	8000e82 <__udivmoddi4+0x8e>
 8001028:	f1c6 0220 	rsb	r2, r6, #32
 800102c:	fa2e f302 	lsr.w	r3, lr, r2
 8001030:	40b7      	lsls	r7, r6
 8001032:	40b1      	lsls	r1, r6
 8001034:	fa20 f202 	lsr.w	r2, r0, r2
 8001038:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800103c:	430a      	orrs	r2, r1
 800103e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001042:	b2bc      	uxth	r4, r7
 8001044:	fb0e 3318 	mls	r3, lr, r8, r3
 8001048:	0c11      	lsrs	r1, r2, #16
 800104a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104e:	fb08 f904 	mul.w	r9, r8, r4
 8001052:	40b0      	lsls	r0, r6
 8001054:	4589      	cmp	r9, r1
 8001056:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800105a:	b280      	uxth	r0, r0
 800105c:	d93e      	bls.n	80010dc <__udivmoddi4+0x2e8>
 800105e:	1879      	adds	r1, r7, r1
 8001060:	f108 3cff 	add.w	ip, r8, #4294967295
 8001064:	d201      	bcs.n	800106a <__udivmoddi4+0x276>
 8001066:	4589      	cmp	r9, r1
 8001068:	d81f      	bhi.n	80010aa <__udivmoddi4+0x2b6>
 800106a:	eba1 0109 	sub.w	r1, r1, r9
 800106e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001072:	fb09 f804 	mul.w	r8, r9, r4
 8001076:	fb0e 1119 	mls	r1, lr, r9, r1
 800107a:	b292      	uxth	r2, r2
 800107c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001080:	4542      	cmp	r2, r8
 8001082:	d229      	bcs.n	80010d8 <__udivmoddi4+0x2e4>
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	f109 31ff 	add.w	r1, r9, #4294967295
 800108a:	d2c4      	bcs.n	8001016 <__udivmoddi4+0x222>
 800108c:	4542      	cmp	r2, r8
 800108e:	d2c2      	bcs.n	8001016 <__udivmoddi4+0x222>
 8001090:	f1a9 0102 	sub.w	r1, r9, #2
 8001094:	443a      	add	r2, r7
 8001096:	e7be      	b.n	8001016 <__udivmoddi4+0x222>
 8001098:	45f0      	cmp	r8, lr
 800109a:	d29d      	bcs.n	8000fd8 <__udivmoddi4+0x1e4>
 800109c:	ebbe 0302 	subs.w	r3, lr, r2
 80010a0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010a4:	3801      	subs	r0, #1
 80010a6:	46e1      	mov	r9, ip
 80010a8:	e796      	b.n	8000fd8 <__udivmoddi4+0x1e4>
 80010aa:	eba7 0909 	sub.w	r9, r7, r9
 80010ae:	4449      	add	r1, r9
 80010b0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010b4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b8:	fb09 f804 	mul.w	r8, r9, r4
 80010bc:	e7db      	b.n	8001076 <__udivmoddi4+0x282>
 80010be:	4673      	mov	r3, lr
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1ce>
 80010c2:	4650      	mov	r0, sl
 80010c4:	e766      	b.n	8000f94 <__udivmoddi4+0x1a0>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e6fd      	b.n	8000ec6 <__udivmoddi4+0xd2>
 80010ca:	443b      	add	r3, r7
 80010cc:	3a02      	subs	r2, #2
 80010ce:	e733      	b.n	8000f38 <__udivmoddi4+0x144>
 80010d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d4:	443b      	add	r3, r7
 80010d6:	e71c      	b.n	8000f12 <__udivmoddi4+0x11e>
 80010d8:	4649      	mov	r1, r9
 80010da:	e79c      	b.n	8001016 <__udivmoddi4+0x222>
 80010dc:	eba1 0109 	sub.w	r1, r1, r9
 80010e0:	46c4      	mov	ip, r8
 80010e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e6:	fb09 f804 	mul.w	r8, r9, r4
 80010ea:	e7c4      	b.n	8001076 <__udivmoddi4+0x282>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <Aiot_Task>:
int esp_is_wifi_ready(void);
void AiotClient_Init(void);   // 기존 초기화 함수 extern 선언

// Aiot_Task.c
void Aiot_Task(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    AiotClient_Init();
 80010f8:	f001 fc7a 	bl	80029f0 <AiotClient_Init>

    for(;;) {
        int wifi_ok = esp_is_wifi_ready();
 80010fc:	f001 fde8 	bl	8002cd0 <esp_is_wifi_ready>
 8001100:	6178      	str	r0, [r7, #20]
        int tcp_ok  = esp_get_status();
 8001102:	f001 fa9f 	bl	8002644 <esp_get_status>
 8001106:	6138      	str	r0, [r7, #16]

        if (!wifi_ok) {
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d104      	bne.n	8001118 <Aiot_Task+0x28>
            vTaskDelay(pdMS_TO_TICKS(2000));
 800110e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001112:	f008 fa85 	bl	8009620 <vTaskDelay>
            continue;
 8001116:	e01f      	b.n	8001158 <Aiot_Task+0x68>
        }

        if (tcp_ok != 0) {  // 연결 안 되었을 때만 접속
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d018      	beq.n	8001150 <Aiot_Task+0x60>
            printf("server connecting ...\r\n");
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <Aiot_Task+0x6c>)
 8001120:	f00b fcb8 	bl	800ca94 <puts>
            if (osMutexAcquire(ESP_MutexHandle, osWaitForever)==osOK) {
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <Aiot_Task+0x70>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	4618      	mov	r0, r3
 800112e:	f006 ffca 	bl	80080c6 <osMutexAcquire>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <Aiot_Task+0x60>
                int rc = esp_client_conn();
 8001138:	f001 f9ae 	bl	8002498 <esp_client_conn>
 800113c:	60f8      	str	r0, [r7, #12]
                osMutexRelease(ESP_MutexHandle);
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <Aiot_Task+0x70>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f007 f80a 	bl	800815c <osMutexRelease>
                printf("[AIOT] conn rc=%d\r\n", rc);
 8001148:	68f9      	ldr	r1, [r7, #12]
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <Aiot_Task+0x74>)
 800114c:	f00b fc32 	bl	800c9b4 <iprintf>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(10000));
 8001150:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001154:	f008 fa64 	bl	8009620 <vTaskDelay>
    for(;;) {
 8001158:	e7d0      	b.n	80010fc <Aiot_Task+0xc>
 800115a:	bf00      	nop
 800115c:	080110e8 	.word	0x080110e8
 8001160:	20002438 	.word	0x20002438
 8001164:	08011100 	.word	0x08011100

08001168 <esp_event>:
   - 개행을 기다리지 말고 길이 기반으로 정확히 잘라내기
*/


void esp_event(const char *recvBuf)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0aa      	sub	sp, #168	@ 0xa8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    char strBuff[128];
    char *pArray[4] = {0,};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

    // 1) 문자열 복사 (안전하게 처리)
    strncpy(strBuff, recvBuf, sizeof(strBuff)-1);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	227f      	movs	r2, #127	@ 0x7f
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f00b fe3c 	bl	800ce04 <strncpy>
    strBuff[sizeof(strBuff)-1] = '\0';
 800118c:	2300      	movs	r3, #0
 800118e:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

    // 2) 개행문자 제거
    char *newline = strchr(strBuff, '\n');
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	210a      	movs	r1, #10
 8001198:	4618      	mov	r0, r3
 800119a:	f00b fe03 	bl	800cda4 <strchr>
 800119e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 80011a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <esp_event+0x4a>
 80011aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    newline = strchr(strBuff, '\r');
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	210d      	movs	r1, #13
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00b fdf3 	bl	800cda4 <strchr>
 80011be:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (newline) *newline = '\0';
 80011c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <esp_event+0x6a>
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]

    // 3) 파싱 (구분자 @, 공백, [, ] 처리)
    int idx = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char *token = strtok(strBuff, "[]@ ");
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4945      	ldr	r1, [pc, #276]	@ (80012f4 <esp_event+0x18c>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b fe24 	bl	800ce2c <strtok>
 80011e4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 80011e8:	e011      	b.n	800120e <esp_event+0xa6>
    {
        pArray[idx++] = token;
 80011ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	33a8      	adds	r3, #168	@ 0xa8
 80011f8:	443b      	add	r3, r7
 80011fa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80011fe:	f843 2c9c 	str.w	r2, [r3, #-156]
        token = strtok(NULL, "[]@ ");
 8001202:	493c      	ldr	r1, [pc, #240]	@ (80012f4 <esp_event+0x18c>)
 8001204:	2000      	movs	r0, #0
 8001206:	f00b fe11 	bl	800ce2c <strtok>
 800120a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    while (token != NULL && idx < 4)
 800120e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <esp_event+0xb6>
 8001216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800121a:	2b03      	cmp	r3, #3
 800121c:	dde5      	ble.n	80011ea <esp_event+0x82>
           pArray[0] ? pArray[0] : "NULL",
           pArray[1] ? pArray[1] : "NULL",
           pArray[2] ? pArray[2] : "NULL");
    */
    // 4) 명령 실행
    if (pArray[1] && pArray[2])
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d05c      	beq.n	80012de <esp_event+0x176>
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d059      	beq.n	80012de <esp_event+0x176>
    {
        if (strcmp(pArray[1], "LED") == 0)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4932      	ldr	r1, [pc, #200]	@ (80012f8 <esp_event+0x190>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ffd6 	bl	80001e0 <strcmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d121      	bne.n	800127e <esp_event+0x116>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	492f      	ldr	r1, [pc, #188]	@ (80012fc <esp_event+0x194>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7fe ffce 	bl	80001e0 <strcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d108      	bne.n	800125c <esp_event+0xf4>
                LED_ON();
 800124a:	2201      	movs	r2, #1
 800124c:	2120      	movs	r1, #32
 800124e:	482c      	ldr	r0, [pc, #176]	@ (8001300 <esp_event+0x198>)
 8001250:	f003 f88a 	bl	8004368 <HAL_GPIO_WritePin>
                printf("LED turned ON\r\n");
 8001254:	482b      	ldr	r0, [pc, #172]	@ (8001304 <esp_event+0x19c>)
 8001256:	f00b fc1d 	bl	800ca94 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800125a:	e045      	b.n	80012e8 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	492a      	ldr	r1, [pc, #168]	@ (8001308 <esp_event+0x1a0>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffbd 	bl	80001e0 <strcmp>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d13d      	bne.n	80012e8 <esp_event+0x180>
                LED_OFF();
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4823      	ldr	r0, [pc, #140]	@ (8001300 <esp_event+0x198>)
 8001272:	f003 f879 	bl	8004368 <HAL_GPIO_WritePin>
                printf("LED turned OFF\r\n");
 8001276:	4825      	ldr	r0, [pc, #148]	@ (800130c <esp_event+0x1a4>)
 8001278:	f00b fc0c 	bl	800ca94 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 800127c:	e034      	b.n	80012e8 <esp_event+0x180>
            }
        }
        else if (strcmp(pArray[1], "FAN") == 0)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4923      	ldr	r1, [pc, #140]	@ (8001310 <esp_event+0x1a8>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffac 	bl	80001e0 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d121      	bne.n	80012d2 <esp_event+0x16a>
        {
            if (strcmp(pArray[2], "ON") == 0) {
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	491a      	ldr	r1, [pc, #104]	@ (80012fc <esp_event+0x194>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ffa4 	bl	80001e0 <strcmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <esp_event+0x148>
                FAN_ON();
 800129e:	2201      	movs	r2, #1
 80012a0:	2110      	movs	r1, #16
 80012a2:	481c      	ldr	r0, [pc, #112]	@ (8001314 <esp_event+0x1ac>)
 80012a4:	f003 f860 	bl	8004368 <HAL_GPIO_WritePin>
                printf("FAN turned ON\r\n");
 80012a8:	481b      	ldr	r0, [pc, #108]	@ (8001318 <esp_event+0x1b0>)
 80012aa:	f00b fbf3 	bl	800ca94 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80012ae:	e01b      	b.n	80012e8 <esp_event+0x180>
            }
            else if (strcmp(pArray[2], "OFF") == 0) {
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4915      	ldr	r1, [pc, #84]	@ (8001308 <esp_event+0x1a0>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ff93 	bl	80001e0 <strcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d113      	bne.n	80012e8 <esp_event+0x180>
                FAN_OFF();
 80012c0:	2200      	movs	r2, #0
 80012c2:	2110      	movs	r1, #16
 80012c4:	4813      	ldr	r0, [pc, #76]	@ (8001314 <esp_event+0x1ac>)
 80012c6:	f003 f84f 	bl	8004368 <HAL_GPIO_WritePin>
                printf("FAN turned OFF\r\n");
 80012ca:	4814      	ldr	r0, [pc, #80]	@ (800131c <esp_event+0x1b4>)
 80012cc:	f00b fbe2 	bl	800ca94 <puts>
        if (strcmp(pArray[1], "LED") == 0)
 80012d0:	e00a      	b.n	80012e8 <esp_event+0x180>
            }
        }
        else
        {
            printf("Unknown device: %s\r\n", pArray[1]);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4812      	ldr	r0, [pc, #72]	@ (8001320 <esp_event+0x1b8>)
 80012d8:	f00b fb6c 	bl	800c9b4 <iprintf>
        if (strcmp(pArray[1], "LED") == 0)
 80012dc:	e004      	b.n	80012e8 <esp_event+0x180>
        }
    }
    else
    {
        printf("Invalid command format: %s\r\n", recvBuf);
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4810      	ldr	r0, [pc, #64]	@ (8001324 <esp_event+0x1bc>)
 80012e2:	f00b fb67 	bl	800c9b4 <iprintf>
    }
}
 80012e6:	e000      	b.n	80012ea <esp_event+0x182>
        if (strcmp(pArray[1], "LED") == 0)
 80012e8:	bf00      	nop
}
 80012ea:	bf00      	nop
 80012ec:	37a8      	adds	r7, #168	@ 0xa8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08011114 	.word	0x08011114
 80012f8:	0801111c 	.word	0x0801111c
 80012fc:	08011120 	.word	0x08011120
 8001300:	40020000 	.word	0x40020000
 8001304:	08011124 	.word	0x08011124
 8001308:	08011134 	.word	0x08011134
 800130c:	08011138 	.word	0x08011138
 8001310:	08011148 	.word	0x08011148
 8001314:	40020400 	.word	0x40020400
 8001318:	0801114c 	.word	0x0801114c
 800131c:	0801115c 	.word	0x0801115c
 8001320:	0801116c 	.word	0x0801116c
 8001324:	08011184 	.word	0x08011184

08001328 <try_extract_ipd_payload>:

// +IPD,<len>:...   (CIPMUX=0)
// +IPD,<id>,<len>:...  (CIPMUX=1)
static int try_extract_ipd_payload(char *dst, int dst_sz)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b092      	sub	sp, #72	@ 0x48
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    int copied = 0, consumed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
 8001336:	2300      	movs	r3, #0
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40

    taskENTER_CRITICAL();
 800133a:	f009 fc75 	bl	800ac28 <vPortEnterCritical>
    int n = cb_data.length;
 800133e:	4b70      	ldr	r3, [pc, #448]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001340:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001344:	623b      	str	r3, [r7, #32]
    if (n > 0) {
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f340 80d2 	ble.w	80014f2 <try_extract_ipd_payload+0x1ca>
        int start = -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i + 4 < n; ++i) {
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001358:	e023      	b.n	80013a2 <try_extract_ipd_payload+0x7a>
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 800135a:	4a69      	ldr	r2, [pc, #420]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 800135c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b2b      	cmp	r3, #43	@ 0x2b
 8001364:	d11a      	bne.n	800139c <try_extract_ipd_payload+0x74>
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	3301      	adds	r3, #1
 800136a:	4a65      	ldr	r2, [pc, #404]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	2b49      	cmp	r3, #73	@ 0x49
 8001370:	d114      	bne.n	800139c <try_extract_ipd_payload+0x74>
 8001372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001374:	3302      	adds	r3, #2
 8001376:	4a62      	ldr	r2, [pc, #392]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	2b50      	cmp	r3, #80	@ 0x50
 800137c:	d10e      	bne.n	800139c <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 800137e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001380:	3303      	adds	r3, #3
 8001382:	4a5f      	ldr	r2, [pc, #380]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
            if (cb_data.buf[i]=='+' && cb_data.buf[i+1]=='I' && cb_data.buf[i+2]=='P' &&
 8001386:	2b44      	cmp	r3, #68	@ 0x44
 8001388:	d108      	bne.n	800139c <try_extract_ipd_payload+0x74>
                cb_data.buf[i+3]=='D' && cb_data.buf[i+4]==',') { start = i; break; }
 800138a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800138c:	3304      	adds	r3, #4
 800138e:	4a5c      	ldr	r2, [pc, #368]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	2b2c      	cmp	r3, #44	@ 0x2c
 8001394:	d102      	bne.n	800139c <try_extract_ipd_payload+0x74>
 8001396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800139a:	e007      	b.n	80013ac <try_extract_ipd_payload+0x84>
        for (int i = 0; i + 4 < n; ++i) {
 800139c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800139e:	3301      	adds	r3, #1
 80013a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a4:	3304      	adds	r3, #4
 80013a6:	6a3a      	ldr	r2, [r7, #32]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dcd6      	bgt.n	800135a <try_extract_ipd_payload+0x32>
        }
        if (start >= 0) {
 80013ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f2c0 8088 	blt.w	80014c4 <try_extract_ipd_payload+0x19c>
            int p = start + 5;
 80013b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b6:	3305      	adds	r3, #5
 80013b8:	637b      	str	r3, [r7, #52]	@ 0x34

            // (1) optional link id
            int q = p;
 80013ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
            while (q < n && cb_data.buf[q]>='0' && cb_data.buf[q]<='9') q++;
 80013be:	e002      	b.n	80013c6 <try_extract_ipd_payload+0x9e>
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c2:	3301      	adds	r3, #1
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	da0b      	bge.n	80013e6 <try_extract_ipd_payload+0xbe>
 80013ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80013d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80013d8:	d905      	bls.n	80013e6 <try_extract_ipd_payload+0xbe>
 80013da:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80013dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b39      	cmp	r3, #57	@ 0x39
 80013e4:	d9ec      	bls.n	80013c0 <try_extract_ipd_payload+0x98>
            if (q < n && cb_data.buf[q] == ',') {
 80013e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	da08      	bge.n	8001400 <try_extract_ipd_payload+0xd8>
 80013ee:	4a44      	ldr	r2, [pc, #272]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80013f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80013f8:	d102      	bne.n	8001400 <try_extract_ipd_payload+0xd8>
                p = q + 1; // had link id -> p now at len
 80013fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013fc:	3301      	adds	r3, #1
 80013fe:	637b      	str	r3, [r7, #52]	@ 0x34
            } // else: single mode, p already at len

            // (2) parse length until ':'
            int len_start = p, colon = -1;
 8001400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 800140a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	e01b      	b.n	8001448 <try_extract_ipd_payload+0x120>
                if (cb_data.buf[i] == ':') { colon = i; break; }
 8001410:	4a3b      	ldr	r2, [pc, #236]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b3a      	cmp	r3, #58	@ 0x3a
 800141a:	d102      	bne.n	8001422 <try_extract_ipd_payload+0xfa>
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001420:	e01b      	b.n	800145a <try_extract_ipd_payload+0x132>
                if (cb_data.buf[i] < '0' || cb_data.buf[i] > '9') { len_start = -1; break; }
 8001422:	4a37      	ldr	r2, [pc, #220]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b2f      	cmp	r3, #47	@ 0x2f
 800142c:	d905      	bls.n	800143a <try_extract_ipd_payload+0x112>
 800142e:	4a34      	ldr	r2, [pc, #208]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b39      	cmp	r3, #57	@ 0x39
 8001438:	d903      	bls.n	8001442 <try_extract_ipd_payload+0x11a>
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001440:	e00b      	b.n	800145a <try_extract_ipd_payload+0x132>
            for (int i = len_start; i < n && i < len_start + 10; ++i) {
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
 8001448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	429a      	cmp	r2, r3
 800144e:	da04      	bge.n	800145a <try_extract_ipd_payload+0x132>
 8001450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001452:	3309      	adds	r3, #9
 8001454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001456:	429a      	cmp	r2, r3
 8001458:	ddda      	ble.n	8001410 <try_extract_ipd_payload+0xe8>
            }
            if (len_start >= 0 && colon > 0) {
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	db31      	blt.n	80014c4 <try_extract_ipd_payload+0x19c>
 8001460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001462:	2b00      	cmp	r3, #0
 8001464:	dd2e      	ble.n	80014c4 <try_extract_ipd_payload+0x19c>
                int ipd_len = atoi((const char*)&cb_data.buf[len_start]);
 8001466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001468:	4a25      	ldr	r2, [pc, #148]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f009 feee 	bl	800b24e <atoi>
 8001472:	61f8      	str	r0, [r7, #28]
                int payload_start = colon + 1;
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	3301      	adds	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
                int bytes_avail = n - payload_start;
 800147a:	6a3a      	ldr	r2, [r7, #32]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	617b      	str	r3, [r7, #20]
                if (ipd_len > 0 && bytes_avail >= ipd_len) {
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	dd1d      	ble.n	80014c4 <try_extract_ipd_payload+0x19c>
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	429a      	cmp	r2, r3
 800148e:	db19      	blt.n	80014c4 <try_extract_ipd_payload+0x19c>
                    int cpy = (ipd_len < (dst_sz-1)) ? ipd_len : (dst_sz-1);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	4293      	cmp	r3, r2
 8001498:	bfa8      	it	ge
 800149a:	4613      	movge	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
                    memcpy(dst, &cb_data.buf[payload_start], cpy);
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80014a2:	4413      	add	r3, r2
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f00c fc6a 	bl	800dd82 <memcpy>
                    dst[cpy] = 0;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
                    copied = cpy;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	647b      	str	r3, [r7, #68]	@ 0x44
                    consumed = payload_start + ipd_len;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }
        }
        if (consumed > 0) {
 80014c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dd13      	ble.n	80014f2 <try_extract_ipd_payload+0x1ca>
            int left = n - consumed;
 80014ca:	6a3a      	ldr	r2, [r7, #32]
 80014cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	60fb      	str	r3, [r7, #12]
            if (left > 0) memmove(cb_data.buf, &cb_data.buf[consumed], left);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd07      	ble.n	80014e8 <try_extract_ipd_payload+0x1c0>
 80014d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014da:	4a09      	ldr	r2, [pc, #36]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80014dc:	4413      	add	r3, r2
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80014e4:	f00b fc3c 	bl	800cd60 <memmove>
            cb_data.length = left;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <try_extract_ipd_payload+0x1d8>)
 80014ee:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
        }
    }
    taskEXIT_CRITICAL();
 80014f2:	f009 fbcb 	bl	800ac8c <vPortExitCritical>
    return copied;
 80014f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3748      	adds	r7, #72	@ 0x48
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20001ac4 	.word	0x20001ac4

08001504 <Command_Task>:

void Command_Task(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0c4      	sub	sp, #272	@ 0x110
 8001508:	af00      	add	r7, sp, #0
 800150a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800150e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001512:	6018      	str	r0, [r3, #0]
    char payload[256];
    for(;;)
    {
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <Command_Task+0x74>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fdd3 	bl	80080c6 <osMutexAcquire>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d123      	bne.n	800156e <Command_Task+0x6a>
			int got = try_extract_ipd_payload(payload, sizeof(payload));
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fefa 	bl	8001328 <try_extract_ipd_payload>
 8001534:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
			osMutexRelease(ESP_MutexHandle);
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <Command_Task+0x74>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fe0d 	bl	800815c <osMutexRelease>
			if (got > 0) {
 8001542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001546:	2b00      	cmp	r3, #0
 8001548:	dd11      	ble.n	800156e <Command_Task+0x6a>
				// strip CR/LF
				payload[strcspn(payload, "\r\n")] = '\0';
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	490b      	ldr	r1, [pc, #44]	@ (800157c <Command_Task+0x78>)
 8001550:	4618      	mov	r0, r3
 8001552:	f00b fc34 	bl	800cdbe <strcspn>
 8001556:	4602      	mov	r2, r0
 8001558:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800155c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001560:	2100      	movs	r1, #0
 8001562:	5499      	strb	r1, [r3, r2]
				esp_event(payload);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fdfd 	bl	8001168 <esp_event>
			}
		}
        // UART2 console (already in your code) can stay elsewhere
        vTaskDelay(pdMS_TO_TICKS(10));
 800156e:	200a      	movs	r0, #10
 8001570:	f008 f856 	bl	8009620 <vTaskDelay>
		if (osMutexAcquire(ESP_MutexHandle, 0) == osOK) {
 8001574:	e7ce      	b.n	8001514 <Command_Task+0x10>
 8001576:	bf00      	nop
 8001578:	20002438 	.word	0x20002438
 800157c:	080111a4 	.word	0x080111a4

08001580 <LCD_Task>:
#include "FreeRTOS.h"
#include "task.h"


void LCD_Task(void *argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    LCD_Init();
 8001588:	f001 fbee 	bl	8002d68 <LCD_Init>
    LCD_Clear();
 800158c:	f001 fc16 	bl	8002dbc <LCD_Clear>

    LCD_SetCursor(0,0);
 8001590:	2100      	movs	r1, #0
 8001592:	2000      	movs	r0, #0
 8001594:	f001 fc1c 	bl	8002dd0 <LCD_SetCursor>
    LCD_Print("Hello, LCD!");
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <LCD_Task+0x38>)
 800159a:	f001 fc3b 	bl	8002e14 <LCD_Print>

    LCD_SetCursor(1,0);
 800159e:	2100      	movs	r1, #0
 80015a0:	2001      	movs	r0, #1
 80015a2:	f001 fc15 	bl	8002dd0 <LCD_SetCursor>
    LCD_Print("STM32 + FreeRTOS");
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <LCD_Task+0x3c>)
 80015a8:	f001 fc34 	bl	8002e14 <LCD_Print>

    for(;;) {
        vTaskDelay(pdMS_TO_TICKS(1000));
 80015ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015b0:	f008 f836 	bl	8009620 <vTaskDelay>
 80015b4:	e7fa      	b.n	80015ac <LCD_Task+0x2c>
 80015b6:	bf00      	nop
 80015b8:	080111a8 	.word	0x080111a8
 80015bc:	080111b4 	.word	0x080111b4

080015c0 <NTP_Task>:
#define NTPTIME_TASK_PERIOD_MS 10000

int esp_is_wifi_ready(void);

void NTP_Task(void *argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    static time_t epoch;
    uint16_t length = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	827b      	strh	r3, [r7, #18]
    TickType_t last = xTaskGetTickCount();
 80015cc:	f008 f972 	bl	80098b4 <xTaskGetTickCount>
 80015d0:	4603      	mov	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]
    const TickType_t period = pdMS_TO_TICKS(NTPTIME_TASK_PERIOD_MS);
 80015d4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015d8:	617b      	str	r3, [r7, #20]
    static int s_ntp_cfg_ok = 0;
    int toggle = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]

    for(;;)
    {
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80015de:	f001 fb77 	bl	8002cd0 <esp_is_wifi_ready>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d104      	bne.n	80015f2 <NTP_Task+0x32>
 80015e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015ec:	f008 f818 	bl	8009620 <vTaskDelay>
 80015f0:	e077      	b.n	80016e2 <NTP_Task+0x122>
		if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 80015f2:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <NTP_Task+0x124>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 fd63 	bl	80080c6 <osMutexAcquire>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d167      	bne.n	80016d6 <NTP_Task+0x116>
			if (!s_ntp_cfg_ok) {
 8001606:	4b38      	ldr	r3, [pc, #224]	@ (80016e8 <NTP_Task+0x128>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d107      	bne.n	800161e <NTP_Task+0x5e>
				if (esp_ntp_config() == 0) s_ntp_cfg_ok = 1;
 800160e:	f001 fb35 	bl	8002c7c <esp_ntp_config>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <NTP_Task+0x5e>
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <NTP_Task+0x128>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
				}
			if (esp_at_command((uint8_t*)"AT+CIPSNTPTIME?\r\n", (uint8_t*)response, &length, 5000) == 0) {
 800161e:	f107 0212 	add.w	r2, r7, #18
 8001622:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001626:	4931      	ldr	r1, [pc, #196]	@ (80016ec <NTP_Task+0x12c>)
 8001628:	4831      	ldr	r0, [pc, #196]	@ (80016f0 <NTP_Task+0x130>)
 800162a:	f000 fdc3 	bl	80021b4 <esp_at_command>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d14b      	bne.n	80016cc <NTP_Task+0x10c>
				char *p = strtok(response, "\r\n");
 8001634:	492f      	ldr	r1, [pc, #188]	@ (80016f4 <NTP_Task+0x134>)
 8001636:	482d      	ldr	r0, [pc, #180]	@ (80016ec <NTP_Task+0x12c>)
 8001638:	f00b fbf8 	bl	800ce2c <strtok>
 800163c:	61b8      	str	r0, [r7, #24]
				//printf("NTP connected!\r\n");
				while (p) {
 800163e:	e040      	b.n	80016c2 <NTP_Task+0x102>
					if (parse_cipsntptime_line(p, &epoch) == 0) {
 8001640:	492d      	ldr	r1, [pc, #180]	@ (80016f8 <NTP_Task+0x138>)
 8001642:	69b8      	ldr	r0, [r7, #24]
 8001644:	f001 fa1e 	bl	8002a84 <parse_cipsntptime_line>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d134      	bne.n	80016b8 <NTP_Task+0xf8>
						printf("NTP Time (KST): %s\r", ctime(&epoch));
 800164e:	482a      	ldr	r0, [pc, #168]	@ (80016f8 <NTP_Task+0x138>)
 8001650:	f00b fc5e 	bl	800cf10 <ctime>
 8001654:	4603      	mov	r3, r0
 8001656:	4619      	mov	r1, r3
 8001658:	4828      	ldr	r0, [pc, #160]	@ (80016fc <NTP_Task+0x13c>)
 800165a:	f00b f9ab 	bl	800c9b4 <iprintf>

						toggle = !toggle;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	61fb      	str	r3, [r7, #28]
						if (toggle) {
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <NTP_Task+0xc0>
							Servo_SetAngle(90);
 8001672:	205a      	movs	r0, #90	@ 0x5a
 8001674:	f000 f864 	bl	8001740 <Servo_SetAngle>
							printf("[SERVO TEST] -> 90 deg\r\n");
 8001678:	4821      	ldr	r0, [pc, #132]	@ (8001700 <NTP_Task+0x140>)
 800167a:	f00b fa0b 	bl	800ca94 <puts>
 800167e:	e005      	b.n	800168c <NTP_Task+0xcc>
						} else {
							Servo_SetAngle(0);
 8001680:	2000      	movs	r0, #0
 8001682:	f000 f85d 	bl	8001740 <Servo_SetAngle>
							printf("[SERVO TEST] -> 0 deg\r\n");
 8001686:	481f      	ldr	r0, [pc, #124]	@ (8001704 <NTP_Task+0x144>)
 8001688:	f00b fa04 	bl	800ca94 <puts>
						}

						if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 800168c:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <NTP_Task+0x148>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	4618      	mov	r0, r3
 8001696:	f006 fd16 	bl	80080c6 <osMutexAcquire>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d114      	bne.n	80016ca <NTP_Task+0x10a>
							ntp_time = epoch;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <NTP_Task+0x138>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	4919      	ldr	r1, [pc, #100]	@ (800170c <NTP_Task+0x14c>)
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
							osMutexRelease(NTP_MutexHandle);
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <NTP_Task+0x148>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f006 fd53 	bl	800815c <osMutexRelease>
						}
						break;
 80016b6:	e008      	b.n	80016ca <NTP_Task+0x10a>
					}
					p = strtok(NULL, "\r\n");
 80016b8:	490e      	ldr	r1, [pc, #56]	@ (80016f4 <NTP_Task+0x134>)
 80016ba:	2000      	movs	r0, #0
 80016bc:	f00b fbb6 	bl	800ce2c <strtok>
 80016c0:	61b8      	str	r0, [r7, #24]
				while (p) {
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1bb      	bne.n	8001640 <NTP_Task+0x80>
 80016c8:	e000      	b.n	80016cc <NTP_Task+0x10c>
						break;
 80016ca:	bf00      	nop
				}
		}
			osMutexRelease(ESP_MutexHandle);
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <NTP_Task+0x124>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fd43 	bl	800815c <osMutexRelease>
		}

        vTaskDelayUntil(&last, period);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	6979      	ldr	r1, [r7, #20]
 80016dc:	4618      	mov	r0, r3
 80016de:	f007 ff1f 	bl	8009520 <vTaskDelayUntil>
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 80016e2:	e77c      	b.n	80015de <NTP_Task+0x1e>
 80016e4:	20002438 	.word	0x20002438
 80016e8:	2000026c 	.word	0x2000026c
 80016ec:	2000128c 	.word	0x2000128c
 80016f0:	080111c8 	.word	0x080111c8
 80016f4:	080111dc 	.word	0x080111dc
 80016f8:	20000270 	.word	0x20000270
 80016fc:	080111e0 	.word	0x080111e0
 8001700:	080111f4 	.word	0x080111f4
 8001704:	0801120c 	.word	0x0801120c
 8001708:	2000243c 	.word	0x2000243c
 800170c:	200022d0 	.word	0x200022d0

08001710 <Servo_Init>:
#define SERVO_MIN_US   500    // 0°
#define SERVO_MID_US   1500   // 90°
#define SERVO_MAX_US   2500   // 180°

void Servo_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001714:	2100      	movs	r1, #0
 8001716:	4809      	ldr	r0, [pc, #36]	@ (800173c <Servo_Init+0x2c>)
 8001718:	f004 fcec 	bl	80060f4 <HAL_TIM_PWM_Start>

    // 고급 타이머(TIM1/8)에서 출력이 안 나오면 MOE를 켜야 할 수 있음
    // (대부분 HAL_TIM_PWM_Start로 충분하지만, 안 나오면 아래 한 줄 추가)
    __HAL_TIM_MOE_ENABLE(&htim1);
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <Servo_Init+0x2c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <Servo_Init+0x2c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800172a:	645a      	str	r2, [r3, #68]	@ 0x44

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_MIN_US); // 초기 0°
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <Servo_Init+0x2c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001734:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000234c 	.word	0x2000234c

08001740 <Servo_SetAngle>:

void Servo_SetAngle(int angle)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    if (angle < 0) angle = 0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da01      	bge.n	8001752 <Servo_SetAngle+0x12>
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
    if (angle > 180) angle = 180;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2bb4      	cmp	r3, #180	@ 0xb4
 8001756:	dd01      	ble.n	800175c <Servo_SetAngle+0x1c>
 8001758:	23b4      	movs	r3, #180	@ 0xb4
 800175a:	607b      	str	r3, [r7, #4]

    uint32_t pulse = SERVO_MIN_US + (angle * (SERVO_MAX_US - SERVO_MIN_US) / 180);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <Servo_SetAngle+0x50>)
 8001768:	fb82 1203 	smull	r1, r2, r2, r3
 800176c:	441a      	add	r2, r3
 800176e:	11d2      	asrs	r2, r2, #7
 8001770:	17db      	asrs	r3, r3, #31
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001778:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <Servo_SetAngle+0x54>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	b60b60b7 	.word	0xb60b60b7
 8001794:	2000234c 	.word	0x2000234c

08001798 <set_ryg>:
extern char response[MAX_ESP_RX_BUFFER];

int esp_is_wifi_ready(void);

static void set_ryg(int r, int y, int g)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, r ? GPIO_PIN_SET : GPIO_PIN_RESET); // RED
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017b6:	480f      	ldr	r0, [pc, #60]	@ (80017f4 <set_ryg+0x5c>)
 80017b8:	f002 fdd6 	bl	8004368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, y ? GPIO_PIN_SET : GPIO_PIN_RESET); // YELLOW
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ce:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <set_ryg+0x5c>)
 80017d0:	f002 fdca 	bl	8004368 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, g ? GPIO_PIN_SET : GPIO_PIN_RESET); // GREEN
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf14      	ite	ne
 80017da:	2301      	movne	r3, #1
 80017dc:	2300      	moveq	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e6:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <set_ryg+0x5c>)
 80017e8:	f002 fdbe 	bl	8004368 <HAL_GPIO_WritePin>
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40020400 	.word	0x40020400

080017f8 <json_pick_value>:
// ★ esp.c에 추가한 프로브 함수 원형
int esp_link1_tcp_probe(const char *ip_or_host, int port);

// 간단 JSON 파서: "category":"T1H" ... "obsrValue": 27  또는 "obsrValue":"27"
static int json_pick_value(const char *json, const char *cat, char *out, int out_sz)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b098      	sub	sp, #96	@ 0x60
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
    char key[64];
    snprintf(key, sizeof(key), "\"category\":\"%s\"", cat);
 8001806:	f107 0010 	add.w	r0, r7, #16
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	4a3a      	ldr	r2, [pc, #232]	@ (80018f8 <json_pick_value+0x100>)
 800180e:	2140      	movs	r1, #64	@ 0x40
 8001810:	f00b f948 	bl	800caa4 <sniprintf>
    const char *p = strstr(json, key);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f00b fb62 	bl	800cee4 <strstr>
 8001820:	6538      	str	r0, [r7, #80]	@ 0x50
    if (!p) return -1;
 8001822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <json_pick_value+0x36>
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	e05f      	b.n	80018ee <json_pick_value+0xf6>

    const char *v = strstr(p, "\"obsrValue\"");
 800182e:	4933      	ldr	r1, [pc, #204]	@ (80018fc <json_pick_value+0x104>)
 8001830:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001832:	f00b fb57 	bl	800cee4 <strstr>
 8001836:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 8001838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <json_pick_value+0x4c>
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e054      	b.n	80018ee <json_pick_value+0xf6>
    v = strchr(v, ':');
 8001844:	213a      	movs	r1, #58	@ 0x3a
 8001846:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001848:	f00b faac 	bl	800cda4 <strchr>
 800184c:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (!v) return -1;
 800184e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <json_pick_value+0x62>
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e049      	b.n	80018ee <json_pick_value+0xf6>
    v++; // skip ':'
 800185a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800185c:	3301      	adds	r3, #1
 800185e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // 공백/따옴표 스킵
    while (*v==' ' || *v=='\"') v++;
 8001860:	e002      	b.n	8001868 <json_pick_value+0x70>
 8001862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001864:	3301      	adds	r3, #1
 8001866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d0f8      	beq.n	8001862 <json_pick_value+0x6a>
 8001870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b22      	cmp	r3, #34	@ 0x22
 8001876:	d0f4      	beq.n	8001862 <json_pick_value+0x6a>

    // 숫자/텍스트 토큰 끝까지
    const char *e = v;
 8001878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800187a:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (*e && *e!='\"' && *e!='\r' && *e!='\n' && *e!=',' && *e!='}') e++;
 800187c:	e002      	b.n	8001884 <json_pick_value+0x8c>
 800187e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001880:	3301      	adds	r3, #1
 8001882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <json_pick_value+0xbc>
 800188c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b22      	cmp	r3, #34	@ 0x22
 8001892:	d00f      	beq.n	80018b4 <json_pick_value+0xbc>
 8001894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b0d      	cmp	r3, #13
 800189a:	d00b      	beq.n	80018b4 <json_pick_value+0xbc>
 800189c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b0a      	cmp	r3, #10
 80018a2:	d007      	beq.n	80018b4 <json_pick_value+0xbc>
 80018a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b2c      	cmp	r3, #44	@ 0x2c
 80018aa:	d003      	beq.n	80018b4 <json_pick_value+0xbc>
 80018ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b7d      	cmp	r3, #125	@ 0x7d
 80018b2:	d1e4      	bne.n	800187e <json_pick_value+0x86>

    int len = (int)(e - v);
 80018b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80018b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	657b      	str	r3, [r7, #84]	@ 0x54
    if (len <= 0) return -1;
 80018bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dc02      	bgt.n	80018c8 <json_pick_value+0xd0>
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e012      	b.n	80018ee <json_pick_value+0xf6>
    if (len >= out_sz) len = out_sz - 1;
 80018c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	db02      	blt.n	80018d6 <json_pick_value+0xde>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	657b      	str	r3, [r7, #84]	@ 0x54
    memcpy(out, v, len);
 80018d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d8:	461a      	mov	r2, r3
 80018da:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f00c fa50 	bl	800dd82 <memcpy>
    out[len] = 0;
 80018e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
    return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3760      	adds	r7, #96	@ 0x60
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	08011224 	.word	0x08011224
 80018fc:	08011234 	.word	0x08011234

08001900 <strip_ipd_markers>:

// ESP01 "+IPD,<link>,<len>:" 마커 제거 → 순수 HTTP/JSON만 남김
static int strip_ipd_markers(const char *in, char *out, int out_sz)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
    int w = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
    const char *p = in;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 8001914:	e077      	b.n	8001a06 <strip_ipd_markers+0x106>
        const char *tag = strstr(p, "+IPD,");
 8001916:	4946      	ldr	r1, [pc, #280]	@ (8001a30 <strip_ipd_markers+0x130>)
 8001918:	6a38      	ldr	r0, [r7, #32]
 800191a:	f00b fae3 	bl	800cee4 <strstr>
 800191e:	6138      	str	r0, [r7, #16]
        if (!tag) {
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11d      	bne.n	8001962 <strip_ipd_markers+0x62>
            int remain = (int)strlen(p);
 8001926:	6a38      	ldr	r0, [r7, #32]
 8001928:	f7fe fcba 	bl	80002a0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	61fb      	str	r3, [r7, #28]
            if (remain > out_sz - 1 - w) remain = out_sz - 1 - w;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1e5a      	subs	r2, r3, #1
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	429a      	cmp	r2, r3
 800193c:	dd04      	ble.n	8001948 <strip_ipd_markers+0x48>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	61fb      	str	r3, [r7, #28]
            memcpy(out + w, p, remain);
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	4413      	add	r3, r2
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	6a39      	ldr	r1, [r7, #32]
 8001952:	4618      	mov	r0, r3
 8001954:	f00c fa15 	bl	800dd82 <memcpy>
            w += remain;
 8001958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001960:	e05b      	b.n	8001a1a <strip_ipd_markers+0x11a>
        }
        int seg = (int)(tag - p);
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	61bb      	str	r3, [r7, #24]
        if (seg > 0) {
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd17      	ble.n	80019a0 <strip_ipd_markers+0xa0>
            if (seg > out_sz - 1 - w) seg = out_sz - 1 - w;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	429a      	cmp	r2, r3
 800197c:	dd04      	ble.n	8001988 <strip_ipd_markers+0x88>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	61bb      	str	r3, [r7, #24]
            memcpy(out + w, p, seg);
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	6a39      	ldr	r1, [r7, #32]
 8001992:	4618      	mov	r0, r3
 8001994:	f00c f9f5 	bl	800dd82 <memcpy>
            w += seg;
 8001998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4413      	add	r3, r2
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        const char *q = tag + 5; // after "+IPD,"
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3305      	adds	r3, #5
 80019a4:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // link
 80019a6:	e002      	b.n	80019ae <strip_ipd_markers+0xae>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <strip_ipd_markers+0xc6>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80019bc:	d903      	bls.n	80019c6 <strip_ipd_markers+0xc6>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b39      	cmp	r3, #57	@ 0x39
 80019c4:	d9f0      	bls.n	80019a8 <strip_ipd_markers+0xa8>
        if (*q==',') q++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b2c      	cmp	r3, #44	@ 0x2c
 80019cc:	d106      	bne.n	80019dc <strip_ipd_markers+0xdc>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
        while (*q && *q>='0' && *q<='9') q++; // len
 80019d4:	e002      	b.n	80019dc <strip_ipd_markers+0xdc>
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <strip_ipd_markers+0xf4>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80019ea:	d903      	bls.n	80019f4 <strip_ipd_markers+0xf4>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b39      	cmp	r3, #57	@ 0x39
 80019f2:	d9f0      	bls.n	80019d6 <strip_ipd_markers+0xd6>
        if (*q==':') q++;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80019fa:	d102      	bne.n	8001a02 <strip_ipd_markers+0x102>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
        p = q;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	623b      	str	r3, [r7, #32]
    while (*p && w < out_sz - 1) {
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <strip_ipd_markers+0x11a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f6ff af7e 	blt.w	8001916 <strip_ipd_markers+0x16>
    }
    out[w] = 0;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
    return w;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	08011240 	.word	0x08011240

08001a34 <dechunk_simple>:

// Transfer-Encoding: chunked 간단 디청크
static int dechunk_simple(const char *in, char *out, int out_sz)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
    int w = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
    const char *p = in;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	61bb      	str	r3, [r7, #24]
    while (*p) {
 8001a48:	e044      	b.n	8001ad4 <dechunk_simple+0xa0>
        int sz = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
        if (sscanf(p, "%x", &sz) != 1) break;
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	461a      	mov	r2, r3
 8001a54:	492a      	ldr	r1, [pc, #168]	@ (8001b00 <dechunk_simple+0xcc>)
 8001a56:	69b8      	ldr	r0, [r7, #24]
 8001a58:	f00b f87c 	bl	800cb54 <siscanf>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d13d      	bne.n	8001ade <dechunk_simple+0xaa>
        const char *nl = strstr(p, "\r\n");
 8001a62:	4928      	ldr	r1, [pc, #160]	@ (8001b04 <dechunk_simple+0xd0>)
 8001a64:	69b8      	ldr	r0, [r7, #24]
 8001a66:	f00b fa3d 	bl	800cee4 <strstr>
 8001a6a:	6178      	str	r0, [r7, #20]
        if (!nl) break;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d037      	beq.n	8001ae2 <dechunk_simple+0xae>
        p = nl + 2;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3302      	adds	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
        if (sz == 0) break;
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d033      	beq.n	8001ae6 <dechunk_simple+0xb2>
        if (w + sz > out_sz - 1) sz = out_sz - 1 - w;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dc04      	bgt.n	8001a94 <dechunk_simple+0x60>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	613b      	str	r3, [r7, #16]
        if (sz <= 0) break;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dd27      	ble.n	8001aea <dechunk_simple+0xb6>
        memcpy(out + w, p, sz);
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00c f96c 	bl	800dd82 <memcpy>
        w += sz;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	4413      	add	r3, r2
 8001ab0:	61fb      	str	r3, [r7, #28]
        p += sz;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4413      	add	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if (p[0]=='\r' && p[1]=='\n') p += 2;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b0d      	cmp	r3, #13
 8001ac2:	d107      	bne.n	8001ad4 <dechunk_simple+0xa0>
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d102      	bne.n	8001ad4 <dechunk_simple+0xa0>
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
    while (*p) {
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1b6      	bne.n	8001a4a <dechunk_simple+0x16>
 8001adc:	e006      	b.n	8001aec <dechunk_simple+0xb8>
        if (sscanf(p, "%x", &sz) != 1) break;
 8001ade:	bf00      	nop
 8001ae0:	e004      	b.n	8001aec <dechunk_simple+0xb8>
        if (!nl) break;
 8001ae2:	bf00      	nop
 8001ae4:	e002      	b.n	8001aec <dechunk_simple+0xb8>
        if (sz == 0) break;
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <dechunk_simple+0xb8>
        if (sz <= 0) break;
 8001aea:	bf00      	nop
    }
    out[w] = 0;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
    return w;
 8001af6:	69fb      	ldr	r3, [r7, #28]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	08011248 	.word	0x08011248
 8001b04:	0801124c 	.word	0x0801124c

08001b08 <kma_ultra_fcst_base>:

static int kma_ultra_fcst_base(char *date8, char *time4)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	@ 0x30
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
    time_t t;
    // NTP에서 얻은 epoch 사용
    if (osMutexAcquire(NTP_MutexHandle, osWaitForever) == osOK) {
 8001b12:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <kma_ultra_fcst_base+0xbc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f006 fad3 	bl	80080c6 <osMutexAcquire>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <kma_ultra_fcst_base+0x34>
        t = ntp_time;
 8001b26:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <kma_ultra_fcst_base+0xc0>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        osMutexRelease(NTP_MutexHandle);
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <kma_ultra_fcst_base+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f006 fb11 	bl	800815c <osMutexRelease>
 8001b3a:	e006      	b.n	8001b4a <kma_ultra_fcst_base+0x42>
    } else {
        t = time(NULL); // fallback
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f00b fd89 	bl	800d654 <time>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    struct tm *k = localtime(&t);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00b f9e6 	bl	800cf20 <localtime>
 8001b54:	6278      	str	r0, [r7, #36]	@ 0x24
    int yyyy = k->tm_year + 1900;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8001b5e:	623b      	str	r3, [r7, #32]
    int mm   = k->tm_mon + 1;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
    int dd   = k->tm_mday;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
    int hh   = k->tm_hour;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	617b      	str	r3, [r7, #20]
    int mi   = k->tm_min;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]

    mi = (mi / 10) * 10; //10분단위로 내림
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4a13      	ldr	r2, [pc, #76]	@ (8001bcc <kma_ultra_fcst_base+0xc4>)
 8001b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b82:	1092      	asrs	r2, r2, #2
 8001b84:	17db      	asrs	r3, r3, #31
 8001b86:	1ad2      	subs	r2, r2, r3
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	613b      	str	r3, [r7, #16]

    // 1시간 단위라서 분은 무시
    sprintf(date8, "%04d%02d%02d", yyyy, mm, dd);
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	490d      	ldr	r1, [pc, #52]	@ (8001bd0 <kma_ultra_fcst_base+0xc8>)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f00a ffb7 	bl	800cb10 <siprintf>
    sprintf(time4, "%02d%02d", hh, mi);   // hh시 정각
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	490b      	ldr	r1, [pc, #44]	@ (8001bd4 <kma_ultra_fcst_base+0xcc>)
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f00a ffb1 	bl	800cb10 <siprintf>
    printf("%02d:%02d:00->", hh, mi);
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	6979      	ldr	r1, [r7, #20]
 8001bb2:	4809      	ldr	r0, [pc, #36]	@ (8001bd8 <kma_ultra_fcst_base+0xd0>)
 8001bb4:	f00a fefe 	bl	800c9b4 <iprintf>
    return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3728      	adds	r7, #40	@ 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000243c 	.word	0x2000243c
 8001bc8:	200022d0 	.word	0x200022d0
 8001bcc:	66666667 	.word	0x66666667
 8001bd0:	08011250 	.word	0x08011250
 8001bd4:	08011260 	.word	0x08011260
 8001bd8:	0801126c 	.word	0x0801126c

08001bdc <pty_text>:

static const char* pty_text(int code)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    switch (code) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	d822      	bhi.n	8001c30 <pty_text+0x54>
 8001bea:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <pty_text+0x14>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c11 	.word	0x08001c11
 8001bf4:	08001c15 	.word	0x08001c15
 8001bf8:	08001c19 	.word	0x08001c19
 8001bfc:	08001c1d 	.word	0x08001c1d
 8001c00:	08001c21 	.word	0x08001c21
 8001c04:	08001c25 	.word	0x08001c25
 8001c08:	08001c29 	.word	0x08001c29
 8001c0c:	08001c2d 	.word	0x08001c2d
        case 0: return "NO Rain";
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <pty_text+0x64>)
 8001c12:	e00e      	b.n	8001c32 <pty_text+0x56>
        case 1: return "Rain";
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <pty_text+0x68>)
 8001c16:	e00c      	b.n	8001c32 <pty_text+0x56>
        case 2: return "Rain/Snow";
 8001c18:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <pty_text+0x6c>)
 8001c1a:	e00a      	b.n	8001c32 <pty_text+0x56>
        case 3: return "Snow";
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <pty_text+0x70>)
 8001c1e:	e008      	b.n	8001c32 <pty_text+0x56>
        case 4: return "Shower";
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <pty_text+0x74>)
 8001c22:	e006      	b.n	8001c32 <pty_text+0x56>
        case 5: return "RainDrop";
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <pty_text+0x78>)
 8001c26:	e004      	b.n	8001c32 <pty_text+0x56>
        case 6: return "RainDrop/SnowFlying";
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <pty_text+0x7c>)
 8001c2a:	e002      	b.n	8001c32 <pty_text+0x56>
        case 7: return "SnowFlying";
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <pty_text+0x80>)
 8001c2e:	e000      	b.n	8001c32 <pty_text+0x56>
        default: return "?";
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <pty_text+0x84>)
    }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	0801127c 	.word	0x0801127c
 8001c44:	08011284 	.word	0x08011284
 8001c48:	0801128c 	.word	0x0801128c
 8001c4c:	08011298 	.word	0x08011298
 8001c50:	080112a0 	.word	0x080112a0
 8001c54:	080112a8 	.word	0x080112a8
 8001c58:	080112b4 	.word	0x080112b4
 8001c5c:	080112c8 	.word	0x080112c8
 8001c60:	080112d4 	.word	0x080112d4

08001c64 <Weather_Task>:


void Weather_Task(void *argument)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	f5ad 6d3b 	sub.w	sp, sp, #2992	@ 0xbb0
 8001c6a:	af04      	add	r7, sp, #16
 8001c6c:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 8001c70:	f6a3 339c 	subw	r3, r3, #2972	@ 0xb9c
 8001c74:	6018      	str	r0, [r3, #0]
    const char *KMA_HOST = "apihub.kma.go.kr";
 8001c76:	4b7c      	ldr	r3, [pc, #496]	@ (8001e68 <Weather_Task+0x204>)
 8001c78:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
    const char *KMA_IP   = "203.247.96.25";   // nslookup 결과
 8001c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e6c <Weather_Task+0x208>)
 8001c7e:	f8c7 3b80 	str.w	r3, [r7, #2944]	@ 0xb80
    const int NX = 55, NY = 126;              // 격자 좌표(원하면 변경)
 8001c82:	2337      	movs	r3, #55	@ 0x37
 8001c84:	f8c7 3b7c 	str.w	r3, [r7, #2940]	@ 0xb7c
 8001c88:	237e      	movs	r3, #126	@ 0x7e
 8001c8a:	f8c7 3b78 	str.w	r3, [r7, #2936]	@ 0xb78
    int prev = -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
    uint16_t length;

    for (;;)
    {
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 8001c96:	f001 f81b 	bl	8002cd0 <esp_is_wifi_ready>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d104      	bne.n	8001caa <Weather_Task+0x46>
 8001ca0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ca4:	f007 fcbc 	bl	8009620 <vTaskDelay>
 8001ca8:	e256      	b.n	8002158 <Weather_Task+0x4f4>
        if (osMutexAcquire(ESP_MutexHandle, osWaitForever) == osOK) {
 8001caa:	4b71      	ldr	r3, [pc, #452]	@ (8001e70 <Weather_Task+0x20c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f006 fa07 	bl	80080c6 <osMutexAcquire>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 8248 	bne.w	8002150 <Weather_Task+0x4ec>
            // 1) 링크1 열기
            char cmd[128];
            sprintf(cmd, "AT+CIPSTART=1,\"TCP\",\"%s\",80\r\n", KMA_IP);
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	f8d7 2b80 	ldr.w	r2, [r7, #2944]	@ 0xb80
 8001cc8:	496a      	ldr	r1, [pc, #424]	@ (8001e74 <Weather_Task+0x210>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00a ff20 	bl	800cb10 <siprintf>
            if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 5000) == 0) {
 8001cd0:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8001cd4:	f107 0008 	add.w	r0, r7, #8
 8001cd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001cdc:	4966      	ldr	r1, [pc, #408]	@ (8001e78 <Weather_Task+0x214>)
 8001cde:	f000 fa69 	bl	80021b4 <esp_at_command>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 822b 	bne.w	8002140 <Weather_Task+0x4dc>
                //printf("[WEATHER] Link1 TCP connect OK\r\n");

                // 2) HTTP GET 문자열 준비
                char http_req[640];
                char base_date[9], base_time[5];
                kma_ultra_fcst_base(base_date, base_time);
 8001cea:	f607 3248 	addw	r2, r7, #2888	@ 0xb48
 8001cee:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff07 	bl	8001b08 <kma_ultra_fcst_base>

                sprintf(http_req,
 8001cfa:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8001cfe:	f507 6235 	add.w	r2, r7, #2896	@ 0xb50
 8001d02:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001d06:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4958      	ldr	r1, [pc, #352]	@ (8001e7c <Weather_Task+0x218>)
 8001d1c:	f00a fef8 	bl	800cb10 <siprintf>
                    "Connection: close\r\n\r\n",
                    base_date, base_time, NX, NY, KMA_HOST);


                // 3) AT+CIPSEND=1,<len>
                sprintf(cmd, "AT+CIPSEND=1,%d\r\n", (int)strlen(http_req));
 8001d20:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fabb 	bl	80002a0 <strlen>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4953      	ldr	r1, [pc, #332]	@ (8001e80 <Weather_Task+0x21c>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a feeb 	bl	800cb10 <siprintf>
                if (esp_at_command((uint8_t*)cmd, (uint8_t*)response, &length, 2000) == 0) {
 8001d3a:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8001d3e:	f107 0008 	add.w	r0, r7, #8
 8001d42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d46:	494c      	ldr	r1, [pc, #304]	@ (8001e78 <Weather_Task+0x214>)
 8001d48:	f000 fa34 	bl	80021b4 <esp_at_command>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 81ed 	bne.w	800212e <Weather_Task+0x4ca>
                    // (권장) 프롬프트 안정화
                    vTaskDelay(pdMS_TO_TICKS(50));
 8001d54:	2032      	movs	r0, #50	@ 0x32
 8001d56:	f007 fc63 	bl	8009620 <vTaskDelay>

                    // 4) payload 송신 (단순 송신)
                    HAL_UART_Transmit(&huart6, (uint8_t*)http_req, strlen(http_req), 500);
 8001d5a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fa9e 	bl	80002a0 <strlen>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001d6c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d70:	4844      	ldr	r0, [pc, #272]	@ (8001e84 <Weather_Task+0x220>)
 8001d72:	f004 ffdb 	bl	8006d2c <HAL_UART_Transmit>

                    // 5) 응답 수신: cb_data에서 rx로 누적 수집 (최대 8초, CLOSED 감지 시 조기 종료)
                    char rx[MAX_ESP_RX_BUFFER];
                    int  copied = 0, elapsed = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
                    memset(rx, 0, sizeof(rx));
 8001d82:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00b f801 	bl	800cd94 <memset>

                    for (;;) {
                        // CLOSED 들어오면 서버가 응답 끝내고 소켓 닫았다는 의미
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8001d92:	493d      	ldr	r1, [pc, #244]	@ (8001e88 <Weather_Task+0x224>)
 8001d94:	483d      	ldr	r0, [pc, #244]	@ (8001e8c <Weather_Task+0x228>)
 8001d96:	f00b f8a5 	bl	800cee4 <strstr>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d142      	bne.n	8001e26 <Weather_Task+0x1c2>

                        if (cb_data.length > 0) {
 8001da0:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <Weather_Task+0x228>)
 8001da2:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d02f      	beq.n	8001e0a <Weather_Task+0x1a6>
                            taskENTER_CRITICAL();
 8001daa:	f008 ff3d 	bl	800ac28 <vPortEnterCritical>
                            int n = cb_data.length;
 8001dae:	4b37      	ldr	r3, [pc, #220]	@ (8001e8c <Weather_Task+0x228>)
 8001db0:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8001db4:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
                            if (n > (int)sizeof(rx) - 1 - copied) n = sizeof(rx) - 1 - copied;
 8001db8:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001dbc:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	f8d7 2b90 	ldr.w	r2, [r7, #2960]	@ 0xb90
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dd06      	ble.n	8001dd8 <Weather_Task+0x174>
 8001dca:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001dce:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	f8c7 3b90 	str.w	r3, [r7, #2960]	@ 0xb90
                            memcpy(rx + copied, cb_data.buf, n);
 8001dd8:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 8001ddc:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8001de0:	4413      	add	r3, r2
 8001de2:	f8d7 2b90 	ldr.w	r2, [r7, #2960]	@ 0xb90
 8001de6:	4929      	ldr	r1, [pc, #164]	@ (8001e8c <Weather_Task+0x228>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00b ffca 	bl	800dd82 <memcpy>
                            cb_data.length = 0;   // 소비
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <Weather_Task+0x228>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800
                            taskEXIT_CRITICAL();
 8001df6:	f008 ff49 	bl	800ac8c <vPortExitCritical>
                            copied += n;
 8001dfa:	f8d7 2b98 	ldr.w	r2, [r7, #2968]	@ 0xb98
 8001dfe:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 8001e02:	4413      	add	r3, r2
 8001e04:	f8c7 3b98 	str.w	r3, [r7, #2968]	@ 0xb98
 8001e08:	e7c3      	b.n	8001d92 <Weather_Task+0x12e>
                        } else {
                            vTaskDelay(pdMS_TO_TICKS(20));
 8001e0a:	2014      	movs	r0, #20
 8001e0c:	f007 fc08 	bl	8009620 <vTaskDelay>
                            elapsed += 20;
 8001e10:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8001e14:	3314      	adds	r3, #20
 8001e16:	f8c7 3b94 	str.w	r3, [r7, #2964]	@ 0xb94
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8001e1a:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 8001e1e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001e22:	da02      	bge.n	8001e2a <Weather_Task+0x1c6>
                        if (strstr((char*)cb_data.buf, "CLOSED")) break;
 8001e24:	e7b5      	b.n	8001d92 <Weather_Task+0x12e>
 8001e26:	bf00      	nop
 8001e28:	e000      	b.n	8001e2c <Weather_Task+0x1c8>
                            if (elapsed >= 8000) break;  // 최대 8초 대기
 8001e2a:	bf00      	nop
                    // 디버그: 원본 앞머리
                   // { char head[200]={0}; snprintf(head,sizeof(head)-1,"%.*s",180,rx);
                   //   printf("[WEATHER] RAW head: %s\r\n", head); }

					// ---- HTTP 헤더/본문 분리 ----
					char *http = strstr(rx, "HTTP/1.1 ");
 8001e2c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001e30:	4917      	ldr	r1, [pc, #92]	@ (8001e90 <Weather_Task+0x22c>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f00b f856 	bl	800cee4 <strstr>
 8001e38:	f8c7 0b74 	str.w	r0, [r7, #2932]	@ 0xb74
					char *hdr_end = http ? strstr(http, "\r\n\r\n") : NULL;
 8001e3c:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <Weather_Task+0x1ee>
 8001e44:	4913      	ldr	r1, [pc, #76]	@ (8001e94 <Weather_Task+0x230>)
 8001e46:	f8d7 0b74 	ldr.w	r0, [r7, #2932]	@ 0xb74
 8001e4a:	f00b f84b 	bl	800cee4 <strstr>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	e000      	b.n	8001e54 <Weather_Task+0x1f0>
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 3b70 	str.w	r3, [r7, #2928]	@ 0xb70
					char *body = hdr_end ? (hdr_end + 4) : rx;
 8001e58:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <Weather_Task+0x234>
 8001e60:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001e64:	3304      	adds	r3, #4
 8001e66:	e019      	b.n	8001e9c <Weather_Task+0x238>
 8001e68:	080112d8 	.word	0x080112d8
 8001e6c:	080112ec 	.word	0x080112ec
 8001e70:	20002438 	.word	0x20002438
 8001e74:	080112fc 	.word	0x080112fc
 8001e78:	2000128c 	.word	0x2000128c
 8001e7c:	0801131c 	.word	0x0801131c
 8001e80:	080113f0 	.word	0x080113f0
 8001e84:	200023dc 	.word	0x200023dc
 8001e88:	08011404 	.word	0x08011404
 8001e8c:	20001ac4 	.word	0x20001ac4
 8001e90:	0801140c 	.word	0x0801140c
 8001e94:	08011418 	.word	0x08011418
 8001e98:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001e9c:	f8c7 3b6c 	str.w	r3, [r7, #2924]	@ 0xb6c

					// 헤더에서 chunked 여부 확인
					int is_chunked = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
					if (http && hdr_end) {
 8001ea6:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01e      	beq.n	8001eec <Weather_Task+0x288>
 8001eae:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01a      	beq.n	8001eec <Weather_Task+0x288>
						char save = *hdr_end; *hdr_end = 0;
 8001eb6:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f887 3b6b 	strb.w	r3, [r7, #2923]	@ 0xb6b
 8001ec0:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
						is_chunked = (strstr(http, "Transfer-Encoding: chunked") != NULL);
 8001ec8:	49a4      	ldr	r1, [pc, #656]	@ (800215c <Weather_Task+0x4f8>)
 8001eca:	f8d7 0b74 	ldr.w	r0, [r7, #2932]	@ 0xb74
 8001ece:	f00b f809 	bl	800cee4 <strstr>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f8c7 3b8c 	str.w	r3, [r7, #2956]	@ 0xb8c
						*hdr_end = save;
 8001ee2:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001ee6:	f897 2b6b 	ldrb.w	r2, [r7, #2923]	@ 0xb6b
 8001eea:	701a      	strb	r2, [r3, #0]
					}

					// 1) +IPD 마커 제거
					static char no_ipd[MAX_ESP_RX_BUFFER];
					strip_ipd_markers(body, no_ipd, sizeof(no_ipd));
 8001eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ef0:	499b      	ldr	r1, [pc, #620]	@ (8002160 <Weather_Task+0x4fc>)
 8001ef2:	f8d7 0b6c 	ldr.w	r0, [r7, #2924]	@ 0xb6c
 8001ef6:	f7ff fd03 	bl	8001900 <strip_ipd_markers>

					// 2) (필요시) 디청크
					static char json_buf[MAX_ESP_RX_BUFFER];
					const char *json_src = no_ipd;
 8001efa:	4b99      	ldr	r3, [pc, #612]	@ (8002160 <Weather_Task+0x4fc>)
 8001efc:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
					if (is_chunked) {
 8001f00:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <Weather_Task+0x2b6>
						dechunk_simple(no_ipd, json_buf, sizeof(json_buf));
 8001f08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f0c:	4995      	ldr	r1, [pc, #596]	@ (8002164 <Weather_Task+0x500>)
 8001f0e:	4894      	ldr	r0, [pc, #592]	@ (8002160 <Weather_Task+0x4fc>)
 8001f10:	f7ff fd90 	bl	8001a34 <dechunk_simple>
						json_src = json_buf;
 8001f14:	4b93      	ldr	r3, [pc, #588]	@ (8002164 <Weather_Task+0x500>)
 8001f16:	f8c7 3b88 	str.w	r3, [r7, #2952]	@ 0xb88
					}

                    if (strstr(rx, "HTTP/1.1 200")) {
 8001f1a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8001f1e:	4992      	ldr	r1, [pc, #584]	@ (8002168 <Weather_Task+0x504>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f00a ffdf 	bl	800cee4 <strstr>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80fb 	beq.w	8002124 <Weather_Task+0x4c0>
                        char t1h[16] = "?", reh[16] = "?", pty[16] = "?", rn1[16] = "?";
 8001f2e:	233f      	movs	r3, #63	@ 0x3f
 8001f30:	f8c7 3b38 	str.w	r3, [r7, #2872]	@ 0xb38
 8001f34:	f607 333c 	addw	r3, r7, #2876	@ 0xb3c
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	233f      	movs	r3, #63	@ 0x3f
 8001f42:	f8c7 3b28 	str.w	r3, [r7, #2856]	@ 0xb28
 8001f46:	f607 332c 	addw	r3, r7, #2860	@ 0xb2c
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	233f      	movs	r3, #63	@ 0x3f
 8001f54:	f8c7 3b18 	str.w	r3, [r7, #2840]	@ 0xb18
 8001f58:	f607 331c 	addw	r3, r7, #2844	@ 0xb1c
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	233f      	movs	r3, #63	@ 0x3f
 8001f66:	f8c7 3b08 	str.w	r3, [r7, #2824]	@ 0xb08
 8001f6a:	f607 330c 	addw	r3, r7, #2828	@ 0xb0c
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
                        json_pick_value(json_src, "T1H", t1h, sizeof(t1h));
 8001f76:	f607 3238 	addw	r2, r7, #2872	@ 0xb38
 8001f7a:	2310      	movs	r3, #16
 8001f7c:	497b      	ldr	r1, [pc, #492]	@ (800216c <Weather_Task+0x508>)
 8001f7e:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001f82:	f7ff fc39 	bl	80017f8 <json_pick_value>
                        json_pick_value(json_src, "REH", reh, sizeof(reh));
 8001f86:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	4978      	ldr	r1, [pc, #480]	@ (8002170 <Weather_Task+0x50c>)
 8001f8e:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001f92:	f7ff fc31 	bl	80017f8 <json_pick_value>
                        json_pick_value(json_src, "PTY", pty, sizeof(pty));
 8001f96:	f607 3218 	addw	r2, r7, #2840	@ 0xb18
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	4975      	ldr	r1, [pc, #468]	@ (8002174 <Weather_Task+0x510>)
 8001f9e:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001fa2:	f7ff fc29 	bl	80017f8 <json_pick_value>
                        json_pick_value(json_src, "RN1", rn1, sizeof(rn1));
 8001fa6:	f607 3208 	addw	r2, r7, #2824	@ 0xb08
 8001faa:	2310      	movs	r3, #16
 8001fac:	4972      	ldr	r1, [pc, #456]	@ (8002178 <Weather_Task+0x514>)
 8001fae:	f8d7 0b88 	ldr.w	r0, [r7, #2952]	@ 0xb88
 8001fb2:	f7ff fc21 	bl	80017f8 <json_pick_value>

                        int pty_code = atoi(pty);
 8001fb6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 f947 	bl	800b24e <atoi>
 8001fc0:	f8c7 0b64 	str.w	r0, [r7, #2916]	@ 0xb64
                        float temp_c  = atof(t1h);  // 현재기온
 8001fc4:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 f93d 	bl	800b248 <atof>
 8001fce:	ec53 2b10 	vmov	r2, r3, d0
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fe1f 	bl	8000c18 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f507 6236 	add.w	r2, r7, #2912	@ 0xb60
 8001fe0:	6013      	str	r3, [r2, #0]

                        printf("[WEATHER][Gangseo-gu] T=%s°C, RH=%s%%, RAIN=%s, RN1=%smm\r\n",
 8001fe2:	f8d7 0b64 	ldr.w	r0, [r7, #2916]	@ 0xb64
 8001fe6:	f7ff fdf9 	bl	8001bdc <pty_text>
 8001fea:	f607 3228 	addw	r2, r7, #2856	@ 0xb28
 8001fee:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8001ff2:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4860      	ldr	r0, [pc, #384]	@ (800217c <Weather_Task+0x518>)
 8001ffc:	f00a fcda 	bl	800c9b4 <iprintf>
                               t1h, reh, pty_text(pty_code), rn1);

                        if (prev != pty_code) {
 8002000:	f8d7 2b9c 	ldr.w	r2, [r7, #2972]	@ 0xb9c
 8002004:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8002008:	429a      	cmp	r2, r3
 800200a:	d00d      	beq.n	8002028 <Weather_Task+0x3c4>
                             prev = pty_code;
 800200c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8002010:	f8c7 3b9c 	str.w	r3, [r7, #2972]	@ 0xb9c
                             Servo_SetAngle(pty_code ? 90 : 0);
 8002014:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <Weather_Task+0x3bc>
 800201c:	235a      	movs	r3, #90	@ 0x5a
 800201e:	e000      	b.n	8002022 <Weather_Task+0x3be>
 8002020:	2300      	movs	r3, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb8c 	bl	8001740 <Servo_SetAngle>
                         }

                        // ★ LCD용 공유 값 업데이트
                        if (osMutexAcquire(Weather_MutexHandle, osWaitForever) == osOK) {
 8002028:	4b55      	ldr	r3, [pc, #340]	@ (8002180 <Weather_Task+0x51c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	4618      	mov	r0, r3
 8002032:	f006 f848 	bl	80080c6 <osMutexAcquire>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11e      	bne.n	800207a <Weather_Task+0x416>
                            g_t1h = (float)atof(t1h);
 800203c:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8002040:	4618      	mov	r0, r3
 8002042:	f009 f901 	bl	800b248 <atof>
 8002046:	ec53 2b10 	vmov	r2, r3, d0
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fde3 	bl	8000c18 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	4a4b      	ldr	r2, [pc, #300]	@ (8002184 <Weather_Task+0x520>)
 8002056:	6013      	str	r3, [r2, #0]
                            g_reh = atoi(reh);
 8002058:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800205c:	4618      	mov	r0, r3
 800205e:	f009 f8f6 	bl	800b24e <atoi>
 8002062:	4603      	mov	r3, r0
 8002064:	4a48      	ldr	r2, [pc, #288]	@ (8002188 <Weather_Task+0x524>)
 8002066:	6013      	str	r3, [r2, #0]
                            g_pty = pty_code;
 8002068:	4a48      	ldr	r2, [pc, #288]	@ (800218c <Weather_Task+0x528>)
 800206a:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800206e:	6013      	str	r3, [r2, #0]
                            osMutexRelease(Weather_MutexHandle);
 8002070:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <Weather_Task+0x51c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f006 f871 	bl	800815c <osMutexRelease>
                        }

                        int is_precip = (pty_code != 0);
 800207a:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f8c7 3b5c 	str.w	r3, [r7, #2908]	@ 0xb5c

                        if (is_precip || temp_c >= 35.0f) {
 800208c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <Weather_Task+0x446>
 8002094:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002190 <Weather_Task+0x52c>
 80020a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	db11      	blt.n	80020ce <Weather_Task+0x46a>
                            set_ryg(1, 0, 0);  // RED
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff fb72 	bl	8001798 <set_ryg>
                            printf("[RYG] RED ON (precip=%d, T=%.1f)\r\n", is_precip, temp_c);
 80020b4:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	f7fe fa5d 	bl	8000578 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	f8d7 1b5c 	ldr.w	r1, [r7, #2908]	@ 0xb5c
 80020c6:	4833      	ldr	r0, [pc, #204]	@ (8002194 <Weather_Task+0x530>)
 80020c8:	f00a fc74 	bl	800c9b4 <iprintf>
 80020cc:	e02f      	b.n	800212e <Weather_Task+0x4ca>
                        } else if (temp_c >= 30.0f) {
 80020ce:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80020da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	db0f      	blt.n	8002104 <Weather_Task+0x4a0>
                            set_ryg(0, 1, 0);  // YELLOW
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fb55 	bl	8001798 <set_ryg>
                            printf("[RYG] YELLOW ON (T=%.1f)\r\n", temp_c);
 80020ee:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	f7fe fa40 	bl	8000578 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4826      	ldr	r0, [pc, #152]	@ (8002198 <Weather_Task+0x534>)
 80020fe:	f00a fc59 	bl	800c9b4 <iprintf>
 8002102:	e014      	b.n	800212e <Weather_Task+0x4ca>
                        } else {
                            set_ryg(0, 0, 1);  // GREEN
 8002104:	2201      	movs	r2, #1
 8002106:	2100      	movs	r1, #0
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff fb45 	bl	8001798 <set_ryg>
                            printf("[RYG] GREEN ON (T=%.1f)\r\n", temp_c);
 800210e:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f7fe fa30 	bl	8000578 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	481f      	ldr	r0, [pc, #124]	@ (800219c <Weather_Task+0x538>)
 800211e:	f00a fc49 	bl	800c9b4 <iprintf>
 8002122:	e004      	b.n	800212e <Weather_Task+0x4ca>
                        }

                    } else {
                        printf("[WEATHER] HTTP not 200 (len=%d)\r\n", copied);
 8002124:	f8d7 1b98 	ldr.w	r1, [r7, #2968]	@ 0xb98
 8002128:	481d      	ldr	r0, [pc, #116]	@ (80021a0 <Weather_Task+0x53c>)
 800212a:	f00a fc43 	bl	800c9b4 <iprintf>
                    }
                }
                // 6) 링크1 닫기
                esp_at_command((uint8_t*)"AT+CIPCLOSE=1\r\n", (uint8_t*)response, &length, 1000);
 800212e:	f607 325a 	addw	r2, r7, #2906	@ 0xb5a
 8002132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002136:	491b      	ldr	r1, [pc, #108]	@ (80021a4 <Weather_Task+0x540>)
 8002138:	481b      	ldr	r0, [pc, #108]	@ (80021a8 <Weather_Task+0x544>)
 800213a:	f000 f83b 	bl	80021b4 <esp_at_command>
 800213e:	e002      	b.n	8002146 <Weather_Task+0x4e2>
            } else {
                printf("[WEATHER] Link1 TCP connect FAIL\r\n");
 8002140:	481a      	ldr	r0, [pc, #104]	@ (80021ac <Weather_Task+0x548>)
 8002142:	f00a fca7 	bl	800ca94 <puts>
            }

            osMutexRelease(ESP_MutexHandle);
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <Weather_Task+0x54c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f006 f806 	bl	800815c <osMutexRelease>
        }

        vTaskDelay(pdMS_TO_TICKS(30000));  // 60초 주기
 8002150:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002154:	f007 fa64 	bl	8009620 <vTaskDelay>
    	if (!esp_is_wifi_ready()) { vTaskDelay(pdMS_TO_TICKS(2000)); continue; }
 8002158:	e59d      	b.n	8001c96 <Weather_Task+0x32>
 800215a:	bf00      	nop
 800215c:	08011420 	.word	0x08011420
 8002160:	2000027c 	.word	0x2000027c
 8002164:	20000a7c 	.word	0x20000a7c
 8002168:	0801143c 	.word	0x0801143c
 800216c:	0801144c 	.word	0x0801144c
 8002170:	08011450 	.word	0x08011450
 8002174:	08011454 	.word	0x08011454
 8002178:	08011458 	.word	0x08011458
 800217c:	0801145c 	.word	0x0801145c
 8002180:	20002440 	.word	0x20002440
 8002184:	20000278 	.word	0x20000278
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004
 8002190:	420c0000 	.word	0x420c0000
 8002194:	08011498 	.word	0x08011498
 8002198:	080114bc 	.word	0x080114bc
 800219c:	080114d8 	.word	0x080114d8
 80021a0:	080114f4 	.word	0x080114f4
 80021a4:	2000128c 	.word	0x2000128c
 80021a8:	08011518 	.word	0x08011518
 80021ac:	08011528 	.word	0x08011528
 80021b0:	20002438 	.word	0x20002438

080021b4 <esp_at_command>:
//==================uart6=========================
static uint8_t data;
cb_data_t cb_data;

int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	807b      	strh	r3, [r7, #2]
	*length = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]
	memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80021c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021cc:	2100      	movs	r1, #0
 80021ce:	68b8      	ldr	r0, [r7, #8]
 80021d0:	f00a fde0 	bl	800cd94 <memset>
	memset(&cb_data, 0x00, sizeof(cb_data_t));  // 전체 클리어 금지
 80021d4:	f640 0204 	movw	r2, #2052	@ 0x804
 80021d8:	2100      	movs	r1, #0
 80021da:	482f      	ldr	r0, [pc, #188]	@ (8002298 <esp_at_command+0xe4>)
 80021dc:	f00a fdda 	bl	800cd94 <memset>

    cb_data.length = 0;
 80021e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <esp_at_command+0xe4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

	// 명령 송신
	if (HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7fe f859 	bl	80002a0 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	2364      	movs	r3, #100	@ 0x64
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	4829      	ldr	r0, [pc, #164]	@ (800229c <esp_at_command+0xe8>)
 80021f8:	f004 fd98 	bl	8006d2c <HAL_UART_Transmit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03f      	beq.n	8002282 <esp_at_command+0xce>
		return -1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e042      	b.n	800228e <esp_at_command+0xda>

	while (time_out > 0)
	{
		if (cb_data.length >= MAX_UART_RX_BUFFER) return -2;
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <esp_at_command+0xe4>)
 800220a:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800220e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002212:	d302      	bcc.n	800221a <esp_at_command+0x66>
 8002214:	f06f 0301 	mvn.w	r3, #1
 8002218:	e039      	b.n	800228e <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "ERROR") != NULL) return -3;
 800221a:	4921      	ldr	r1, [pc, #132]	@ (80022a0 <esp_at_command+0xec>)
 800221c:	481e      	ldr	r0, [pc, #120]	@ (8002298 <esp_at_command+0xe4>)
 800221e:	f00a fe61 	bl	800cee4 <strstr>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <esp_at_command+0x7a>
 8002228:	f06f 0302 	mvn.w	r3, #2
 800222c:	e02f      	b.n	800228e <esp_at_command+0xda>
		else if (strstr((char *)cb_data.buf, "CLOSED") != NULL)   // 🔥 TCP 끊김 감지
 800222e:	491d      	ldr	r1, [pc, #116]	@ (80022a4 <esp_at_command+0xf0>)
 8002230:	4819      	ldr	r0, [pc, #100]	@ (8002298 <esp_at_command+0xe4>)
 8002232:	f00a fe57 	bl	800cee4 <strstr>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <esp_at_command+0x94>
		{
			printf("ESP: TCP connection closed.\r\n");
 800223c:	481a      	ldr	r0, [pc, #104]	@ (80022a8 <esp_at_command+0xf4>)
 800223e:	f00a fc29 	bl	800ca94 <puts>
			//esp_client_conn();   // 자동 재연결
			return -5;
 8002242:	f06f 0304 	mvn.w	r3, #4
 8002246:	e022      	b.n	800228e <esp_at_command+0xda>
		}
		else if (strstr((char *)cb_data.buf, "OK") != NULL)
 8002248:	4918      	ldr	r1, [pc, #96]	@ (80022ac <esp_at_command+0xf8>)
 800224a:	4813      	ldr	r0, [pc, #76]	@ (8002298 <esp_at_command+0xe4>)
 800224c:	f00a fe4a 	bl	800cee4 <strstr>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <esp_at_command+0xc0>
		{
			memcpy(resp, cb_data.buf, cb_data.length);
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <esp_at_command+0xe4>)
 8002258:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800225c:	461a      	mov	r2, r3
 800225e:	490e      	ldr	r1, [pc, #56]	@ (8002298 <esp_at_command+0xe4>)
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f00b fd8e 	bl	800dd82 <memcpy>
			*length = cb_data.length;
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <esp_at_command+0xe4>)
 8002268:	f8b3 2800 	ldrh.w	r2, [r3, #2048]	@ 0x800
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	801a      	strh	r2, [r3, #0]
			return 0;
 8002270:	2300      	movs	r3, #0
 8002272:	e00c      	b.n	800228e <esp_at_command+0xda>
		}

		time_out -= 10;
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	3b0a      	subs	r3, #10
 8002278:	b29b      	uxth	r3, r3
 800227a:	807b      	strh	r3, [r7, #2]
		HAL_Delay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f001 fd27 	bl	8003cd0 <HAL_Delay>
	while (time_out > 0)
 8002282:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002286:	2b00      	cmp	r3, #0
 8002288:	dcbe      	bgt.n	8002208 <esp_at_command+0x54>
	}
	return -4; // Timeout
 800228a:	f06f 0303 	mvn.w	r3, #3
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20001ac4 	.word	0x20001ac4
 800229c:	200023dc 	.word	0x200023dc
 80022a0:	0801154c 	.word	0x0801154c
 80022a4:	08011554 	.word	0x08011554
 80022a8:	0801155c 	.word	0x0801155c
 80022ac:	0801157c 	.word	0x0801157c

080022b0 <esp_read_line>:

// 한 줄씩 ESP 응답 읽기

int esp_read_line(char *buf, int buf_size, int timeout_ms)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
    int i = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    int elapsed = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]

    memset(buf, 0, buf_size);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	461a      	mov	r2, r3
 80022c8:	2100      	movs	r1, #0
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f00a fd62 	bl	800cd94 <memset>

    while (elapsed < timeout_ms)
 80022d0:	e03e      	b.n	8002350 <esp_read_line+0xa0>
    {
        if (cb_data.length > 0)
 80022d2:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <esp_read_line+0xb4>)
 80022d4:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d031      	beq.n	8002340 <esp_read_line+0x90>
        {
            char c = cb_data.buf[0];
 80022dc:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <esp_read_line+0xb4>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	75fb      	strb	r3, [r7, #23]

            // 버퍼 앞으로 이동
            memmove(cb_data.buf, cb_data.buf + 1, cb_data.length - 1);
 80022e2:	4921      	ldr	r1, [pc, #132]	@ (8002368 <esp_read_line+0xb8>)
 80022e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <esp_read_line+0xb4>)
 80022e6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80022ea:	3b01      	subs	r3, #1
 80022ec:	461a      	mov	r2, r3
 80022ee:	481d      	ldr	r0, [pc, #116]	@ (8002364 <esp_read_line+0xb4>)
 80022f0:	f00a fd36 	bl	800cd60 <memmove>
            cb_data.length--;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <esp_read_line+0xb4>)
 80022f6:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <esp_read_line+0xb4>)
 8002300:	f8a3 2800 	strh.w	r2, [r3, #2048]	@ 0x800

            if (c == '\n' || c == '\r')
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b0a      	cmp	r3, #10
 8002308:	d002      	beq.n	8002310 <esp_read_line+0x60>
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	2b0d      	cmp	r3, #13
 800230e:	d109      	bne.n	8002324 <esp_read_line+0x74>
            {
                if (i == 0) // 빈 줄 무시
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01b      	beq.n	800234e <esp_read_line+0x9e>
                    continue;
                buf[i] = 0;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
                return i; // 읽은 길이 반환
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	e01a      	b.n	800235a <esp_read_line+0xaa>
            }

            if (i < buf_size - 1)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3b01      	subs	r3, #1
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	429a      	cmp	r2, r3
 800232c:	da10      	bge.n	8002350 <esp_read_line+0xa0>
                buf[i++] = c;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	61fa      	str	r2, [r7, #28]
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4413      	add	r3, r2
 800233a:	7dfa      	ldrb	r2, [r7, #23]
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e007      	b.n	8002350 <esp_read_line+0xa0>
        }
        else
        {
            HAL_Delay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f001 fcc5 	bl	8003cd0 <HAL_Delay>
            elapsed += 1;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3301      	adds	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	e000      	b.n	8002350 <esp_read_line+0xa0>
                    continue;
 800234e:	bf00      	nop
    while (elapsed < timeout_ms)
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbbc      	blt.n	80022d2 <esp_read_line+0x22>
        }
    }
    return 0; // 타임아웃
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20001ac4 	.word	0x20001ac4
 8002368:	20001ac5 	.word	0x20001ac5

0800236c <esp_reset>:


static int esp_reset(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 8002376:	1dba      	adds	r2, r7, #6
 8002378:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237c:	4909      	ldr	r1, [pc, #36]	@ (80023a4 <esp_reset+0x38>)
 800237e:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <esp_reset+0x3c>)
 8002380:	f7ff ff18 	bl	80021b4 <esp_at_command>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <esp_reset+0x24>
    {
    	return -1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e004      	b.n	800239a <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8002390:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002394:	f001 fc9c 	bl	8003cd0 <HAL_Delay>
    return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000128c 	.word	0x2000128c
 80023a8:	08011580 	.word	0x08011580

080023ac <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80023ba:	f107 020a 	add.w	r2, r7, #10
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	492d      	ldr	r1, [pc, #180]	@ (8002478 <request_ip_addr+0xcc>)
 80023c4:	482d      	ldr	r0, [pc, #180]	@ (800247c <request_ip_addr+0xd0>)
 80023c6:	f7ff fef5 	bl	80021b4 <esp_at_command>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80023d0:	482b      	ldr	r0, [pc, #172]	@ (8002480 <request_ip_addr+0xd4>)
 80023d2:	f00a fb5f 	bl	800ca94 <puts>
 80023d6:	e049      	b.n	800246c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80023d8:	492a      	ldr	r1, [pc, #168]	@ (8002484 <request_ip_addr+0xd8>)
 80023da:	4827      	ldr	r0, [pc, #156]	@ (8002478 <request_ip_addr+0xcc>)
 80023dc:	f00a fd26 	bl	800ce2c <strtok>
 80023e0:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d03e      	beq.n	8002466 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e009      	b.n	8002402 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80023ee:	4a22      	ldr	r2, [pc, #136]	@ (8002478 <request_ip_addr+0xcc>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00a faee 	bl	800c9d8 <putchar>
            for(int i = 0 ; i < length ; i++)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	3301      	adds	r3, #1
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	461a      	mov	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4293      	cmp	r3, r2
 800240a:	dbf0      	blt.n	80023ee <request_ip_addr+0x42>
        }

        while(line != NULL)
 800240c:	e02b      	b.n	8002466 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800240e:	491e      	ldr	r1, [pc, #120]	@ (8002488 <request_ip_addr+0xdc>)
 8002410:	6978      	ldr	r0, [r7, #20]
 8002412:	f00a fd67 	bl	800cee4 <strstr>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01f      	beq.n	800245c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800241c:	491b      	ldr	r1, [pc, #108]	@ (800248c <request_ip_addr+0xe0>)
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f00a fd04 	bl	800ce2c <strtok>
                ip = strtok(NULL, "\"");
 8002424:	4919      	ldr	r1, [pc, #100]	@ (800248c <request_ip_addr+0xe0>)
 8002426:	2000      	movs	r0, #0
 8002428:	f00a fd00 	bl	800ce2c <strtok>
 800242c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800242e:	4918      	ldr	r1, [pc, #96]	@ (8002490 <request_ip_addr+0xe4>)
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7fd fed5 	bl	80001e0 <strcmp>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00f      	beq.n	800245c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800243c:	2210      	movs	r2, #16
 800243e:	2100      	movs	r1, #0
 8002440:	4814      	ldr	r0, [pc, #80]	@ (8002494 <request_ip_addr+0xe8>)
 8002442:	f00a fca7 	bl	800cd94 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7fd ff2a 	bl	80002a0 <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	4810      	ldr	r0, [pc, #64]	@ (8002494 <request_ip_addr+0xe8>)
 8002454:	f00b fc95 	bl	800dd82 <memcpy>
                    return 0;
 8002458:	2300      	movs	r3, #0
 800245a:	e009      	b.n	8002470 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800245c:	4909      	ldr	r1, [pc, #36]	@ (8002484 <request_ip_addr+0xd8>)
 800245e:	2000      	movs	r0, #0
 8002460:	f00a fce4 	bl	800ce2c <strtok>
 8002464:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1d0      	bne.n	800240e <request_ip_addr+0x62>
        }
    }
    return -1;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000128c 	.word	0x2000128c
 800247c:	080115c8 	.word	0x080115c8
 8002480:	080115d4 	.word	0x080115d4
 8002484:	080115bc 	.word	0x080115bc
 8002488:	080115f4 	.word	0x080115f4
 800248c:	080115c4 	.word	0x080115c4
 8002490:	0801158c 	.word	0x0801158c
 8002494:	2000127c 	.word	0x2000127c

08002498 <esp_client_conn>:

int esp_client_conn(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0ce      	sub	sp, #312	@ 0x138
 800249c:	af02      	add	r7, sp, #8
    char at_cmd[96]; uint16_t length=0;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
    char line[128]; int n;

    // 1) TCP connect
    sprintf(at_cmd, "AT+CIPSTART=0,\"TCP\",\"%s\",%d\r\n", DST_IP, DST_PORT);
 80024a4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80024a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80024ac:	4a58      	ldr	r2, [pc, #352]	@ (8002610 <esp_client_conn+0x178>)
 80024ae:	4959      	ldr	r1, [pc, #356]	@ (8002614 <esp_client_conn+0x17c>)
 80024b0:	f00a fb2e 	bl	800cb10 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,8000)!=0) return -1;
 80024b4:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 80024b8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80024bc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80024c0:	4955      	ldr	r1, [pc, #340]	@ (8002618 <esp_client_conn+0x180>)
 80024c2:	f7ff fe77 	bl	80021b4 <esp_at_command>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <esp_client_conn+0x3a>
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	e098      	b.n	8002604 <esp_client_conn+0x16c>

    // 2) "CONNECT" or "ALREADY" 대기 (최대 5초)
    TickType_t deadline = xTaskGetTickCount() + pdMS_TO_TICKS(5000);
 80024d2:	f007 f9ef 	bl	80098b4 <xTaskGetTickCount>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80024dc:	3308      	adds	r3, #8
 80024de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int connected = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    while (xTaskGetTickCount() < deadline) {
 80024e8:	e03a      	b.n	8002560 <esp_client_conn+0xc8>
        n = esp_read_line(line, sizeof(line), 200);    // cb_data에서 한 줄씩 뽑기
 80024ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024ee:	22c8      	movs	r2, #200	@ 0xc8
 80024f0:	2180      	movs	r1, #128	@ 0x80
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fedc 	bl	80022b0 <esp_read_line>
 80024f8:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
        if (n > 0) {
 80024fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002500:	2b00      	cmp	r3, #0
 8002502:	dd2a      	ble.n	800255a <esp_client_conn+0xc2>
            if (strstr(line, "CONNECT") || strstr(line, "ALREADY")) { connected = 1; break; }
 8002504:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002508:	4944      	ldr	r1, [pc, #272]	@ (800261c <esp_client_conn+0x184>)
 800250a:	4618      	mov	r0, r3
 800250c:	f00a fcea 	bl	800cee4 <strstr>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <esp_client_conn+0x90>
 8002516:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800251a:	4941      	ldr	r1, [pc, #260]	@ (8002620 <esp_client_conn+0x188>)
 800251c:	4618      	mov	r0, r3
 800251e:	f00a fce1 	bl	800cee4 <strstr>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <esp_client_conn+0x98>
 8002528:	2301      	movs	r3, #1
 800252a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800252e:	e01e      	b.n	800256e <esp_client_conn+0xd6>
            if (strstr(line, "ERROR") || strstr(line, "FAIL")) return -2; // 즉시 실패
 8002530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002534:	493b      	ldr	r1, [pc, #236]	@ (8002624 <esp_client_conn+0x18c>)
 8002536:	4618      	mov	r0, r3
 8002538:	f00a fcd4 	bl	800cee4 <strstr>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <esp_client_conn+0xbc>
 8002542:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002546:	4938      	ldr	r1, [pc, #224]	@ (8002628 <esp_client_conn+0x190>)
 8002548:	4618      	mov	r0, r3
 800254a:	f00a fccb 	bl	800cee4 <strstr>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <esp_client_conn+0xc8>
 8002554:	f06f 0301 	mvn.w	r3, #1
 8002558:	e054      	b.n	8002604 <esp_client_conn+0x16c>
        } else {
            // 짧게 쉬고 다시 시도
            vTaskDelay(pdMS_TO_TICKS(50));
 800255a:	2032      	movs	r0, #50	@ 0x32
 800255c:	f007 f860 	bl	8009620 <vTaskDelay>
    while (xTaskGetTickCount() < deadline) {
 8002560:	f007 f9a8 	bl	80098b4 <xTaskGetTickCount>
 8002564:	4602      	mov	r2, r0
 8002566:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800256a:	4293      	cmp	r3, r2
 800256c:	d8bd      	bhi.n	80024ea <esp_client_conn+0x52>
        }
    }
    if (!connected) {
 800256e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d114      	bne.n	80025a0 <esp_client_conn+0x108>
        // 최후 수단: 상태 폴링으로 연결 확인
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n",(uint8_t*)response,&length,700)!=0 ||
 8002576:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 800257a:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 800257e:	4926      	ldr	r1, [pc, #152]	@ (8002618 <esp_client_conn+0x180>)
 8002580:	482a      	ldr	r0, [pc, #168]	@ (800262c <esp_client_conn+0x194>)
 8002582:	f7ff fe17 	bl	80021b4 <esp_at_command>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <esp_client_conn+0x102>
            !strstr((char*)response,"STATUS:3")) {
 800258c:	4928      	ldr	r1, [pc, #160]	@ (8002630 <esp_client_conn+0x198>)
 800258e:	4822      	ldr	r0, [pc, #136]	@ (8002618 <esp_client_conn+0x180>)
 8002590:	f00a fca8 	bl	800cee4 <strstr>
 8002594:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n",(uint8_t*)response,&length,700)!=0 ||
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <esp_client_conn+0x108>
            return -3; // 연결 안됨
 800259a:	f06f 0302 	mvn.w	r3, #2
 800259e:	e031      	b.n	8002604 <esp_client_conn+0x16c>
        }
    }

    // 3) 로그인 payload 전송
    char payload[64];
    snprintf(payload,sizeof(payload),"[%s:%s]", LOGID, PASSWD);
 80025a0:	4638      	mov	r0, r7
 80025a2:	4b24      	ldr	r3, [pc, #144]	@ (8002634 <esp_client_conn+0x19c>)
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <esp_client_conn+0x1a0>)
 80025a8:	4a24      	ldr	r2, [pc, #144]	@ (800263c <esp_client_conn+0x1a4>)
 80025aa:	2140      	movs	r1, #64	@ 0x40
 80025ac:	f00a fa7a 	bl	800caa4 <sniprintf>

    sprintf(at_cmd,"AT+CIPSEND=0,%d\r\n",(int)strlen(payload));
 80025b0:	463b      	mov	r3, r7
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd fe74 	bl	80002a0 <strlen>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80025c0:	491f      	ldr	r1, [pc, #124]	@ (8002640 <esp_client_conn+0x1a8>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00a faa4 	bl	800cb10 <siprintf>
    if (esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,3000)!=0) return -4;
 80025c8:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 80025cc:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80025d0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80025d4:	4910      	ldr	r1, [pc, #64]	@ (8002618 <esp_client_conn+0x180>)
 80025d6:	f7ff fded 	bl	80021b4 <esp_at_command>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <esp_client_conn+0x14e>
 80025e0:	f06f 0303 	mvn.w	r3, #3
 80025e4:	e00e      	b.n	8002604 <esp_client_conn+0x16c>
    if (esp_at_command((uint8_t*)payload,(uint8_t*)response,&length,3000)!=0) return -5;
 80025e6:	f107 02c2 	add.w	r2, r7, #194	@ 0xc2
 80025ea:	4638      	mov	r0, r7
 80025ec:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80025f0:	4909      	ldr	r1, [pc, #36]	@ (8002618 <esp_client_conn+0x180>)
 80025f2:	f7ff fddf 	bl	80021b4 <esp_at_command>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <esp_client_conn+0x16a>
 80025fc:	f06f 0304 	mvn.w	r3, #4
 8002600:	e000      	b.n	8002604 <esp_client_conn+0x16c>

    return 0;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	08011600 	.word	0x08011600
 8002614:	0801160c 	.word	0x0801160c
 8002618:	2000128c 	.word	0x2000128c
 800261c:	0801162c 	.word	0x0801162c
 8002620:	08011634 	.word	0x08011634
 8002624:	0801154c 	.word	0x0801154c
 8002628:	0801163c 	.word	0x0801163c
 800262c:	08011644 	.word	0x08011644
 8002630:	08011654 	.word	0x08011654
 8002634:	08011670 	.word	0x08011670
 8002638:	08011660 	.word	0x08011660
 800263c:	08011668 	.word	0x08011668
 8002640:	08011678 	.word	0x08011678

08002644 <esp_get_status>:


int esp_get_status(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
    // 0 : Link0 connected
    // -1: Link0 not connected
    uint16_t length = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	807b      	strh	r3, [r7, #2]
    int ret = -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	607b      	str	r3, [r7, #4]

    if (osMutexAcquire(ESP_MutexHandle, 1000) == osOK) {
 8002654:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <esp_get_status+0x84>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800265c:	4618      	mov	r0, r3
 800265e:	f005 fd32 	bl	80080c6 <osMutexAcquire>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d129      	bne.n	80026bc <esp_get_status+0x78>
        if (esp_at_command((uint8_t*)"AT+CIPSTATUS\r\n", (uint8_t*)response, &length, 1500) == 0) {
 8002668:	1cba      	adds	r2, r7, #2
 800266a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800266e:	4917      	ldr	r1, [pc, #92]	@ (80026cc <esp_get_status+0x88>)
 8002670:	4817      	ldr	r0, [pc, #92]	@ (80026d0 <esp_get_status+0x8c>)
 8002672:	f7ff fd9f 	bl	80021b4 <esp_at_command>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11a      	bne.n	80026b2 <esp_get_status+0x6e>
            // MUX=1 응답에서 "+CIPSTATUS:0,..." 라인이 있으면 Link0가 실제 연결 상태
            if (strstr((char*)response, "+CIPSTATUS:0") &&
 800267c:	4915      	ldr	r1, [pc, #84]	@ (80026d4 <esp_get_status+0x90>)
 800267e:	4813      	ldr	r0, [pc, #76]	@ (80026cc <esp_get_status+0x88>)
 8002680:	f00a fc30 	bl	800cee4 <strstr>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <esp_get_status+0x68>
                (strstr((char*)response, "\"TCP\"") || strstr((char*)response, "\"UDP\""))) {
 800268a:	4913      	ldr	r1, [pc, #76]	@ (80026d8 <esp_get_status+0x94>)
 800268c:	480f      	ldr	r0, [pc, #60]	@ (80026cc <esp_get_status+0x88>)
 800268e:	f00a fc29 	bl	800cee4 <strstr>
 8002692:	4603      	mov	r3, r0
            if (strstr((char*)response, "+CIPSTATUS:0") &&
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <esp_get_status+0x62>
                (strstr((char*)response, "\"TCP\"") || strstr((char*)response, "\"UDP\""))) {
 8002698:	4910      	ldr	r1, [pc, #64]	@ (80026dc <esp_get_status+0x98>)
 800269a:	480c      	ldr	r0, [pc, #48]	@ (80026cc <esp_get_status+0x88>)
 800269c:	f00a fc22 	bl	800cee4 <strstr>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <esp_get_status+0x68>
                ret = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	e002      	b.n	80026b2 <esp_get_status+0x6e>
            } else {
                ret = -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	607b      	str	r3, [r7, #4]
            }
        }
        osMutexRelease(ESP_MutexHandle);
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <esp_get_status+0x84>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 fd50 	bl	800815c <osMutexRelease>
    }
    return ret;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20002438 	.word	0x20002438
 80026cc:	2000128c 	.word	0x2000128c
 80026d0:	08011644 	.word	0x08011644
 80026d4:	0801168c 	.word	0x0801168c
 80026d8:	0801169c 	.word	0x0801169c
 80026dc:	080116a4 	.word	0x080116a4

080026e0 <drv_esp_init>:

 int drv_esp_init(void)
 {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
     memset(ip_addr, 0x00, sizeof(ip_addr));
 80026e6:	2210      	movs	r2, #16
 80026e8:	2100      	movs	r1, #0
 80026ea:	4817      	ldr	r0, [pc, #92]	@ (8002748 <drv_esp_init+0x68>)
 80026ec:	f00a fb52 	bl	800cd94 <memset>
     memset(&cb_data, 0, sizeof(cb_data));
 80026f0:	f640 0204 	movw	r2, #2052	@ 0x804
 80026f4:	2100      	movs	r1, #0
 80026f6:	4815      	ldr	r0, [pc, #84]	@ (800274c <drv_esp_init+0x6c>)
 80026f8:	f00a fb4c 	bl	800cd94 <memset>
     HAL_UART_Receive_IT(&huart6, &data, 1);
 80026fc:	2201      	movs	r2, #1
 80026fe:	4914      	ldr	r1, [pc, #80]	@ (8002750 <drv_esp_init+0x70>)
 8002700:	4814      	ldr	r0, [pc, #80]	@ (8002754 <drv_esp_init+0x74>)
 8002702:	f004 fb9e 	bl	8006e42 <HAL_UART_Receive_IT>

     // 부팅 직후 워밍업: "AT" 핑 1~3회
     for (int i=0 ; i<3 ; i++) {
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	e011      	b.n	8002730 <drv_esp_init+0x50>
         uint16_t len=0;
 800270c:	2300      	movs	r3, #0
 800270e:	807b      	strh	r3, [r7, #2]
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8002710:	1cba      	adds	r2, r7, #2
 8002712:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002716:	4910      	ldr	r1, [pc, #64]	@ (8002758 <drv_esp_init+0x78>)
 8002718:	4810      	ldr	r0, [pc, #64]	@ (800275c <drv_esp_init+0x7c>)
 800271a:	f7ff fd4b 	bl	80021b4 <esp_at_command>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <drv_esp_init+0x58>
         HAL_Delay(100);
 8002724:	2064      	movs	r0, #100	@ 0x64
 8002726:	f001 fad3 	bl	8003cd0 <HAL_Delay>
     for (int i=0 ; i<3 ; i++) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3301      	adds	r3, #1
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b02      	cmp	r3, #2
 8002734:	ddea      	ble.n	800270c <drv_esp_init+0x2c>
 8002736:	e000      	b.n	800273a <drv_esp_init+0x5a>
         if (esp_at_command((uint8_t*)"AT\r\n",(uint8_t*)response,&len,500)==0) break;
 8002738:	bf00      	nop
     }
     return esp_reset();
 800273a:	f7ff fe17 	bl	800236c <esp_reset>
 800273e:	4603      	mov	r3, r0
 }
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000127c 	.word	0x2000127c
 800274c:	20001ac4 	.word	0x20001ac4
 8002750:	20001ac3 	.word	0x20001ac3
 8002754:	200023dc 	.word	0x200023dc
 8002758:	2000128c 	.word	0x2000128c
 800275c:	080116ac 	.word	0x080116ac

08002760 <reset_func>:

void reset_func()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8002764:	4808      	ldr	r0, [pc, #32]	@ (8002788 <reset_func+0x28>)
 8002766:	f00a f925 	bl	800c9b4 <iprintf>
	if(esp_reset() == 0)
 800276a:	f7ff fdff 	bl	800236c <esp_reset>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d103      	bne.n	800277c <reset_func+0x1c>
			printf("OK\r\n");
 8002774:	4805      	ldr	r0, [pc, #20]	@ (800278c <reset_func+0x2c>)
 8002776:	f00a f98d 	bl	800ca94 <puts>
	else
			printf("fail\r\n");
}
 800277a:	e002      	b.n	8002782 <reset_func+0x22>
			printf("fail\r\n");
 800277c:	4804      	ldr	r0, [pc, #16]	@ (8002790 <reset_func+0x30>)
 800277e:	f00a f989 	bl	800ca94 <puts>
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	080116b4 	.word	0x080116b4
 800278c:	080116c4 	.word	0x080116c4
 8002790:	080116c8 	.word	0x080116c8

08002794 <version_func>:

void version_func()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
  uint16_t length = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	807b      	strh	r3, [r7, #2]
  printf("esp firmware version\r\n");
 800279e:	4813      	ldr	r0, [pc, #76]	@ (80027ec <version_func+0x58>)
 80027a0:	f00a f978 	bl	800ca94 <puts>
  if(esp_at_command((uint8_t *)"AT+GMR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80027a4:	1cba      	adds	r2, r7, #2
 80027a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027aa:	4911      	ldr	r1, [pc, #68]	@ (80027f0 <version_func+0x5c>)
 80027ac:	4811      	ldr	r0, [pc, #68]	@ (80027f4 <version_func+0x60>)
 80027ae:	f7ff fd01 	bl	80021b4 <esp_at_command>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <version_func+0x2c>
      printf("ap scan command fail\r\n");
 80027b8:	480f      	ldr	r0, [pc, #60]	@ (80027f8 <version_func+0x64>)
 80027ba:	f00a f96b 	bl	800ca94 <puts>
  else
  {
      for(int i = 0 ; i < length ; i++)
          printf("%c", response[i]);
  }
}
 80027be:	e011      	b.n	80027e4 <version_func+0x50>
      for(int i = 0 ; i < length ; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	e009      	b.n	80027da <version_func+0x46>
          printf("%c", response[i]);
 80027c6:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <version_func+0x5c>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00a f902 	bl	800c9d8 <putchar>
      for(int i = 0 ; i < length ; i++)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3301      	adds	r3, #1
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4293      	cmp	r3, r2
 80027e2:	dbf0      	blt.n	80027c6 <version_func+0x32>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	080116d0 	.word	0x080116d0
 80027f0:	2000128c 	.word	0x2000128c
 80027f4:	080116e8 	.word	0x080116e8
 80027f8:	080116f4 	.word	0x080116f4

080027fc <ap_conn_func>:

void ap_conn_func(char *ssid, char *passwd)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b096      	sub	sp, #88	@ 0x58
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint16_t length=0; char at_cmd[MAX_ESP_COMMAND_LEN]={0};
 8002806:	2300      	movs	r3, #0
 8002808:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	2240      	movs	r2, #64	@ 0x40
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f00a fabd 	bl	800cd94 <memset>
  if(!ssid || !passwd){ printf("invalid command : ap_conn <ssid> <passwd>\r\n"); return; }
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <ap_conn_func+0x2a>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <ap_conn_func+0x32>
 8002826:	4838      	ldr	r0, [pc, #224]	@ (8002908 <ap_conn_func+0x10c>)
 8002828:	f00a f934 	bl	800ca94 <puts>
 800282c:	e069      	b.n	8002902 <ap_conn_func+0x106>

  esp_at_command((uint8_t*)"AT+CWMODE=1\r\n",(uint8_t*)response,&length,1500);
 800282e:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8002832:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002836:	4935      	ldr	r1, [pc, #212]	@ (800290c <ap_conn_func+0x110>)
 8002838:	4835      	ldr	r0, [pc, #212]	@ (8002910 <ap_conn_func+0x114>)
 800283a:	f7ff fcbb 	bl	80021b4 <esp_at_command>
  esp_at_command((uint8_t*)"AT+CWQAP\r\n",(uint8_t*)response,&length,1500); HAL_Delay(200);
 800283e:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8002842:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002846:	4931      	ldr	r1, [pc, #196]	@ (800290c <ap_conn_func+0x110>)
 8002848:	4832      	ldr	r0, [pc, #200]	@ (8002914 <ap_conn_func+0x118>)
 800284a:	f7ff fcb3 	bl	80021b4 <esp_at_command>
 800284e:	20c8      	movs	r0, #200	@ 0xc8
 8002850:	f001 fa3e 	bl	8003cd0 <HAL_Delay>

  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, passwd);
 8002854:	f107 0008 	add.w	r0, r7, #8
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	492e      	ldr	r1, [pc, #184]	@ (8002918 <ap_conn_func+0x11c>)
 800285e:	f00a f957 	bl	800cb10 <siprintf>
  int rc = esp_at_command((uint8_t*)at_cmd,(uint8_t*)response,&length,30000);
 8002862:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8002866:	f107 0008 	add.w	r0, r7, #8
 800286a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800286e:	4927      	ldr	r1, [pc, #156]	@ (800290c <ap_conn_func+0x110>)
 8002870:	f7ff fca0 	bl	80021b4 <esp_at_command>
 8002874:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (rc!=0) {
 8002876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d03f      	beq.n	80028fc <ap_conn_func+0x100>
    int ok=0;
 800287c:	2300      	movs	r3, #0
 800287e:	657b      	str	r3, [r7, #84]	@ 0x54
    for (int i=0;i<10 && !ok;i++){
 8002880:	2300      	movs	r3, #0
 8002882:	653b      	str	r3, [r7, #80]	@ 0x50
 8002884:	e02d      	b.n	80028e2 <ap_conn_func+0xe6>
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8002886:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 800288a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800288e:	491f      	ldr	r1, [pc, #124]	@ (800290c <ap_conn_func+0x110>)
 8002890:	4822      	ldr	r0, [pc, #136]	@ (800291c <ap_conn_func+0x120>)
 8002892:	f7ff fc8f 	bl	80021b4 <esp_at_command>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d11b      	bne.n	80028d4 <ap_conn_func+0xd8>
          strstr(response, "+CWJAP:")) {
 800289c:	4920      	ldr	r1, [pc, #128]	@ (8002920 <ap_conn_func+0x124>)
 800289e:	481b      	ldr	r0, [pc, #108]	@ (800290c <ap_conn_func+0x110>)
 80028a0:	f00a fb20 	bl	800cee4 <strstr>
 80028a4:	4603      	mov	r3, r0
      if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d014      	beq.n	80028d4 <ap_conn_func+0xd8>
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80028aa:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 80028ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b2:	4916      	ldr	r1, [pc, #88]	@ (800290c <ap_conn_func+0x110>)
 80028b4:	481b      	ldr	r0, [pc, #108]	@ (8002924 <ap_conn_func+0x128>)
 80028b6:	f7ff fc7d 	bl	80021b4 <esp_at_command>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 80028c0:	4919      	ldr	r1, [pc, #100]	@ (8002928 <ap_conn_func+0x12c>)
 80028c2:	4812      	ldr	r0, [pc, #72]	@ (800290c <ap_conn_func+0x110>)
 80028c4:	f00a fb0e 	bl	800cee4 <strstr>
 80028c8:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <ap_conn_func+0xd8>
            !strstr(response, "ip:\"0.0.0.0\"")) { ok=1; break; }
 80028ce:	2301      	movs	r3, #1
 80028d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80028d2:	e00c      	b.n	80028ee <ap_conn_func+0xf2>
      }
      HAL_Delay(1000);
 80028d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028d8:	f001 f9fa 	bl	8003cd0 <HAL_Delay>
    for (int i=0;i<10 && !ok;i++){
 80028dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028de:	3301      	adds	r3, #1
 80028e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80028e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	dc02      	bgt.n	80028ee <ap_conn_func+0xf2>
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0cb      	beq.n	8002886 <ap_conn_func+0x8a>
    }
    if (!ok){ printf("ap join failed (no SSID/IP)\r\n"); return; }
 80028ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d103      	bne.n	80028fc <ap_conn_func+0x100>
 80028f4:	480d      	ldr	r0, [pc, #52]	@ (800292c <ap_conn_func+0x130>)
 80028f6:	f00a f8cd 	bl	800ca94 <puts>
 80028fa:	e002      	b.n	8002902 <ap_conn_func+0x106>
  }
  printf("WIFI GOT IP\r\n");
 80028fc:	480c      	ldr	r0, [pc, #48]	@ (8002930 <ap_conn_func+0x134>)
 80028fe:	f00a f8c9 	bl	800ca94 <puts>
}
 8002902:	3758      	adds	r7, #88	@ 0x58
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0801170c 	.word	0x0801170c
 800290c:	2000128c 	.word	0x2000128c
 8002910:	08011738 	.word	0x08011738
 8002914:	08011748 	.word	0x08011748
 8002918:	08011754 	.word	0x08011754
 800291c:	0801176c 	.word	0x0801176c
 8002920:	08011778 	.word	0x08011778
 8002924:	08011594 	.word	0x08011594
 8002928:	08011780 	.word	0x08011780
 800292c:	08011790 	.word	0x08011790
 8002930:	080117b0 	.word	0x080117b0

08002934 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART6)  // ESP
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <HAL_UART_RxCpltCallback+0x9c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d117      	bne.n	8002976 <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8002946:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_UART_RxCpltCallback+0xa0>)
 8002948:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 800294c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002950:	d20c      	bcs.n	800296c <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_UART_RxCpltCallback+0xa0>)
 8002954:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	b291      	uxth	r1, r2
 800295c:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <HAL_UART_RxCpltCallback+0xa0>)
 800295e:	f8a2 1800 	strh.w	r1, [r2, #2048]	@ 0x800
 8002962:	461a      	mov	r2, r3
 8002964:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <HAL_UART_RxCpltCallback+0xa4>)
 8002966:	7819      	ldrb	r1, [r3, #0]
 8002968:	4b1a      	ldr	r3, [pc, #104]	@ (80029d4 <HAL_UART_RxCpltCallback+0xa0>)
 800296a:	5499      	strb	r1, [r3, r2]
        }
        HAL_UART_Receive_IT(huart, &data, 1);
 800296c:	2201      	movs	r2, #1
 800296e:	491a      	ldr	r1, [pc, #104]	@ (80029d8 <HAL_UART_RxCpltCallback+0xa4>)
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f004 fa66 	bl	8006e42 <HAL_UART_Receive_IT>
    }

    if(huart->Instance == USART2)  // 콘솔
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <HAL_UART_RxCpltCallback+0xa8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d122      	bne.n	80029c6 <HAL_UART_RxCpltCallback+0x92>
    {
        static int i = 0;
        rx2Data[i] = cdata;
 8002980:	4b17      	ldr	r3, [pc, #92]	@ (80029e0 <HAL_UART_RxCpltCallback+0xac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a17      	ldr	r2, [pc, #92]	@ (80029e4 <HAL_UART_RxCpltCallback+0xb0>)
 8002986:	7811      	ldrb	r1, [r2, #0]
 8002988:	4a17      	ldr	r2, [pc, #92]	@ (80029e8 <HAL_UART_RxCpltCallback+0xb4>)
 800298a:	54d1      	strb	r1, [r2, r3]
        if(rx2Data[i] == '\r')
 800298c:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <HAL_UART_RxCpltCallback+0xac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a15      	ldr	r2, [pc, #84]	@ (80029e8 <HAL_UART_RxCpltCallback+0xb4>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b0d      	cmp	r3, #13
 8002998:	d10b      	bne.n	80029b2 <HAL_UART_RxCpltCallback+0x7e>
        {
            rx2Data[i] = '\0';
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_UART_RxCpltCallback+0xac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a12      	ldr	r2, [pc, #72]	@ (80029e8 <HAL_UART_RxCpltCallback+0xb4>)
 80029a0:	2100      	movs	r1, #0
 80029a2:	54d1      	strb	r1, [r2, r3]
            rx2Flag = 1;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_UART_RxCpltCallback+0xb8>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
            i = 0;
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <HAL_UART_RxCpltCallback+0xac>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e004      	b.n	80029bc <HAL_UART_RxCpltCallback+0x88>
        }
        else
        {
            i++;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_UART_RxCpltCallback+0xac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_UART_RxCpltCallback+0xac>)
 80029ba:	6013      	str	r3, [r2, #0]
        }
        HAL_UART_Receive_IT(huart, &cdata, 1);
 80029bc:	2201      	movs	r2, #1
 80029be:	4909      	ldr	r1, [pc, #36]	@ (80029e4 <HAL_UART_RxCpltCallback+0xb0>)
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f004 fa3e 	bl	8006e42 <HAL_UART_Receive_IT>
    }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40011400 	.word	0x40011400
 80029d4:	20001ac4 	.word	0x20001ac4
 80029d8:	20001ac3 	.word	0x20001ac3
 80029dc:	40004400 	.word	0x40004400
 80029e0:	200022c8 	.word	0x200022c8
 80029e4:	20001ac2 	.word	0x20001ac2
 80029e8:	20001a90 	.word	0x20001a90
 80029ec:	20001a8c 	.word	0x20001a8c

080029f0 <AiotClient_Init>:



void AiotClient_Init()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
	reset_func();
 80029f6:	f7ff feb3 	bl	8002760 <reset_func>
	version_func();
 80029fa:	f7ff fecb 	bl	8002794 <version_func>
	//ip_state_func();
	ap_conn_func(SSID,PASS);
 80029fe:	490a      	ldr	r1, [pc, #40]	@ (8002a28 <AiotClient_Init+0x38>)
 8002a00:	480a      	ldr	r0, [pc, #40]	@ (8002a2c <AiotClient_Init+0x3c>)
 8002a02:	f7ff fefb 	bl	80027fc <ap_conn_func>
	request_ip_addr(1);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff fcd0 	bl	80023ac <request_ip_addr>

    // ★ 멀티커넥션 ON
	uint16_t length = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t*)"AT+CIPMUX=1\r\n", (uint8_t*)response, &length, 1000);
 8002a10:	1dba      	adds	r2, r7, #6
 8002a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a16:	4906      	ldr	r1, [pc, #24]	@ (8002a30 <AiotClient_Init+0x40>)
 8002a18:	4806      	ldr	r0, [pc, #24]	@ (8002a34 <AiotClient_Init+0x44>)
 8002a1a:	f7ff fbcb 	bl	80021b4 <esp_at_command>

	//esp_client_conn();
	//esp_get_status();
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	080117f8 	.word	0x080117f8
 8002a2c:	08011804 	.word	0x08011804
 8002a30:	2000128c 	.word	0x2000128c
 8002a34:	0801180c 	.word	0x0801180c

08002a38 <drv_uart_init>:
}


//==================uart2=========================
int drv_uart_init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <drv_uart_init+0x14>)
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <drv_uart_init+0x18>)
 8002a42:	f004 f9fe 	bl	8006e42 <HAL_UART_Receive_IT>
    return 0;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20001ac2 	.word	0x20001ac2
 8002a50:	20002394 	.word	0x20002394

08002a54 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8002a5c:	1d39      	adds	r1, r7, #4
 8002a5e:	230a      	movs	r3, #10
 8002a60:	2201      	movs	r2, #1
 8002a62:	4807      	ldr	r0, [pc, #28]	@ (8002a80 <__io_putchar+0x2c>)
 8002a64:	f004 f962 	bl	8006d2c <HAL_UART_Transmit>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <__io_putchar+0x1e>
        return ch;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	e001      	b.n	8002a76 <__io_putchar+0x22>
    return -1;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20002394 	.word	0x20002394

08002a84 <parse_cipsntptime_line>:

// AT+CIPSNTPTIME? 결과 한 줄 파싱
int parse_cipsntptime_line(const char *line, time_t *epoch_out)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b09a      	sub	sp, #104	@ 0x68
 8002a88:	af06      	add	r7, sp, #24
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
    // 예: +CIPSNTPTIME:Thu Aug 17 15:24:30 2023
    struct tm tm_info;
    memset(&tm_info, 0, sizeof(struct tm));
 8002a8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a92:	2224      	movs	r2, #36	@ 0x24
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f00a f97c 	bl	800cd94 <memset>

    if (strstr(line, "+CIPSNTPTIME:") == NULL)
 8002a9c:	4969      	ldr	r1, [pc, #420]	@ (8002c44 <parse_cipsntptime_line+0x1c0>)
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f00a fa20 	bl	800cee4 <strstr>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <parse_cipsntptime_line+0x2c>
        return -1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e0c5      	b.n	8002c3c <parse_cipsntptime_line+0x1b8>

    // 문자열 파싱
    char weekday[4], month[4];
    int day, year, hour, min, sec;

    int ret = sscanf(line, "+CIPSNTPTIME:%3s %3s %d %d:%d:%d %d",
 8002ab0:	f107 0120 	add.w	r1, r7, #32
 8002ab4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	9304      	str	r3, [sp, #16]
 8002abe:	f107 030c 	add.w	r3, r7, #12
 8002ac2:	9303      	str	r3, [sp, #12]
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	9302      	str	r3, [sp, #8]
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	495b      	ldr	r1, [pc, #364]	@ (8002c48 <parse_cipsntptime_line+0x1c4>)
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f00a f83a 	bl	800cb54 <siscanf>
 8002ae0:	64f8      	str	r0, [r7, #76]	@ 0x4c
                     weekday, month, &day, &hour, &min, &sec, &year);

    if (ret == 7)
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	f040 80a7 	bne.w	8002c38 <parse_cipsntptime_line+0x1b4>
    {
        if (strcmp(month, "Jan") == 0) tm_info.tm_mon = 0;
 8002aea:	f107 0320 	add.w	r3, r7, #32
 8002aee:	4957      	ldr	r1, [pc, #348]	@ (8002c4c <parse_cipsntptime_line+0x1c8>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fb75 	bl	80001e0 <strcmp>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <parse_cipsntptime_line+0x7e>
 8002afc:	2300      	movs	r3, #0
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b00:	e082      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Feb") == 0) tm_info.tm_mon = 1;
 8002b02:	f107 0320 	add.w	r3, r7, #32
 8002b06:	4952      	ldr	r1, [pc, #328]	@ (8002c50 <parse_cipsntptime_line+0x1cc>)
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fb69 	bl	80001e0 <strcmp>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <parse_cipsntptime_line+0x96>
 8002b14:	2301      	movs	r3, #1
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b18:	e076      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Mar") == 0) tm_info.tm_mon = 2;
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	494d      	ldr	r1, [pc, #308]	@ (8002c54 <parse_cipsntptime_line+0x1d0>)
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fb5d 	bl	80001e0 <strcmp>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <parse_cipsntptime_line+0xae>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b30:	e06a      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Apr") == 0) tm_info.tm_mon = 3;
 8002b32:	f107 0320 	add.w	r3, r7, #32
 8002b36:	4948      	ldr	r1, [pc, #288]	@ (8002c58 <parse_cipsntptime_line+0x1d4>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fb51 	bl	80001e0 <strcmp>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <parse_cipsntptime_line+0xc6>
 8002b44:	2303      	movs	r3, #3
 8002b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b48:	e05e      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "May") == 0) tm_info.tm_mon = 4;
 8002b4a:	f107 0320 	add.w	r3, r7, #32
 8002b4e:	4943      	ldr	r1, [pc, #268]	@ (8002c5c <parse_cipsntptime_line+0x1d8>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fb45 	bl	80001e0 <strcmp>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <parse_cipsntptime_line+0xde>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b60:	e052      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jun") == 0) tm_info.tm_mon = 5;
 8002b62:	f107 0320 	add.w	r3, r7, #32
 8002b66:	493e      	ldr	r1, [pc, #248]	@ (8002c60 <parse_cipsntptime_line+0x1dc>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fb39 	bl	80001e0 <strcmp>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <parse_cipsntptime_line+0xf6>
 8002b74:	2305      	movs	r3, #5
 8002b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b78:	e046      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Jul") == 0) tm_info.tm_mon = 6;
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	4939      	ldr	r1, [pc, #228]	@ (8002c64 <parse_cipsntptime_line+0x1e0>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fb2d 	bl	80001e0 <strcmp>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <parse_cipsntptime_line+0x10e>
 8002b8c:	2306      	movs	r3, #6
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b90:	e03a      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Aug") == 0) tm_info.tm_mon = 7;
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	4934      	ldr	r1, [pc, #208]	@ (8002c68 <parse_cipsntptime_line+0x1e4>)
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fb21 	bl	80001e0 <strcmp>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <parse_cipsntptime_line+0x126>
 8002ba4:	2307      	movs	r3, #7
 8002ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ba8:	e02e      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Sep") == 0) tm_info.tm_mon = 8;
 8002baa:	f107 0320 	add.w	r3, r7, #32
 8002bae:	492f      	ldr	r1, [pc, #188]	@ (8002c6c <parse_cipsntptime_line+0x1e8>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fb15 	bl	80001e0 <strcmp>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <parse_cipsntptime_line+0x13e>
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bc0:	e022      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Oct") == 0) tm_info.tm_mon = 9;
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	492a      	ldr	r1, [pc, #168]	@ (8002c70 <parse_cipsntptime_line+0x1ec>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fb09 	bl	80001e0 <strcmp>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <parse_cipsntptime_line+0x156>
 8002bd4:	2309      	movs	r3, #9
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd8:	e016      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Nov") == 0) tm_info.tm_mon = 10;
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	4925      	ldr	r1, [pc, #148]	@ (8002c74 <parse_cipsntptime_line+0x1f0>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fafd 	bl	80001e0 <strcmp>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <parse_cipsntptime_line+0x16e>
 8002bec:	230a      	movs	r3, #10
 8002bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bf0:	e00a      	b.n	8002c08 <parse_cipsntptime_line+0x184>
        else if (strcmp(month, "Dec") == 0) tm_info.tm_mon = 11;
 8002bf2:	f107 0320 	add.w	r3, r7, #32
 8002bf6:	4920      	ldr	r1, [pc, #128]	@ (8002c78 <parse_cipsntptime_line+0x1f4>)
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd faf1 	bl	80001e0 <strcmp>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <parse_cipsntptime_line+0x184>
 8002c04:	230b      	movs	r3, #11
 8002c06:	63bb      	str	r3, [r7, #56]	@ 0x38

        tm_info.tm_mday = day;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	637b      	str	r3, [r7, #52]	@ 0x34
        tm_info.tm_hour = hour;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
        tm_info.tm_min  = min;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tm_info.tm_sec  = sec;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
        tm_info.tm_year = year - 1900;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8002c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        *epoch_out = mktime(&tm_info);
 8002c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c24:	4618      	mov	r0, r3
 8002c26:	f00a fb5d 	bl	800d2e4 <mktime>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	6839      	ldr	r1, [r7, #0]
 8002c30:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e001      	b.n	8002c3c <parse_cipsntptime_line+0x1b8>
    }
    return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3750      	adds	r7, #80	@ 0x50
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	0801181c 	.word	0x0801181c
 8002c48:	0801182c 	.word	0x0801182c
 8002c4c:	08011850 	.word	0x08011850
 8002c50:	08011854 	.word	0x08011854
 8002c54:	08011858 	.word	0x08011858
 8002c58:	0801185c 	.word	0x0801185c
 8002c5c:	08011860 	.word	0x08011860
 8002c60:	08011864 	.word	0x08011864
 8002c64:	08011868 	.word	0x08011868
 8002c68:	0801186c 	.word	0x0801186c
 8002c6c:	08011870 	.word	0x08011870
 8002c70:	08011874 	.word	0x08011874
 8002c74:	08011878 	.word	0x08011878
 8002c78:	0801187c 	.word	0x0801187c

08002c7c <esp_ntp_config>:

int esp_ntp_config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b0a0      	sub	sp, #128	@ 0x80
 8002c80:	af00      	add	r7, sp, #0
    char cmd[128];
    sprintf(cmd, "AT+CIPSNTPCFG=1,9,\"%s\"\r\n", NTP_SERVER);
 8002c82:	463b      	mov	r3, r7
 8002c84:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc4 <esp_ntp_config+0x48>)
 8002c86:	4910      	ldr	r1, [pc, #64]	@ (8002cc8 <esp_ntp_config+0x4c>)
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f009 ff41 	bl	800cb10 <siprintf>
    if(HAL_UART_Transmit(&huart6, (uint8_t *)cmd, strlen(cmd), 100) != HAL_OK)
 8002c8e:	463b      	mov	r3, r7
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fb05 	bl	80002a0 <strlen>
 8002c96:	4603      	mov	r3, r0
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4639      	mov	r1, r7
 8002c9c:	2364      	movs	r3, #100	@ 0x64
 8002c9e:	480b      	ldr	r0, [pc, #44]	@ (8002ccc <esp_ntp_config+0x50>)
 8002ca0:	f004 f844 	bl	8006d2c <HAL_UART_Transmit>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <esp_ntp_config+0x34>
        return -1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	e004      	b.n	8002cba <esp_ntp_config+0x3e>

    vTaskDelay(pdMS_TO_TICKS(2000)); // 설정 반영 대기
 8002cb0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cb4:	f006 fcb4 	bl	8009620 <vTaskDelay>
    return 0;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3780      	adds	r7, #128	@ 0x80
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08011880 	.word	0x08011880
 8002cc8:	08011894 	.word	0x08011894
 8002ccc:	200023dc 	.word	0x200023dc

08002cd0 <esp_is_wifi_ready>:
    return 0;
}

// esp.c
int esp_is_wifi_ready(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	807b      	strh	r3, [r7, #2]
    int ok = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]

    if (osMutexAcquire(ESP_MutexHandle, 1000) == osOK) {
 8002cde:	4b1c      	ldr	r3, [pc, #112]	@ (8002d50 <esp_is_wifi_ready+0x80>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 f9ed 	bl	80080c6 <osMutexAcquire>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d128      	bne.n	8002d44 <esp_is_wifi_ready+0x74>
        if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8002cf2:	1cba      	adds	r2, r7, #2
 8002cf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cf8:	4916      	ldr	r1, [pc, #88]	@ (8002d54 <esp_is_wifi_ready+0x84>)
 8002cfa:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <esp_is_wifi_ready+0x88>)
 8002cfc:	f7ff fa5a 	bl	80021b4 <esp_at_command>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <esp_is_wifi_ready+0x6a>
            strstr((char*)response, "+CWJAP:")) {
 8002d06:	4915      	ldr	r1, [pc, #84]	@ (8002d5c <esp_is_wifi_ready+0x8c>)
 8002d08:	4812      	ldr	r0, [pc, #72]	@ (8002d54 <esp_is_wifi_ready+0x84>)
 8002d0a:	f00a f8eb 	bl	800cee4 <strstr>
 8002d0e:	4603      	mov	r3, r0
        if (esp_at_command((uint8_t*)"AT+CWJAP?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <esp_is_wifi_ready+0x6a>
            if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8002d14:	1cba      	adds	r2, r7, #2
 8002d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d1a:	490e      	ldr	r1, [pc, #56]	@ (8002d54 <esp_is_wifi_ready+0x84>)
 8002d1c:	4810      	ldr	r0, [pc, #64]	@ (8002d60 <esp_is_wifi_ready+0x90>)
 8002d1e:	f7ff fa49 	bl	80021b4 <esp_at_command>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d108      	bne.n	8002d3a <esp_is_wifi_ready+0x6a>
                !strstr((char*)response, "ip:\"0.0.0.0\"")) {
 8002d28:	490e      	ldr	r1, [pc, #56]	@ (8002d64 <esp_is_wifi_ready+0x94>)
 8002d2a:	480a      	ldr	r0, [pc, #40]	@ (8002d54 <esp_is_wifi_ready+0x84>)
 8002d2c:	f00a f8da 	bl	800cee4 <strstr>
 8002d30:	4603      	mov	r3, r0
            if (esp_at_command((uint8_t*)"AT+CIPSTA?\r\n",(uint8_t*)response,&length,1000)==0 &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <esp_is_wifi_ready+0x6a>
                ok = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	607b      	str	r3, [r7, #4]
            }
        }
        osMutexRelease(ESP_MutexHandle);
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <esp_is_wifi_ready+0x80>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 fa0c 	bl	800815c <osMutexRelease>
    }
    return ok;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20002438 	.word	0x20002438
 8002d54:	2000128c 	.word	0x2000128c
 8002d58:	0801176c 	.word	0x0801176c
 8002d5c:	08011778 	.word	0x08011778
 8002d60:	08011594 	.word	0x08011594
 8002d64:	08011780 	.word	0x08011780

08002d68 <LCD_Init>:
// 전역 상태
static uint8_t backlight = 0x08; // 기본 백라이트 ON

// 초기화
void LCD_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // 전원 안정화 대기
 8002d6c:	2032      	movs	r0, #50	@ 0x32
 8002d6e:	f000 ffaf 	bl	8003cd0 <HAL_Delay>

    // 4비트 모드 진입 시퀀스
    LCD_Write4Bits(0x30);
 8002d72:	2030      	movs	r0, #48	@ 0x30
 8002d74:	f000 f8b1 	bl	8002eda <LCD_Write4Bits>
    HAL_Delay(5);
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f000 ffa9 	bl	8003cd0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 8002d7e:	2030      	movs	r0, #48	@ 0x30
 8002d80:	f000 f8ab 	bl	8002eda <LCD_Write4Bits>
    HAL_Delay(5);
 8002d84:	2005      	movs	r0, #5
 8002d86:	f000 ffa3 	bl	8003cd0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 8002d8a:	2030      	movs	r0, #48	@ 0x30
 8002d8c:	f000 f8a5 	bl	8002eda <LCD_Write4Bits>
    HAL_Delay(5);
 8002d90:	2005      	movs	r0, #5
 8002d92:	f000 ff9d 	bl	8003cd0 <HAL_Delay>
    LCD_Write4Bits(0x20);  // 4bit 모드
 8002d96:	2020      	movs	r0, #32
 8002d98:	f000 f89f 	bl	8002eda <LCD_Write4Bits>

    // 기능 설정
    LCD_SendCmd(LCD_CMD_FUNCTION_SET | LCD_FUNCTION_2LINE | LCD_FUNCTION_5x8);
 8002d9c:	2028      	movs	r0, #40	@ 0x28
 8002d9e:	f000 f84f 	bl	8002e40 <LCD_SendCmd>
    // 표시 켜기
    LCD_SendCmd(LCD_CMD_DISPLAY_CTRL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8002da2:	200c      	movs	r0, #12
 8002da4:	f000 f84c 	bl	8002e40 <LCD_SendCmd>
    // 화면 지우기
    LCD_Clear();
 8002da8:	f000 f808 	bl	8002dbc <LCD_Clear>
    // 엔트리 모드 설정
    LCD_SendCmd(LCD_CMD_ENTRY_MODE | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DEC);
 8002dac:	2006      	movs	r0, #6
 8002dae:	f000 f847 	bl	8002e40 <LCD_SendCmd>

    HAL_Delay(100);
 8002db2:	2064      	movs	r0, #100	@ 0x64
 8002db4:	f000 ff8c 	bl	8003cd0 <HAL_Delay>
}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <LCD_Clear>:

void LCD_Clear(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
    LCD_SendCmd(LCD_CMD_CLEAR);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f000 f83d 	bl	8002e40 <LCD_SendCmd>
    HAL_Delay(2);
 8002dc6:	2002      	movs	r0, #2
 8002dc8:	f000 ff82 	bl	8003cd0 <HAL_Delay>
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71bb      	strb	r3, [r7, #6]
    static uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 1) row = 1; // 1602는 2라인
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d901      	bls.n	8002dea <LCD_SetCursor+0x1a>
 8002de6:	2301      	movs	r3, #1
 8002de8:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(LCD_CMD_SET_DDRAM | (col + row_offsets[row]));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <LCD_SetCursor+0x40>)
 8002dee:	5cd2      	ldrb	r2, [r2, r3]
 8002df0:	79bb      	ldrb	r3, [r7, #6]
 8002df2:	4413      	add	r3, r2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002dfc:	b25b      	sxtb	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f81d 	bl	8002e40 <LCD_SendCmd>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000000c 	.word	0x2000000c

08002e14 <LCD_Print>:

void LCD_Print(const char *str)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002e1c:	e007      	b.n	8002e2e <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f81a 	bl	8002e5c <LCD_SendData>
        str++;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
    while (*str) {
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f3      	bne.n	8002e1e <LCD_Print+0xa>
    }
}
 8002e36:	bf00      	nop
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <LCD_SendCmd>:
    LCD_Print(buf);
}

// 내부 함수 ===========================
static void LCD_SendCmd(uint8_t cmd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f812 	bl	8002e78 <LCD_Send>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f804 	bl	8002e78 <LCD_Send>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t mode)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460a      	mov	r2, r1
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71bb      	strb	r3, [r7, #6]
    uint8_t highNib = data & 0xF0;
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	f023 030f 	bic.w	r3, r3, #15
 8002e8e:	73fb      	strb	r3, [r7, #15]
    uint8_t lowNib  = (data << 4) & 0xF0;
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	73bb      	strb	r3, [r7, #14]

    LCD_Write4Bits(highNib | (mode ? 0x01 : 0x00));
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	b25a      	sxtb	r2, r3
 8002ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f813 	bl	8002eda <LCD_Write4Bits>
    LCD_Write4Bits(lowNib  | (mode ? 0x01 : 0x00));
 8002eb4:	79bb      	ldrb	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	b25a      	sxtb	r2, r3
 8002ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f804 	bl	8002eda <LCD_Write4Bits>
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <LCD_Write4Bits>:

static void LCD_Write4Bits(uint8_t data)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data);
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f808 	bl	8002efc <LCD_ExpanderWrite>
    LCD_PulseEnable(data);
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f820 	bl	8002f34 <LCD_PulseEnable>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <LCD_ExpanderWrite>:

static void LCD_ExpanderWrite(uint8_t data)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
    uint8_t val = data | backlight;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <LCD_ExpanderWrite+0x30>)
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &val, 1, 10);
 8002f12:	f107 020f 	add.w	r2, r7, #15
 8002f16:	230a      	movs	r3, #10
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	214e      	movs	r1, #78	@ 0x4e
 8002f1e:	4804      	ldr	r0, [pc, #16]	@ (8002f30 <LCD_ExpanderWrite+0x34>)
 8002f20:	f001 fb80 	bl	8004624 <HAL_I2C_Master_Transmit>
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	200022d8 	.word	0x200022d8

08002f34 <LCD_PulseEnable>:

static void LCD_PulseEnable(uint8_t data)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data | 0x04); // EN=1
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ffd8 	bl	8002efc <LCD_ExpanderWrite>
    HAL_Delay(1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f000 febf 	bl	8003cd0 <HAL_Delay>
    LCD_ExpanderWrite(data & ~0x04); // EN=0
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f023 0304 	bic.w	r3, r3, #4
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ffce 	bl	8002efc <LCD_ExpanderWrite>
    HAL_Delay(1);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f000 feb5 	bl	8003cd0 <HAL_Delay>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int ret = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f7a:	f000 fe37 	bl	8003bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f7e:	f000 f89d 	bl	80030bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f82:	f000 fab7 	bl	80034f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002f86:	f000 fa61 	bl	800344c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002f8a:	f000 fa89 	bl	80034a0 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8002f8e:	f000 f92f 	bl	80031f0 <MX_RTC_Init>
  MX_I2C1_Init();
 8002f92:	f000 f8ff 	bl	8003194 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002f96:	f000 f9b7 	bl	8003308 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Servo_Init();
 8002f9a:	f7fe fbb9 	bl	8001710 <Servo_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	482e      	ldr	r0, [pc, #184]	@ (800305c <main+0xec>)
 8002fa2:	f003 f8a7 	bl	80060f4 <HAL_TIM_PWM_Start>
  printf("Start main() - wifi\r\n");
 8002fa6:	482e      	ldr	r0, [pc, #184]	@ (8003060 <main+0xf0>)
 8002fa8:	f009 fd74 	bl	800ca94 <puts>
  ret |= drv_uart_init();
 8002fac:	f7ff fd44 	bl	8002a38 <drv_uart_init>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8002fb8:	f7ff fb92 	bl	80026e0 <drv_esp_init>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <main+0x64>
  {
	  printf("Esp response error\r\n");
 8002fca:	4826      	ldr	r0, [pc, #152]	@ (8003064 <main+0xf4>)
 8002fcc:	f009 fd62 	bl	800ca94 <puts>
	  Error_Handler();
 8002fd0:	f000 fb16 	bl	8003600 <Error_Handler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002fd4:	f004 fefa 	bl	8007dcc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of ESP_Mutex */
  ESP_MutexHandle = osMutexNew(&ESP_Mutex_attributes);
 8002fd8:	4823      	ldr	r0, [pc, #140]	@ (8003068 <main+0xf8>)
 8002fda:	f004 ffee 	bl	8007fba <osMutexNew>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a22      	ldr	r2, [pc, #136]	@ (800306c <main+0xfc>)
 8002fe2:	6013      	str	r3, [r2, #0]

  /* creation of NTP_Mutex */
  NTP_MutexHandle = osMutexNew(&NTP_Mutex_attributes);
 8002fe4:	4822      	ldr	r0, [pc, #136]	@ (8003070 <main+0x100>)
 8002fe6:	f004 ffe8 	bl	8007fba <osMutexNew>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4a21      	ldr	r2, [pc, #132]	@ (8003074 <main+0x104>)
 8002fee:	6013      	str	r3, [r2, #0]

  /* creation of Weather_Mutex */
  Weather_MutexHandle = osMutexNew(&Weather_Mutex_attributes);
 8002ff0:	4821      	ldr	r0, [pc, #132]	@ (8003078 <main+0x108>)
 8002ff2:	f004 ffe2 	bl	8007fba <osMutexNew>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4a20      	ldr	r2, [pc, #128]	@ (800307c <main+0x10c>)
 8002ffa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AiotTask */
  AiotTaskHandle = osThreadNew(Aiot_Task, NULL, &AiotTask_attributes);
 8002ffc:	4a20      	ldr	r2, [pc, #128]	@ (8003080 <main+0x110>)
 8002ffe:	2100      	movs	r1, #0
 8003000:	4820      	ldr	r0, [pc, #128]	@ (8003084 <main+0x114>)
 8003002:	f004 ff2d 	bl	8007e60 <osThreadNew>
 8003006:	4603      	mov	r3, r0
 8003008:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <main+0x118>)
 800300a:	6013      	str	r3, [r2, #0]

  /* creation of NTPTask */
  NTPTaskHandle = osThreadNew(NTP_Task, NULL, &NTPTask_attributes);
 800300c:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <main+0x11c>)
 800300e:	2100      	movs	r1, #0
 8003010:	481f      	ldr	r0, [pc, #124]	@ (8003090 <main+0x120>)
 8003012:	f004 ff25 	bl	8007e60 <osThreadNew>
 8003016:	4603      	mov	r3, r0
 8003018:	4a1e      	ldr	r2, [pc, #120]	@ (8003094 <main+0x124>)
 800301a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(Weather_Task, NULL, &WeatherTask_attributes);
 800301c:	4a1e      	ldr	r2, [pc, #120]	@ (8003098 <main+0x128>)
 800301e:	2100      	movs	r1, #0
 8003020:	481e      	ldr	r0, [pc, #120]	@ (800309c <main+0x12c>)
 8003022:	f004 ff1d 	bl	8007e60 <osThreadNew>
 8003026:	4603      	mov	r3, r0
 8003028:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <main+0x130>)
 800302a:	6013      	str	r3, [r2, #0]

  /* creation of CommandTask */
  CommandTaskHandle = osThreadNew(Command_Task, NULL, &CommandTask_attributes);
 800302c:	4a1d      	ldr	r2, [pc, #116]	@ (80030a4 <main+0x134>)
 800302e:	2100      	movs	r1, #0
 8003030:	481d      	ldr	r0, [pc, #116]	@ (80030a8 <main+0x138>)
 8003032:	f004 ff15 	bl	8007e60 <osThreadNew>
 8003036:	4603      	mov	r3, r0
 8003038:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <main+0x13c>)
 800303a:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(LCD_Task, NULL, &LCDTask_attributes);
 800303c:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <main+0x140>)
 800303e:	2100      	movs	r1, #0
 8003040:	481c      	ldr	r0, [pc, #112]	@ (80030b4 <main+0x144>)
 8003042:	f004 ff0d 	bl	8007e60 <osThreadNew>
 8003046:	4603      	mov	r3, r0
 8003048:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <main+0x148>)
 800304a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800304c:	f004 fee2 	bl	8007e14 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// main()에서는 더 이상 처리할 것이 없음
	// 모든 기능은 FreeRTOS Task에서 처리
	osDelay(1000); // 안전을 위해 1초 대기
 8003050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003054:	f004 ff96 	bl	8007f84 <osDelay>
 8003058:	e7fa      	b.n	8003050 <main+0xe0>
 800305a:	bf00      	nop
 800305c:	2000234c 	.word	0x2000234c
 8003060:	0801196c 	.word	0x0801196c
 8003064:	08011984 	.word	0x08011984
 8003068:	08011a70 	.word	0x08011a70
 800306c:	20002438 	.word	0x20002438
 8003070:	08011a80 	.word	0x08011a80
 8003074:	2000243c 	.word	0x2000243c
 8003078:	08011a90 	.word	0x08011a90
 800307c:	20002440 	.word	0x20002440
 8003080:	080119bc 	.word	0x080119bc
 8003084:	080010f1 	.word	0x080010f1
 8003088:	20002424 	.word	0x20002424
 800308c:	080119e0 	.word	0x080119e0
 8003090:	080015c1 	.word	0x080015c1
 8003094:	20002428 	.word	0x20002428
 8003098:	08011a04 	.word	0x08011a04
 800309c:	08001c65 	.word	0x08001c65
 80030a0:	2000242c 	.word	0x2000242c
 80030a4:	08011a28 	.word	0x08011a28
 80030a8:	08001505 	.word	0x08001505
 80030ac:	20002430 	.word	0x20002430
 80030b0:	08011a4c 	.word	0x08011a4c
 80030b4:	08001581 	.word	0x08001581
 80030b8:	20002434 	.word	0x20002434

080030bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b094      	sub	sp, #80	@ 0x50
 80030c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c2:	f107 0320 	add.w	r3, r7, #32
 80030c6:	2230      	movs	r2, #48	@ 0x30
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f009 fe62 	bl	800cd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	4b29      	ldr	r3, [pc, #164]	@ (800318c <SystemClock_Config+0xd0>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	4a28      	ldr	r2, [pc, #160]	@ (800318c <SystemClock_Config+0xd0>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f0:	4b26      	ldr	r3, [pc, #152]	@ (800318c <SystemClock_Config+0xd0>)
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030fc:	2300      	movs	r3, #0
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <SystemClock_Config+0xd4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a22      	ldr	r2, [pc, #136]	@ (8003190 <SystemClock_Config+0xd4>)
 8003106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <SystemClock_Config+0xd4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003118:	2309      	movs	r3, #9
 800311a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800311c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003122:	2301      	movs	r3, #1
 8003124:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003126:	2302      	movs	r3, #2
 8003128:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800312a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003130:	2308      	movs	r3, #8
 8003132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003134:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003138:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800313a:	2304      	movs	r3, #4
 800313c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800313e:	2304      	movs	r3, #4
 8003140:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003142:	f107 0320 	add.w	r3, r7, #32
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fdc6 	bl	8004cd8 <HAL_RCC_OscConfig>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003152:	f000 fa55 	bl	8003600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003156:	230f      	movs	r3, #15
 8003158:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800315a:	2302      	movs	r3, #2
 800315c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2102      	movs	r1, #2
 8003172:	4618      	mov	r0, r3
 8003174:	f002 f828 	bl	80051c8 <HAL_RCC_ClockConfig>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800317e:	f000 fa3f 	bl	8003600 <Error_Handler>
  }
}
 8003182:	bf00      	nop
 8003184:	3750      	adds	r7, #80	@ 0x50
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000

08003194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003198:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <MX_I2C1_Init+0x50>)
 800319a:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <MX_I2C1_Init+0x54>)
 800319c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031a0:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <MX_I2C1_Init+0x58>)
 80031a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c4:	4b07      	ldr	r3, [pc, #28]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031d0:	4804      	ldr	r0, [pc, #16]	@ (80031e4 <MX_I2C1_Init+0x50>)
 80031d2:	f001 f8e3 	bl	800439c <HAL_I2C_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031dc:	f000 fa10 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	200022d8 	.word	0x200022d8
 80031e8:	40005400 	.word	0x40005400
 80031ec:	000186a0 	.word	0x000186a0

080031f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b090      	sub	sp, #64	@ 0x40
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80031f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003206:	2300      	movs	r3, #0
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800320a:	463b      	mov	r3, r7
 800320c:	2228      	movs	r2, #40	@ 0x28
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f009 fdbf 	bl	800cd94 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003216:	4b3a      	ldr	r3, [pc, #232]	@ (8003300 <MX_RTC_Init+0x110>)
 8003218:	4a3a      	ldr	r2, [pc, #232]	@ (8003304 <MX_RTC_Init+0x114>)
 800321a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800321c:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <MX_RTC_Init+0x110>)
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003222:	4b37      	ldr	r3, [pc, #220]	@ (8003300 <MX_RTC_Init+0x110>)
 8003224:	227f      	movs	r2, #127	@ 0x7f
 8003226:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003228:	4b35      	ldr	r3, [pc, #212]	@ (8003300 <MX_RTC_Init+0x110>)
 800322a:	22ff      	movs	r2, #255	@ 0xff
 800322c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800322e:	4b34      	ldr	r3, [pc, #208]	@ (8003300 <MX_RTC_Init+0x110>)
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003234:	4b32      	ldr	r3, [pc, #200]	@ (8003300 <MX_RTC_Init+0x110>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800323a:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <MX_RTC_Init+0x110>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003240:	482f      	ldr	r0, [pc, #188]	@ (8003300 <MX_RTC_Init+0x110>)
 8003242:	f002 fad1 	bl	80057e8 <HAL_RTC_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800324c:	f000 f9d8 	bl	8003600 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003262:	2300      	movs	r3, #0
 8003264:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800326a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800326e:	2201      	movs	r2, #1
 8003270:	4619      	mov	r1, r3
 8003272:	4823      	ldr	r0, [pc, #140]	@ (8003300 <MX_RTC_Init+0x110>)
 8003274:	f002 fb39 	bl	80058ea <HAL_RTC_SetTime>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800327e:	f000 f9bf 	bl	8003600 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800329a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800329e:	2201      	movs	r2, #1
 80032a0:	4619      	mov	r1, r3
 80032a2:	4817      	ldr	r0, [pc, #92]	@ (8003300 <MX_RTC_Init+0x110>)
 80032a4:	f002 fbbb 	bl	8005a1e <HAL_RTC_SetDate>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80032ae:	f000 f9a7 	bl	8003600 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80032dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80032e2:	463b      	mov	r3, r7
 80032e4:	2201      	movs	r2, #1
 80032e6:	4619      	mov	r1, r3
 80032e8:	4805      	ldr	r0, [pc, #20]	@ (8003300 <MX_RTC_Init+0x110>)
 80032ea:	f002 fc1d 	bl	8005b28 <HAL_RTC_SetAlarm_IT>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80032f4:	f000 f984 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	3740      	adds	r7, #64	@ 0x40
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000232c 	.word	0x2000232c
 8003304:	40002800 	.word	0x40002800

08003308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b096      	sub	sp, #88	@ 0x58
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800330e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	615a      	str	r2, [r3, #20]
 8003338:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2220      	movs	r2, #32
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f009 fd27 	bl	800cd94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003346:	4b3f      	ldr	r3, [pc, #252]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003348:	4a3f      	ldr	r2, [pc, #252]	@ (8003448 <MX_TIM1_Init+0x140>)
 800334a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800334c:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <MX_TIM1_Init+0x13c>)
 800334e:	2253      	movs	r2, #83	@ 0x53
 8003350:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003352:	4b3c      	ldr	r3, [pc, #240]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003358:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <MX_TIM1_Init+0x13c>)
 800335a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800335e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003360:	4b38      	ldr	r3, [pc, #224]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003366:	4b37      	ldr	r3, [pc, #220]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800336c:	4b35      	ldr	r3, [pc, #212]	@ (8003444 <MX_TIM1_Init+0x13c>)
 800336e:	2280      	movs	r2, #128	@ 0x80
 8003370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003372:	4834      	ldr	r0, [pc, #208]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003374:	f002 fe16 	bl	8005fa4 <HAL_TIM_Base_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800337e:	f000 f93f 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003382:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003386:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003388:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800338c:	4619      	mov	r1, r3
 800338e:	482d      	ldr	r0, [pc, #180]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003390:	f003 f822 	bl	80063d8 <HAL_TIM_ConfigClockSource>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800339a:	f000 f931 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800339e:	4829      	ldr	r0, [pc, #164]	@ (8003444 <MX_TIM1_Init+0x13c>)
 80033a0:	f002 fe4f 	bl	8006042 <HAL_TIM_PWM_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80033aa:	f000 f929 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033ba:	4619      	mov	r1, r3
 80033bc:	4821      	ldr	r0, [pc, #132]	@ (8003444 <MX_TIM1_Init+0x13c>)
 80033be:	f003 fba5 	bl	8006b0c <HAL_TIMEx_MasterConfigSynchronization>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80033c8:	f000 f91a 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033cc:	2360      	movs	r3, #96	@ 0x60
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 80033d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033da:	2300      	movs	r3, #0
 80033dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ee:	2200      	movs	r2, #0
 80033f0:	4619      	mov	r1, r3
 80033f2:	4814      	ldr	r0, [pc, #80]	@ (8003444 <MX_TIM1_Init+0x13c>)
 80033f4:	f002 ff2e 	bl	8006254 <HAL_TIM_PWM_ConfigChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80033fe:	f000 f8ff 	bl	8003600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800341a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	4619      	mov	r1, r3
 8003424:	4807      	ldr	r0, [pc, #28]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003426:	f003 fbdf 	bl	8006be8 <HAL_TIMEx_ConfigBreakDeadTime>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003430:	f000 f8e6 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003434:	4803      	ldr	r0, [pc, #12]	@ (8003444 <MX_TIM1_Init+0x13c>)
 8003436:	f000 f9b3 	bl	80037a0 <HAL_TIM_MspPostInit>

}
 800343a:	bf00      	nop
 800343c:	3758      	adds	r7, #88	@ 0x58
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000234c 	.word	0x2000234c
 8003448:	40010000 	.word	0x40010000

0800344c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003452:	4a12      	ldr	r2, [pc, #72]	@ (800349c <MX_USART2_UART_Init+0x50>)
 8003454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800345c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800345e:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003470:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003472:	220c      	movs	r2, #12
 8003474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003482:	4805      	ldr	r0, [pc, #20]	@ (8003498 <MX_USART2_UART_Init+0x4c>)
 8003484:	f003 fc02 	bl	8006c8c <HAL_UART_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800348e:	f000 f8b7 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20002394 	.word	0x20002394
 800349c:	40004400 	.word	0x40004400

080034a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034a6:	4a12      	ldr	r2, [pc, #72]	@ (80034f0 <MX_USART6_UART_Init+0x50>)
 80034a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80034aa:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034ac:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80034b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034c6:	220c      	movs	r2, #12
 80034c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ca:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034d6:	4805      	ldr	r0, [pc, #20]	@ (80034ec <MX_USART6_UART_Init+0x4c>)
 80034d8:	f003 fbd8 	bl	8006c8c <HAL_UART_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034e2:	f000 f88d 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200023dc 	.word	0x200023dc
 80034f0:	40011400 	.word	0x40011400

080034f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	4a37      	ldr	r2, [pc, #220]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	6313      	str	r3, [r2, #48]	@ 0x30
 800351a:	4b35      	ldr	r3, [pc, #212]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a30      	ldr	r2, [pc, #192]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a29      	ldr	r2, [pc, #164]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a22      	ldr	r2, [pc, #136]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <MX_GPIO_Init+0xfc>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800357a:	2200      	movs	r2, #0
 800357c:	2120      	movs	r1, #32
 800357e:	481d      	ldr	r0, [pc, #116]	@ (80035f4 <MX_GPIO_Init+0x100>)
 8003580:	f000 fef2 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin, GPIO_PIN_RESET);
 8003584:	2200      	movs	r2, #0
 8003586:	f24e 0110 	movw	r1, #57360	@ 0xe010
 800358a:	481b      	ldr	r0, [pc, #108]	@ (80035f8 <MX_GPIO_Init+0x104>)
 800358c:	f000 feec 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003596:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800359a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4815      	ldr	r0, [pc, #84]	@ (80035fc <MX_GPIO_Init+0x108>)
 80035a8:	f000 fd5a 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80035ac:	2320      	movs	r3, #32
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	480c      	ldr	r0, [pc, #48]	@ (80035f4 <MX_GPIO_Init+0x100>)
 80035c4:	f000 fd4c 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 FAN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FAN_Pin;
 80035c8:	f24e 0310 	movw	r3, #57360	@ 0xe010
 80035cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4805      	ldr	r0, [pc, #20]	@ (80035f8 <MX_GPIO_Init+0x104>)
 80035e2:	f000 fd3d 	bl	8004060 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	@ 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40020800 	.word	0x40020800

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <Error_Handler+0x8>

0800360c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <HAL_MspInit+0x54>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	4a11      	ldr	r2, [pc, #68]	@ (8003660 <HAL_MspInit+0x54>)
 800361c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003620:	6453      	str	r3, [r2, #68]	@ 0x44
 8003622:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <HAL_MspInit+0x54>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_MspInit+0x54>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <HAL_MspInit+0x54>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	@ 0x40
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <HAL_MspInit+0x54>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	210f      	movs	r1, #15
 800364e:	f06f 0001 	mvn.w	r0, #1
 8003652:	f000 fc3c 	bl	8003ece <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800

08003664 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	@ 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_I2C_MspInit+0x84>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d12c      	bne.n	80036e0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <HAL_I2C_MspInit+0x88>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <HAL_I2C_MspInit+0x88>)
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	6313      	str	r3, [r2, #48]	@ 0x30
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_I2C_MspInit+0x88>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a8:	2312      	movs	r3, #18
 80036aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b0:	2303      	movs	r3, #3
 80036b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036b4:	2304      	movs	r3, #4
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4619      	mov	r1, r3
 80036be:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <HAL_I2C_MspInit+0x8c>)
 80036c0:	f000 fcce 	bl	8004060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	4b08      	ldr	r3, [pc, #32]	@ (80036ec <HAL_I2C_MspInit+0x88>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	4a07      	ldr	r2, [pc, #28]	@ (80036ec <HAL_I2C_MspInit+0x88>)
 80036ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <HAL_I2C_MspInit+0x88>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80036e0:	bf00      	nop
 80036e2:	3728      	adds	r7, #40	@ 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40005400 	.word	0x40005400
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020400 	.word	0x40020400

080036f4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
 800370c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a10      	ldr	r2, [pc, #64]	@ (8003754 <HAL_RTC_MspInit+0x60>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d119      	bne.n	800374c <HAL_RTC_MspInit+0x58>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003718:	2302      	movs	r3, #2
 800371a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800371c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003720:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f001 ff6e 	bl	8005608 <HAL_RCCEx_PeriphCLKConfig>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003732:	f7ff ff65 	bl	8003600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003736:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <HAL_RTC_MspInit+0x64>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2105      	movs	r1, #5
 8003740:	2029      	movs	r0, #41	@ 0x29
 8003742:	f000 fbc4 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003746:	2029      	movs	r0, #41	@ 0x29
 8003748:	f000 fbdd 	bl	8003f06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800374c:	bf00      	nop
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40002800 	.word	0x40002800
 8003758:	42470e3c 	.word	0x42470e3c

0800375c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <HAL_TIM_Base_MspInit+0x3c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10d      	bne.n	800378a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_TIM_Base_MspInit+0x40>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	4a09      	ldr	r2, [pc, #36]	@ (800379c <HAL_TIM_Base_MspInit+0x40>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6453      	str	r3, [r2, #68]	@ 0x44
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <HAL_TIM_Base_MspInit+0x40>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40023800 	.word	0x40023800

080037a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <HAL_TIM_MspPostInit+0x68>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d11e      	bne.n	8003800 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_TIM_MspPostInit+0x6c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	4a10      	ldr	r2, [pc, #64]	@ (800380c <HAL_TIM_MspPostInit+0x6c>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_TIM_MspPostInit+0x6c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4619      	mov	r1, r3
 80037fa:	4805      	ldr	r0, [pc, #20]	@ (8003810 <HAL_TIM_MspPostInit+0x70>)
 80037fc:	f000 fc30 	bl	8004060 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40010000 	.word	0x40010000
 800380c:	40023800 	.word	0x40023800
 8003810:	40020000 	.word	0x40020000

08003814 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	@ 0x30
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3a      	ldr	r2, [pc, #232]	@ (800391c <HAL_UART_MspInit+0x108>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d134      	bne.n	80038a0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	4a38      	ldr	r2, [pc, #224]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003844:	6413      	str	r3, [r2, #64]	@ 0x40
 8003846:	4b36      	ldr	r3, [pc, #216]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385a:	4a31      	ldr	r2, [pc, #196]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	@ 0x30
 8003862:	4b2f      	ldr	r3, [pc, #188]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800386e:	230c      	movs	r3, #12
 8003870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387a:	2303      	movs	r3, #3
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800387e:	2307      	movs	r3, #7
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	4619      	mov	r1, r3
 8003888:	4826      	ldr	r0, [pc, #152]	@ (8003924 <HAL_UART_MspInit+0x110>)
 800388a:	f000 fbe9 	bl	8004060 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2105      	movs	r1, #5
 8003892:	2026      	movs	r0, #38	@ 0x26
 8003894:	f000 fb1b 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003898:	2026      	movs	r0, #38	@ 0x26
 800389a:	f000 fb34 	bl	8003f06 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800389e:	e038      	b.n	8003912 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a20      	ldr	r2, [pc, #128]	@ (8003928 <HAL_UART_MspInit+0x114>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d133      	bne.n	8003912 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_UART_MspInit+0x10c>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038e2:	23c0      	movs	r3, #192	@ 0xc0
 80038e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ee:	2303      	movs	r3, #3
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038f2:	2308      	movs	r3, #8
 80038f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	4619      	mov	r1, r3
 80038fc:	480b      	ldr	r0, [pc, #44]	@ (800392c <HAL_UART_MspInit+0x118>)
 80038fe:	f000 fbaf 	bl	8004060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2105      	movs	r1, #5
 8003906:	2047      	movs	r0, #71	@ 0x47
 8003908:	f000 fae1 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800390c:	2047      	movs	r0, #71	@ 0x47
 800390e:	f000 fafa 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 8003912:	bf00      	nop
 8003914:	3730      	adds	r7, #48	@ 0x30
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40004400 	.word	0x40004400
 8003920:	40023800 	.word	0x40023800
 8003924:	40020000 	.word	0x40020000
 8003928:	40011400 	.word	0x40011400
 800392c:	40020800 	.word	0x40020800

08003930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <NMI_Handler+0x4>

08003938 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <MemManage_Handler+0x4>

08003948 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <BusFault_Handler+0x4>

08003950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <UsageFault_Handler+0x4>

08003958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800396a:	f000 f991 	bl	8003c90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800396e:	f006 faeb 	bl	8009f48 <xTaskGetSchedulerState>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d001      	beq.n	800397c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003978:	f007 f9e6 	bl	800ad48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	bd80      	pop	{r7, pc}

08003980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <USART2_IRQHandler+0x10>)
 8003986:	f003 fa81 	bl	8006e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20002394 	.word	0x20002394

08003994 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <RTC_Alarm_IRQHandler+0x10>)
 800399a:	f002 fa09 	bl	8005db0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	2000232c 	.word	0x2000232c

080039a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <USART6_IRQHandler+0x10>)
 80039ae:	f003 fa6d 	bl	8006e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200023dc 	.word	0x200023dc

080039bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return 1;
 80039c0:	2301      	movs	r3, #1
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_kill>:

int _kill(int pid, int sig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039d6:	f00a f99d 	bl	800dd14 <__errno>
 80039da:	4603      	mov	r3, r0
 80039dc:	2216      	movs	r2, #22
 80039de:	601a      	str	r2, [r3, #0]
  return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_exit>:

void _exit (int status)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffe7 	bl	80039cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80039fe:	bf00      	nop
 8003a00:	e7fd      	b.n	80039fe <_exit+0x12>

08003a02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e00a      	b.n	8003a2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a14:	f3af 8000 	nop.w
 8003a18:	4601      	mov	r1, r0
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	60ba      	str	r2, [r7, #8]
 8003a20:	b2ca      	uxtb	r2, r1
 8003a22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	dbf0      	blt.n	8003a14 <_read+0x12>
  }

  return len;
 8003a32:	687b      	ldr	r3, [r7, #4]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e009      	b.n	8003a62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	60ba      	str	r2, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fffc 	bl	8002a54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	dbf1      	blt.n	8003a4e <_write+0x12>
  }
  return len;
 8003a6a:	687b      	ldr	r3, [r7, #4]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_close>:

int _close(int file)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <_isatty>:

int _isatty(int file)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ab4:	2301      	movs	r3, #1
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <_gettimeofday>:
  (void)env;
  errno = ENOMEM;
  return -1;
}

int _gettimeofday(struct timeval *tv, void *tzvp) {
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
    tv->tv_sec = 0;
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9c1 2300 	strd	r2, r3, [r1]
    tv->tv_usec = 0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
    return 0;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <_sbrk+0x5c>)
 8003b12:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <_sbrk+0x60>)
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b1c:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <_sbrk+0x64>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <_sbrk+0x68>)
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <_sbrk+0x64>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d207      	bcs.n	8003b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b38:	f00a f8ec 	bl	800dd14 <__errno>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	220c      	movs	r2, #12
 8003b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
 8003b46:	e009      	b.n	8003b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b48:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <_sbrk+0x64>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <_sbrk+0x64>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <_sbrk+0x64>)
 8003b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20020000 	.word	0x20020000
 8003b68:	00000400 	.word	0x00000400
 8003b6c:	20002448 	.word	0x20002448
 8003b70:	20006f10 	.word	0x20006f10

08003b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <SystemInit+0x20>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	4a05      	ldr	r2, [pc, #20]	@ (8003b94 <SystemInit+0x20>)
 8003b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b9c:	f7ff ffea 	bl	8003b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ba0:	480c      	ldr	r0, [pc, #48]	@ (8003bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ba2:	490d      	ldr	r1, [pc, #52]	@ (8003bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba8:	e002      	b.n	8003bb0 <LoopCopyDataInit>

08003baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bae:	3304      	adds	r3, #4

08003bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bb4:	d3f9      	bcc.n	8003baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8003be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bbc:	e001      	b.n	8003bc2 <LoopFillZerobss>

08003bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bc0:	3204      	adds	r2, #4

08003bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bc4:	d3fb      	bcc.n	8003bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bc6:	f00a f8ab 	bl	800dd20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bca:	f7ff f9d1 	bl	8002f70 <main>
  bx  lr    
 8003bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003bdc:	0801217c 	.word	0x0801217c
  ldr r2, =_sbss
 8003be0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8003be4:	20006f10 	.word	0x20006f10

08003be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003be8:	e7fe      	b.n	8003be8 <ADC_IRQHandler>
	...

08003bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c2c <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c2c <HAL_Init+0x40>)
 8003bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_Init+0x40>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <HAL_Init+0x40>)
 8003c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c08:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HAL_Init+0x40>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a07      	ldr	r2, [pc, #28]	@ (8003c2c <HAL_Init+0x40>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c14:	2003      	movs	r0, #3
 8003c16:	f000 f94f 	bl	8003eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c1a:	200f      	movs	r0, #15
 8003c1c:	f000 f808 	bl	8003c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c20:	f7ff fcf4 	bl	800360c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023c00 	.word	0x40023c00

08003c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c38:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <HAL_InitTick+0x54>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <HAL_InitTick+0x58>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4619      	mov	r1, r3
 8003c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f967 	bl	8003f22 <HAL_SYSTICK_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e00e      	b.n	8003c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d80a      	bhi.n	8003c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c64:	2200      	movs	r2, #0
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	f000 f92f 	bl	8003ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c70:	4a06      	ldr	r2, [pc, #24]	@ (8003c8c <HAL_InitTick+0x5c>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000014 	.word	0x20000014
 8003c88:	2000001c 	.word	0x2000001c
 8003c8c:	20000018 	.word	0x20000018

08003c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_IncTick+0x20>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_IncTick+0x24>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a04      	ldr	r2, [pc, #16]	@ (8003cb4 <HAL_IncTick+0x24>)
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000001c 	.word	0x2000001c
 8003cb4:	2000244c 	.word	0x2000244c

08003cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return uwTick;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_GetTick+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	2000244c 	.word	0x2000244c

08003cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd8:	f7ff ffee 	bl	8003cb8 <HAL_GetTick>
 8003cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d005      	beq.n	8003cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <HAL_Delay+0x44>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cf6:	bf00      	nop
 8003cf8:	f7ff ffde 	bl	8003cb8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d8f7      	bhi.n	8003cf8 <HAL_Delay+0x28>
  {
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2000001c 	.word	0x2000001c

08003d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4a:	4a04      	ldr	r2, [pc, #16]	@ (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	60d3      	str	r3, [r2, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4907      	ldr	r1, [pc, #28]	@ (8003db4 <__NVIC_EnableIRQ+0x38>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100

08003db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db0a      	blt.n	8003de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	490c      	ldr	r1, [pc, #48]	@ (8003e04 <__NVIC_SetPriority+0x4c>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de0:	e00a      	b.n	8003df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4908      	ldr	r1, [pc, #32]	@ (8003e08 <__NVIC_SetPriority+0x50>)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	3b04      	subs	r3, #4
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	440b      	add	r3, r1
 8003df6:	761a      	strb	r2, [r3, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	@ 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf28      	it	cs
 8003e2a:	2304      	movcs	r3, #4
 8003e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d902      	bls.n	8003e3c <NVIC_EncodePriority+0x30>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3b03      	subs	r3, #3
 8003e3a:	e000      	b.n	8003e3e <NVIC_EncodePriority+0x32>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	401a      	ands	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43d9      	mvns	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	4313      	orrs	r3, r2
         );
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3724      	adds	r7, #36	@ 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e84:	d301      	bcc.n	8003e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00f      	b.n	8003eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <SysTick_Config+0x40>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e92:	210f      	movs	r1, #15
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f7ff ff8e 	bl	8003db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <SysTick_Config+0x40>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <SysTick_Config+0x40>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff29 	bl	8003d18 <__NVIC_SetPriorityGrouping>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee0:	f7ff ff3e 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f7ff ff8e 	bl	8003e0c <NVIC_EncodePriority>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff5d 	bl	8003db8 <__NVIC_SetPriority>
}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff31 	bl	8003d7c <__NVIC_EnableIRQ>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffa2 	bl	8003e74 <SysTick_Config>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff feb6 	bl	8003cb8 <HAL_GetTick>
 8003f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d008      	beq.n	8003f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2280      	movs	r2, #128	@ 0x80
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e052      	b.n	8004012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0216 	bic.w	r2, r2, #22
 8003f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <HAL_DMA_Abort+0x62>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0208 	bic.w	r2, r2, #8
 8003faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fbc:	e013      	b.n	8003fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fbe:	f7ff fe7b 	bl	8003cb8 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d90c      	bls.n	8003fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e015      	b.n	8004012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e4      	bne.n	8003fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	223f      	movs	r2, #63	@ 0x3f
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2280      	movs	r2, #128	@ 0x80
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e00c      	b.n	8004052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2205      	movs	r2, #5
 800403c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	@ 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e159      	b.n	8004330 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800407c:	2201      	movs	r2, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	f040 8148 	bne.w	800432a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d005      	beq.n	80040b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d130      	bne.n	8004114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e8:	2201      	movs	r2, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 0201 	and.w	r2, r3, #1
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b03      	cmp	r3, #3
 800411e:	d017      	beq.n	8004150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	2203      	movs	r2, #3
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d123      	bne.n	80041a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	08da      	lsrs	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3208      	adds	r2, #8
 8004164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220f      	movs	r2, #15
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3208      	adds	r2, #8
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a2 	beq.w	800432a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4b57      	ldr	r3, [pc, #348]	@ (8004348 <HAL_GPIO_Init+0x2e8>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	4a56      	ldr	r2, [pc, #344]	@ (8004348 <HAL_GPIO_Init+0x2e8>)
 80041f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041f6:	4b54      	ldr	r3, [pc, #336]	@ (8004348 <HAL_GPIO_Init+0x2e8>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004202:	4a52      	ldr	r2, [pc, #328]	@ (800434c <HAL_GPIO_Init+0x2ec>)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	3302      	adds	r3, #2
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a49      	ldr	r2, [pc, #292]	@ (8004350 <HAL_GPIO_Init+0x2f0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d019      	beq.n	8004262 <HAL_GPIO_Init+0x202>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a48      	ldr	r2, [pc, #288]	@ (8004354 <HAL_GPIO_Init+0x2f4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0x1fe>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a47      	ldr	r2, [pc, #284]	@ (8004358 <HAL_GPIO_Init+0x2f8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00d      	beq.n	800425a <HAL_GPIO_Init+0x1fa>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a46      	ldr	r2, [pc, #280]	@ (800435c <HAL_GPIO_Init+0x2fc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <HAL_GPIO_Init+0x1f6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a45      	ldr	r2, [pc, #276]	@ (8004360 <HAL_GPIO_Init+0x300>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_GPIO_Init+0x1f2>
 800424e:	2304      	movs	r3, #4
 8004250:	e008      	b.n	8004264 <HAL_GPIO_Init+0x204>
 8004252:	2307      	movs	r3, #7
 8004254:	e006      	b.n	8004264 <HAL_GPIO_Init+0x204>
 8004256:	2303      	movs	r3, #3
 8004258:	e004      	b.n	8004264 <HAL_GPIO_Init+0x204>
 800425a:	2302      	movs	r3, #2
 800425c:	e002      	b.n	8004264 <HAL_GPIO_Init+0x204>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_GPIO_Init+0x204>
 8004262:	2300      	movs	r3, #0
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	f002 0203 	and.w	r2, r2, #3
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	4093      	lsls	r3, r2
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004274:	4935      	ldr	r1, [pc, #212]	@ (800434c <HAL_GPIO_Init+0x2ec>)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	3302      	adds	r3, #2
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004282:	4b38      	ldr	r3, [pc, #224]	@ (8004364 <HAL_GPIO_Init+0x304>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004364 <HAL_GPIO_Init+0x304>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004364 <HAL_GPIO_Init+0x304>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d0:	4a24      	ldr	r2, [pc, #144]	@ (8004364 <HAL_GPIO_Init+0x304>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042d6:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <HAL_GPIO_Init+0x304>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004364 <HAL_GPIO_Init+0x304>)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004300:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <HAL_GPIO_Init+0x304>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004324:	4a0f      	ldr	r2, [pc, #60]	@ (8004364 <HAL_GPIO_Init+0x304>)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3301      	adds	r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	f67f aea2 	bls.w	800407c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	3724      	adds	r7, #36	@ 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	40013800 	.word	0x40013800
 8004350:	40020000 	.word	0x40020000
 8004354:	40020400 	.word	0x40020400
 8004358:	40020800 	.word	0x40020800
 800435c:	40020c00 	.word	0x40020c00
 8004360:	40021000 	.word	0x40021000
 8004364:	40013c00 	.word	0x40013c00

08004368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]
 8004374:	4613      	mov	r3, r2
 8004376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004378:	787b      	ldrb	r3, [r7, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004384:	e003      	b.n	800438e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004386:	887b      	ldrh	r3, [r7, #2]
 8004388:	041a      	lsls	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	619a      	str	r2, [r3, #24]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e12b      	b.n	8004606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff f94e 	bl	8003664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	@ 0x24
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004400:	f001 f8da 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a81      	ldr	r2, [pc, #516]	@ (8004610 <HAL_I2C_Init+0x274>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d807      	bhi.n	8004420 <HAL_I2C_Init+0x84>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a80      	ldr	r2, [pc, #512]	@ (8004614 <HAL_I2C_Init+0x278>)
 8004414:	4293      	cmp	r3, r2
 8004416:	bf94      	ite	ls
 8004418:	2301      	movls	r3, #1
 800441a:	2300      	movhi	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e006      	b.n	800442e <HAL_I2C_Init+0x92>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a7d      	ldr	r2, [pc, #500]	@ (8004618 <HAL_I2C_Init+0x27c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0e7      	b.n	8004606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a78      	ldr	r2, [pc, #480]	@ (800461c <HAL_I2C_Init+0x280>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0c9b      	lsrs	r3, r3, #18
 8004440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a6a      	ldr	r2, [pc, #424]	@ (8004610 <HAL_I2C_Init+0x274>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d802      	bhi.n	8004470 <HAL_I2C_Init+0xd4>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3301      	adds	r3, #1
 800446e:	e009      	b.n	8004484 <HAL_I2C_Init+0xe8>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	4a69      	ldr	r2, [pc, #420]	@ (8004620 <HAL_I2C_Init+0x284>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	3301      	adds	r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	495c      	ldr	r1, [pc, #368]	@ (8004610 <HAL_I2C_Init+0x274>)
 80044a0:	428b      	cmp	r3, r1
 80044a2:	d819      	bhi.n	80044d8 <HAL_I2C_Init+0x13c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e59      	subs	r1, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044b8:	400b      	ands	r3, r1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_I2C_Init+0x138>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e59      	subs	r1, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d2:	e051      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d4:	2304      	movs	r3, #4
 80044d6:	e04f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <HAL_I2C_Init+0x168>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e012      	b.n	800452a <HAL_I2C_Init+0x18e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Init+0x196>
 800452e:	2301      	movs	r3, #1
 8004530:	e022      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <HAL_I2C_Init+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e58      	subs	r0, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	fbb0 f3f3 	udiv	r3, r0, r3
 800454c:	3301      	adds	r3, #1
 800454e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004556:	e00f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1e58      	subs	r0, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	0099      	lsls	r1, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	6809      	ldr	r1, [r1, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80045a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6911      	ldr	r1, [r2, #16]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	4311      	orrs	r1, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	000186a0 	.word	0x000186a0
 8004614:	001e847f 	.word	0x001e847f
 8004618:	003d08ff 	.word	0x003d08ff
 800461c:	431bde83 	.word	0x431bde83
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	461a      	mov	r2, r3
 8004630:	460b      	mov	r3, r1
 8004632:	817b      	strh	r3, [r7, #10]
 8004634:	4613      	mov	r3, r2
 8004636:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004638:	f7ff fb3e 	bl	8003cb8 <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b20      	cmp	r3, #32
 8004648:	f040 80e0 	bne.w	800480c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2319      	movs	r3, #25
 8004652:	2201      	movs	r2, #1
 8004654:	4970      	ldr	r1, [pc, #448]	@ (8004818 <HAL_I2C_Master_Transmit+0x1f4>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f964 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
 8004664:	e0d3      	b.n	800480e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_I2C_Master_Transmit+0x50>
 8004670:	2302      	movs	r3, #2
 8004672:	e0cc      	b.n	800480e <HAL_I2C_Master_Transmit+0x1ea>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d007      	beq.n	800469a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2221      	movs	r2, #33	@ 0x21
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2210      	movs	r2, #16
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	893a      	ldrh	r2, [r7, #8]
 80046ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a50      	ldr	r2, [pc, #320]	@ (800481c <HAL_I2C_Master_Transmit+0x1f8>)
 80046da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046dc:	8979      	ldrh	r1, [r7, #10]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f89c 	bl	8004820 <I2C_MasterRequestWrite>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e08d      	b.n	800480e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004708:	e066      	b.n	80047d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	6a39      	ldr	r1, [r7, #32]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fa22 	bl	8004b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	2b04      	cmp	r3, #4
 8004720:	d107      	bne.n	8004732 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e06b      	b.n	800480e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d11b      	bne.n	80047ac <HAL_I2C_Master_Transmit+0x188>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d017      	beq.n	80047ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	6a39      	ldr	r1, [r7, #32]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fa19 	bl	8004be8 <I2C_WaitOnBTFFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d107      	bne.n	80047d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e01a      	b.n	800480e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d194      	bne.n	800470a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	00100002 	.word	0x00100002
 800481c:	ffff0000 	.word	0xffff0000

08004820 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	460b      	mov	r3, r1
 800482e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d006      	beq.n	800484a <I2C_MasterRequestWrite+0x2a>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d003      	beq.n	800484a <I2C_MasterRequestWrite+0x2a>
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004848:	d108      	bne.n	800485c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e00b      	b.n	8004874 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	2b12      	cmp	r3, #18
 8004862:	d107      	bne.n	8004874 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004872:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f84f 	bl	8004924 <I2C_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00d      	beq.n	80048a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489a:	d103      	bne.n	80048a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e035      	b.n	8004914 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048b0:	d108      	bne.n	80048c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	e01b      	b.n	80048fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048c4:	897b      	ldrh	r3, [r7, #10]
 80048c6:	11db      	asrs	r3, r3, #7
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 0306 	and.w	r3, r3, #6
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f063 030f 	orn	r3, r3, #15
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	490e      	ldr	r1, [pc, #56]	@ (800491c <I2C_MasterRequestWrite+0xfc>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f898 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e010      	b.n	8004914 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4907      	ldr	r1, [pc, #28]	@ (8004920 <I2C_MasterRequestWrite+0x100>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f888 	bl	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	00010008 	.word	0x00010008
 8004920:	00010002 	.word	0x00010002

08004924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004934:	e048      	b.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d044      	beq.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7ff f9bb 	bl	8003cb8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d139      	bne.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10d      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0x56>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	e00c      	b.n	8004994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	43da      	mvns	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	429a      	cmp	r2, r3
 8004998:	d116      	bne.n	80049c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e023      	b.n	8004a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10d      	bne.n	80049ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	43da      	mvns	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4013      	ands	r3, r2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	e00c      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	43da      	mvns	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d093      	beq.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a26:	e071      	b.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a36:	d123      	bne.n	8004a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e067      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d041      	beq.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a88:	f7ff f916 	bl	8003cb8 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d136      	bne.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10c      	bne.n	8004ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	2300      	moveq	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e00b      	b.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	43da      	mvns	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4013      	ands	r3, r2
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e021      	b.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d10c      	bne.n	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	43da      	mvns	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e00b      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f47f af6d 	bne.w	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b64:	e034      	b.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f886 	bl	8004c78 <I2C_IsAcknowledgeFailed>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e034      	b.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d028      	beq.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7ff f89b 	bl	8003cb8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11d      	bne.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ba0:	d016      	beq.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e007      	b.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d1c3      	bne.n	8004b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bf4:	e034      	b.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f83e 	bl	8004c78 <I2C_IsAcknowledgeFailed>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e034      	b.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d028      	beq.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7ff f853 	bl	8003cb8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11d      	bne.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d016      	beq.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e007      	b.n	8004c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d1c3      	bne.n	8004bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8e:	d11b      	bne.n	8004cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	f043 0204 	orr.w	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e267      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d075      	beq.n	8004de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cf6:	4b88      	ldr	r3, [pc, #544]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d00c      	beq.n	8004d1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d02:	4b85      	ldr	r3, [pc, #532]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d112      	bne.n	8004d34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d0e:	4b82      	ldr	r3, [pc, #520]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d1a:	d10b      	bne.n	8004d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05b      	beq.n	8004de0 <HAL_RCC_OscConfig+0x108>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d157      	bne.n	8004de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e242      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCC_OscConfig+0x74>
 8004d3e:	4b76      	ldr	r3, [pc, #472]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a75      	ldr	r2, [pc, #468]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e01d      	b.n	8004d88 <HAL_RCC_OscConfig+0xb0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d54:	d10c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x98>
 8004d56:	4b70      	ldr	r3, [pc, #448]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	4b6d      	ldr	r3, [pc, #436]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a6c      	ldr	r2, [pc, #432]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	e00b      	b.n	8004d88 <HAL_RCC_OscConfig+0xb0>
 8004d70:	4b69      	ldr	r3, [pc, #420]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a68      	ldr	r2, [pc, #416]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b66      	ldr	r3, [pc, #408]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a65      	ldr	r2, [pc, #404]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d90:	f7fe ff92 	bl	8003cb8 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d98:	f7fe ff8e 	bl	8003cb8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b64      	cmp	r3, #100	@ 0x64
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e207      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b5b      	ldr	r3, [pc, #364]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0xc0>
 8004db6:	e014      	b.n	8004de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7fe ff7e 	bl	8003cb8 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc0:	f7fe ff7a 	bl	8003cb8 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	@ 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e1f3      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd2:	4b51      	ldr	r3, [pc, #324]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0xe8>
 8004dde:	e000      	b.n	8004de2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d063      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dee:	4b4a      	ldr	r3, [pc, #296]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfa:	4b47      	ldr	r3, [pc, #284]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d11c      	bne.n	8004e40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e06:	4b44      	ldr	r3, [pc, #272]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d116      	bne.n	8004e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e12:	4b41      	ldr	r3, [pc, #260]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_RCC_OscConfig+0x152>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d001      	beq.n	8004e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e1c7      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4937      	ldr	r1, [pc, #220]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e3e:	e03a      	b.n	8004eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e48:	4b34      	ldr	r3, [pc, #208]	@ (8004f1c <HAL_RCC_OscConfig+0x244>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fe ff33 	bl	8003cb8 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e56:	f7fe ff2f 	bl	8003cb8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e1a8      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e68:	4b2b      	ldr	r3, [pc, #172]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e74:	4b28      	ldr	r3, [pc, #160]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4925      	ldr	r1, [pc, #148]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]
 8004e88:	e015      	b.n	8004eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8a:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <HAL_RCC_OscConfig+0x244>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fe ff12 	bl	8003cb8 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e98:	f7fe ff0e 	bl	8003cb8 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e187      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1f0      	bne.n	8004e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d036      	beq.n	8004f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eca:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <HAL_RCC_OscConfig+0x248>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fe fef2 	bl	8003cb8 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fe feee 	bl	8003cb8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e167      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCC_OscConfig+0x240>)
 8004eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x200>
 8004ef6:	e01b      	b.n	8004f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef8:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <HAL_RCC_OscConfig+0x248>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efe:	f7fe fedb 	bl	8003cb8 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f04:	e00e      	b.n	8004f24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f06:	f7fe fed7 	bl	8003cb8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d907      	bls.n	8004f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e150      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	42470000 	.word	0x42470000
 8004f20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f24:	4b88      	ldr	r3, [pc, #544]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1ea      	bne.n	8004f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8097 	beq.w	800506c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f42:	4b81      	ldr	r3, [pc, #516]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10f      	bne.n	8004f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	4b7d      	ldr	r3, [pc, #500]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	4a7c      	ldr	r2, [pc, #496]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6e:	4b77      	ldr	r3, [pc, #476]	@ (800514c <HAL_RCC_OscConfig+0x474>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d118      	bne.n	8004fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f7a:	4b74      	ldr	r3, [pc, #464]	@ (800514c <HAL_RCC_OscConfig+0x474>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a73      	ldr	r2, [pc, #460]	@ (800514c <HAL_RCC_OscConfig+0x474>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f86:	f7fe fe97 	bl	8003cb8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8e:	f7fe fe93 	bl	8003cb8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e10c      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800514c <HAL_RCC_OscConfig+0x474>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x2ea>
 8004fb4:	4b64      	ldr	r3, [pc, #400]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a63      	ldr	r2, [pc, #396]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc0:	e01c      	b.n	8004ffc <HAL_RCC_OscConfig+0x324>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x30c>
 8004fca:	4b5f      	ldr	r3, [pc, #380]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fce:	4a5e      	ldr	r2, [pc, #376]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	f043 0304 	orr.w	r3, r3, #4
 8004fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	4a5b      	ldr	r2, [pc, #364]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fe2:	e00b      	b.n	8004ffc <HAL_RCC_OscConfig+0x324>
 8004fe4:	4b58      	ldr	r3, [pc, #352]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe8:	4a57      	ldr	r2, [pc, #348]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff0:	4b55      	ldr	r3, [pc, #340]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff4:	4a54      	ldr	r2, [pc, #336]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8004ff6:	f023 0304 	bic.w	r3, r3, #4
 8004ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fe fe58 	bl	8003cb8 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500a:	e00a      	b.n	8005022 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500c:	f7fe fe54 	bl	8003cb8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0cb      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005022:	4b49      	ldr	r3, [pc, #292]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ee      	beq.n	800500c <HAL_RCC_OscConfig+0x334>
 800502e:	e014      	b.n	800505a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005030:	f7fe fe42 	bl	8003cb8 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005036:	e00a      	b.n	800504e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005038:	f7fe fe3e 	bl	8003cb8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0b5      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800504e:	4b3e      	ldr	r3, [pc, #248]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ee      	bne.n	8005038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d105      	bne.n	800506c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005060:	4b39      	ldr	r3, [pc, #228]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	4a38      	ldr	r2, [pc, #224]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800506a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a1 	beq.w	80051b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005076:	4b34      	ldr	r3, [pc, #208]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b08      	cmp	r3, #8
 8005080:	d05c      	beq.n	800513c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d141      	bne.n	800510e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <HAL_RCC_OscConfig+0x478>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fe fe12 	bl	8003cb8 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fe fe0e 	bl	8003cb8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e087      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	4b27      	ldr	r3, [pc, #156]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	019b      	lsls	r3, r3, #6
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	3b01      	subs	r3, #1
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	491b      	ldr	r1, [pc, #108]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x478>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fe fde7 	bl	8003cb8 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fe fde3 	bl	8003cb8 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e05c      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005100:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x416>
 800510c:	e054      	b.n	80051b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <HAL_RCC_OscConfig+0x478>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fe fdd0 	bl	8003cb8 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fe fdcc 	bl	8003cb8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e045      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_OscConfig+0x470>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x444>
 800513a:	e03d      	b.n	80051b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e038      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
 8005148:	40023800 	.word	0x40023800
 800514c:	40007000 	.word	0x40007000
 8005150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005154:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_RCC_OscConfig+0x4ec>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d028      	beq.n	80051b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d121      	bne.n	80051b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d11a      	bne.n	80051b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800518a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800518c:	4293      	cmp	r3, r2
 800518e:	d111      	bne.n	80051b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023800 	.word	0x40023800

080051c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0cc      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051dc:	4b68      	ldr	r3, [pc, #416]	@ (8005380 <HAL_RCC_ClockConfig+0x1b8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d90c      	bls.n	8005204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b65      	ldr	r3, [pc, #404]	@ (8005380 <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b63      	ldr	r3, [pc, #396]	@ (8005380 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0b8      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800521c:	4b59      	ldr	r3, [pc, #356]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a58      	ldr	r2, [pc, #352]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005234:	4b53      	ldr	r3, [pc, #332]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a52      	ldr	r2, [pc, #328]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800523e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b50      	ldr	r3, [pc, #320]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	494d      	ldr	r1, [pc, #308]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d044      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	4b47      	ldr	r3, [pc, #284]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d119      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d003      	beq.n	8005286 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005282:	2b03      	cmp	r3, #3
 8005284:	d107      	bne.n	8005296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005286:	4b3f      	ldr	r3, [pc, #252]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e06f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005296:	4b3b      	ldr	r3, [pc, #236]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e067      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052a6:	4b37      	ldr	r3, [pc, #220]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f023 0203 	bic.w	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4934      	ldr	r1, [pc, #208]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b8:	f7fe fcfe 	bl	8003cb8 <HAL_GetTick>
 80052bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c0:	f7fe fcfa 	bl	8003cb8 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e04f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 020c 	and.w	r2, r3, #12
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d1eb      	bne.n	80052c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e8:	4b25      	ldr	r3, [pc, #148]	@ (8005380 <HAL_RCC_ClockConfig+0x1b8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d20c      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b22      	ldr	r3, [pc, #136]	@ (8005380 <HAL_RCC_ClockConfig+0x1b8>)
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	@ (8005380 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e032      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4916      	ldr	r1, [pc, #88]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800533a:	4b12      	ldr	r3, [pc, #72]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	490e      	ldr	r1, [pc, #56]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534e:	f000 f821 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005352:	4602      	mov	r2, r0
 8005354:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	490a      	ldr	r1, [pc, #40]	@ (8005388 <HAL_RCC_ClockConfig+0x1c0>)
 8005360:	5ccb      	ldrb	r3, [r1, r3]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a09      	ldr	r2, [pc, #36]	@ (800538c <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800536a:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <HAL_RCC_ClockConfig+0x1c8>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fc5e 	bl	8003c30 <HAL_InitTick>

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40023c00 	.word	0x40023c00
 8005384:	40023800 	.word	0x40023800
 8005388:	08011aa0 	.word	0x08011aa0
 800538c:	20000014 	.word	0x20000014
 8005390:	20000018 	.word	0x20000018

08005394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005398:	b094      	sub	sp, #80	@ 0x50
 800539a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ac:	4b79      	ldr	r3, [pc, #484]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d00d      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x40>
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	f200 80e1 	bhi.w	8005580 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x34>
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d003      	beq.n	80053ce <HAL_RCC_GetSysClockFreq+0x3a>
 80053c6:	e0db      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053c8:	4b73      	ldr	r3, [pc, #460]	@ (8005598 <HAL_RCC_GetSysClockFreq+0x204>)
 80053ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053cc:	e0db      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ce:	4b73      	ldr	r3, [pc, #460]	@ (800559c <HAL_RCC_GetSysClockFreq+0x208>)
 80053d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053d2:	e0d8      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053de:	4b6d      	ldr	r3, [pc, #436]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d063      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	2200      	movs	r2, #0
 80053f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
 8005402:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005406:	4622      	mov	r2, r4
 8005408:	462b      	mov	r3, r5
 800540a:	f04f 0000 	mov.w	r0, #0
 800540e:	f04f 0100 	mov.w	r1, #0
 8005412:	0159      	lsls	r1, r3, #5
 8005414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005418:	0150      	lsls	r0, r2, #5
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4621      	mov	r1, r4
 8005420:	1a51      	subs	r1, r2, r1
 8005422:	6139      	str	r1, [r7, #16]
 8005424:	4629      	mov	r1, r5
 8005426:	eb63 0301 	sbc.w	r3, r3, r1
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005438:	4659      	mov	r1, fp
 800543a:	018b      	lsls	r3, r1, #6
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005442:	4651      	mov	r1, sl
 8005444:	018a      	lsls	r2, r1, #6
 8005446:	4651      	mov	r1, sl
 8005448:	ebb2 0801 	subs.w	r8, r2, r1
 800544c:	4659      	mov	r1, fp
 800544e:	eb63 0901 	sbc.w	r9, r3, r1
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800545e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005466:	4690      	mov	r8, r2
 8005468:	4699      	mov	r9, r3
 800546a:	4623      	mov	r3, r4
 800546c:	eb18 0303 	adds.w	r3, r8, r3
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	462b      	mov	r3, r5
 8005474:	eb49 0303 	adc.w	r3, r9, r3
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005486:	4629      	mov	r1, r5
 8005488:	024b      	lsls	r3, r1, #9
 800548a:	4621      	mov	r1, r4
 800548c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005490:	4621      	mov	r1, r4
 8005492:	024a      	lsls	r2, r1, #9
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549a:	2200      	movs	r2, #0
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800549e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054a4:	f7fb fc58 	bl	8000d58 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4613      	mov	r3, r2
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b0:	e058      	b.n	8005564 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b2:	4b38      	ldr	r3, [pc, #224]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	2200      	movs	r2, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	4611      	mov	r1, r2
 80054be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	2300      	movs	r3, #0
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	f04f 0000 	mov.w	r0, #0
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	0159      	lsls	r1, r3, #5
 80054da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054de:	0150      	lsls	r0, r2, #5
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4641      	mov	r1, r8
 80054e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80054ea:	4649      	mov	r1, r9
 80054ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005500:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005504:	ebb2 040a 	subs.w	r4, r2, sl
 8005508:	eb63 050b 	sbc.w	r5, r3, fp
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	00eb      	lsls	r3, r5, #3
 8005516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800551a:	00e2      	lsls	r2, r4, #3
 800551c:	4614      	mov	r4, r2
 800551e:	461d      	mov	r5, r3
 8005520:	4643      	mov	r3, r8
 8005522:	18e3      	adds	r3, r4, r3
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	464b      	mov	r3, r9
 8005528:	eb45 0303 	adc.w	r3, r5, r3
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800553a:	4629      	mov	r1, r5
 800553c:	028b      	lsls	r3, r1, #10
 800553e:	4621      	mov	r1, r4
 8005540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005544:	4621      	mov	r1, r4
 8005546:	028a      	lsls	r2, r1, #10
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800554e:	2200      	movs	r2, #0
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	61fa      	str	r2, [r7, #28]
 8005554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005558:	f7fb fbfe 	bl	8000d58 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4613      	mov	r3, r2
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005564:	4b0b      	ldr	r3, [pc, #44]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	3301      	adds	r3, #1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005574:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800557e:	e002      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <HAL_RCC_GetSysClockFreq+0x204>)
 8005582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005588:	4618      	mov	r0, r3
 800558a:	3750      	adds	r7, #80	@ 0x50
 800558c:	46bd      	mov	sp, r7
 800558e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800
 8005598:	00f42400 	.word	0x00f42400
 800559c:	007a1200 	.word	0x007a1200

080055a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a4:	4b03      	ldr	r3, [pc, #12]	@ (80055b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055a6:	681b      	ldr	r3, [r3, #0]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000014 	.word	0x20000014

080055b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055bc:	f7ff fff0 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	0a9b      	lsrs	r3, r3, #10
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	4903      	ldr	r1, [pc, #12]	@ (80055dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	08011ab0 	.word	0x08011ab0

080055e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055e4:	f7ff ffdc 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0b5b      	lsrs	r3, r3, #13
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	@ (8005604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	08011ab0 	.word	0x08011ab0

08005608 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800562c:	2b00      	cmp	r3, #0
 800562e:	d038      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005630:	4b68      	ldr	r3, [pc, #416]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005636:	f7fe fb3f 	bl	8003cb8 <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800563e:	f7fe fb3b 	bl	8003cb8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e0bd      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005650:	4b61      	ldr	r3, [pc, #388]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	495a      	ldr	r1, [pc, #360]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005676:	4b57      	ldr	r3, [pc, #348]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800567c:	f7fe fb1c 	bl	8003cb8 <HAL_GetTick>
 8005680:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005684:	f7fe fb18 	bl	8003cb8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e09a      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005696:	4b50      	ldr	r3, [pc, #320]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 8083 	beq.w	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4b48      	ldr	r3, [pc, #288]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	4a47      	ldr	r2, [pc, #284]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056be:	6413      	str	r3, [r2, #64]	@ 0x40
 80056c0:	4b45      	ldr	r3, [pc, #276]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056cc:	4b43      	ldr	r3, [pc, #268]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a42      	ldr	r2, [pc, #264]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056d8:	f7fe faee 	bl	8003cb8 <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e0:	f7fe faea 	bl	8003cb8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e06c      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056f2:	4b3a      	ldr	r3, [pc, #232]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056fe:	4b36      	ldr	r3, [pc, #216]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005706:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d02f      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d028      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800571c:	4b2e      	ldr	r3, [pc, #184]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005724:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005726:	4b2e      	ldr	r3, [pc, #184]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800572c:	4b2c      	ldr	r3, [pc, #176]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005732:	4a29      	ldr	r2, [pc, #164]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005738:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d114      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005744:	f7fe fab8 	bl	8003cb8 <HAL_GetTick>
 8005748:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574a:	e00a      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fe fab4 	bl	8003cb8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e034      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005762:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ee      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577a:	d10d      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800577c:	4b16      	ldr	r3, [pc, #88]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800578c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005790:	4911      	ldr	r1, [pc, #68]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	4313      	orrs	r3, r2
 8005794:	608b      	str	r3, [r1, #8]
 8005796:	e005      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005798:	4b0f      	ldr	r3, [pc, #60]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4a0e      	ldr	r2, [pc, #56]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057a2:	6093      	str	r3, [r2, #8]
 80057a4:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b0:	4909      	ldr	r1, [pc, #36]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7d1a      	ldrb	r2, [r3, #20]
 80057c6:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80057c8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	42470068 	.word	0x42470068
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40007000 	.word	0x40007000
 80057e0:	42470e40 	.word	0x42470e40
 80057e4:	424711e0 	.word	0x424711e0

080057e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e073      	b.n	80058e2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7f5b      	ldrb	r3, [r3, #29]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd ff72 	bl	80036f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b10      	cmp	r3, #16
 8005822:	d055      	beq.n	80058d0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	22ca      	movs	r2, #202	@ 0xca
 800582a:	625a      	str	r2, [r3, #36]	@ 0x24
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2253      	movs	r2, #83	@ 0x53
 8005832:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb31 	bl	8005e9c <RTC_EnterInitMode>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d12c      	bne.n	800589e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005856:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6899      	ldr	r1, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6919      	ldr	r1, [r3, #16]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	041a      	lsls	r2, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb38 	bl	8005f0a <RTC_ExitInitMode>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d110      	bne.n	80058c6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80058b2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	22ff      	movs	r2, #255	@ 0xff
 80058cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80058ce:	e001      	b.n	80058d4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058ea:	b590      	push	{r4, r7, lr}
 80058ec:	b087      	sub	sp, #28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	7f1b      	ldrb	r3, [r3, #28]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_RTC_SetTime+0x1c>
 8005902:	2302      	movs	r3, #2
 8005904:	e087      	b.n	8005a16 <HAL_RTC_SetTime+0x12c>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2202      	movs	r2, #2
 8005910:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d126      	bne.n	8005966 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fb0f 	bl	8005f54 <RTC_ByteToBcd2>
 8005936:	4603      	mov	r3, r0
 8005938:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fb08 	bl	8005f54 <RTC_ByteToBcd2>
 8005944:	4603      	mov	r3, r0
 8005946:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005948:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	789b      	ldrb	r3, [r3, #2]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fb00 	bl	8005f54 <RTC_ByteToBcd2>
 8005954:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005956:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	78db      	ldrb	r3, [r3, #3]
 800595e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e018      	b.n	8005998 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2200      	movs	r2, #0
 8005978:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005986:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800598c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	78db      	ldrb	r3, [r3, #3]
 8005992:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005994:	4313      	orrs	r3, r2
 8005996:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	22ca      	movs	r2, #202	@ 0xca
 800599e:	625a      	str	r2, [r3, #36]	@ 0x24
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2253      	movs	r2, #83	@ 0x53
 80059a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fa77 	bl	8005e9c <RTC_EnterInitMode>
 80059ae:	4603      	mov	r3, r0
 80059b0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d120      	bne.n	80059fa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80059c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fa8a 	bl	8005f0a <RTC_ExitInitMode>
 80059f6:	4603      	mov	r3, r0
 80059f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059fa:	7cfb      	ldrb	r3, [r7, #19]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	22ff      	movs	r2, #255	@ 0xff
 8005a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]

  return status;
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd90      	pop	{r4, r7, pc}

08005a1e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a1e:	b590      	push	{r4, r7, lr}
 8005a20:	b087      	sub	sp, #28
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	7f1b      	ldrb	r3, [r3, #28]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_RTC_SetDate+0x1c>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e071      	b.n	8005b1e <HAL_RTC_SetDate+0x100>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2202      	movs	r2, #2
 8005a44:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10e      	bne.n	8005a6a <HAL_RTC_SetDate+0x4c>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	f023 0310 	bic.w	r3, r3, #16
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	330a      	adds	r3, #10
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d11c      	bne.n	8005aaa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	78db      	ldrb	r3, [r3, #3]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fa6d 	bl	8005f54 <RTC_ByteToBcd2>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fa66 	bl	8005f54 <RTC_ByteToBcd2>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	789b      	ldrb	r3, [r3, #2]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 fa5e 	bl	8005f54 <RTC_ByteToBcd2>
 8005a98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e00e      	b.n	8005ac8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ab6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005abc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	22ca      	movs	r2, #202	@ 0xca
 8005ace:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2253      	movs	r2, #83	@ 0x53
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f9df 	bl	8005e9c <RTC_EnterInitMode>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10c      	bne.n	8005b02 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005af2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005af6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fa06 	bl	8005f0a <RTC_ExitInitMode>
 8005afe:	4603      	mov	r3, r0
 8005b00:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b02:	7cfb      	ldrb	r3, [r7, #19]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	22ff      	movs	r2, #255	@ 0xff
 8005b14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]

  return status;
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}
	...

08005b28 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b089      	sub	sp, #36	@ 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005b34:	4b9b      	ldr	r3, [pc, #620]	@ (8005da4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a9b      	ldr	r2, [pc, #620]	@ (8005da8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0adb      	lsrs	r3, r3, #11
 8005b40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7f1b      	ldrb	r3, [r3, #28]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_RTC_SetAlarm_IT+0x36>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e11e      	b.n	8005d9c <HAL_RTC_SetAlarm_IT+0x274>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2202      	movs	r2, #2
 8005b68:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d137      	bne.n	8005be0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f9e3 	bl	8005f54 <RTC_ByteToBcd2>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f9dc 	bl	8005f54 <RTC_ByteToBcd2>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ba0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	789b      	ldrb	r3, [r3, #2]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f9d4 	bl	8005f54 <RTC_ByteToBcd2>
 8005bac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	78db      	ldrb	r3, [r3, #3]
 8005bb6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005bb8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f9c6 	bl	8005f54 <RTC_ByteToBcd2>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8005bcc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005bd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	e023      	b.n	8005c28 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005c00:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005c06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	78db      	ldrb	r3, [r3, #3]
 8005c0c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005c0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8005c18:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005c1e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	22ca      	movs	r2, #202	@ 0xca
 8005c3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2253      	movs	r2, #83	@ 0x53
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c4c:	d142      	bne.n	8005cd4 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c5c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005c6e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	22ff      	movs	r2, #255	@ 0xff
 8005c82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2203      	movs	r2, #3
 8005c88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e083      	b.n	8005d9c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0e6      	beq.n	8005c70 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cc0:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cd0:	609a      	str	r2, [r3, #8]
 8005cd2:	e04c      	b.n	8005d6e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ce2:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005cf4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8005da4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8005da8 <HAL_RTC_SetAlarm_IT+0x280>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	0adb      	lsrs	r3, r3, #11
 8005d02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10b      	bne.n	8005d30 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	22ff      	movs	r2, #255	@ 0xff
 8005d1e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2203      	movs	r2, #3
 8005d24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e035      	b.n	8005d9c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0e6      	beq.n	8005d0c <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5c:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <HAL_RTC_SetAlarm_IT+0x284>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a0e      	ldr	r2, [pc, #56]	@ (8005dac <HAL_RTC_SetAlarm_IT+0x284>)
 8005d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d78:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <HAL_RTC_SetAlarm_IT+0x284>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8005dac <HAL_RTC_SetAlarm_IT+0x284>)
 8005d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d84:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	22ff      	movs	r2, #255	@ 0xff
 8005d8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3724      	adds	r7, #36	@ 0x24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}
 8005da4:	20000014 	.word	0x20000014
 8005da8:	10624dd3 	.word	0x10624dd3
 8005dac:	40013c00 	.word	0x40013c00

08005db0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005db8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e38 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005dba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005dbe:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d012      	beq.n	8005df4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005dec:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f824 	bl	8005e3c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d012      	beq.n	8005e28 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005e20:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8b4 	bl	8005f90 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	775a      	strb	r2, [r3, #29]
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40013c00 	.word	0x40013c00

08005e3c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0d      	ldr	r2, [pc, #52]	@ (8005e98 <HAL_RTC_WaitForSynchro+0x48>)
 8005e62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e64:	f7fd ff28 	bl	8003cb8 <HAL_GetTick>
 8005e68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e6a:	e009      	b.n	8005e80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6c:	f7fd ff24 	bl	8003cb8 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e7a:	d901      	bls.n	8005e80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e007      	b.n	8005e90 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0ee      	beq.n	8005e6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	00013f5f 	.word	0x00013f5f

08005e9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d122      	bne.n	8005f00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ec8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eca:	f7fd fef5 	bl	8003cb8 <HAL_GetTick>
 8005ece:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ed0:	e00c      	b.n	8005eec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ed2:	f7fd fef1 	bl	8003cb8 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ee0:	d904      	bls.n	8005eec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <RTC_EnterInitMode+0x64>
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d1e8      	bne.n	8005ed2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff8b 	bl	8005e50 <HAL_RTC_WaitForSynchro>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2204      	movs	r2, #4
 8005f44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005f62:	e005      	b.n	8005f70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	3b0a      	subs	r3, #10
 8005f6e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	2b09      	cmp	r3, #9
 8005f74:	d8f6      	bhi.n	8005f64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	b2db      	uxtb	r3, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e041      	b.n	800603a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fd fbc6 	bl	800375c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f000 fac0 	bl	8006568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e041      	b.n	80060d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f839 	bl	80060e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fa71 	bl	8006568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <HAL_TIM_PWM_Start+0x24>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e022      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d109      	bne.n	8006132 <HAL_TIM_PWM_Start+0x3e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e015      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d109      	bne.n	800614c <HAL_TIM_PWM_Start+0x58>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf14      	ite	ne
 8006144:	2301      	movne	r3, #1
 8006146:	2300      	moveq	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e008      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e068      	b.n	8006238 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0x82>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006174:	e013      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d104      	bne.n	8006186 <HAL_TIM_PWM_Start+0x92>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006184:	e00b      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Start+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006194:	e003      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fc8a 	bl	8006ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a23      	ldr	r2, [pc, #140]	@ (8006240 <HAL_TIM_PWM_Start+0x14c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d107      	bne.n	80061c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <HAL_TIM_PWM_Start+0x14c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d8:	d013      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a19      	ldr	r2, [pc, #100]	@ (8006244 <HAL_TIM_PWM_Start+0x150>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <HAL_TIM_PWM_Start+0x154>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a16      	ldr	r2, [pc, #88]	@ (800624c <HAL_TIM_PWM_Start+0x158>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a14      	ldr	r2, [pc, #80]	@ (8006250 <HAL_TIM_PWM_Start+0x15c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d010      	beq.n	8006236 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	e007      	b.n	8006236 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40010000 	.word	0x40010000
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40014000 	.word	0x40014000

08006254 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800626e:	2302      	movs	r3, #2
 8006270:	e0ae      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	f200 809f 	bhi.w	80063c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062bd 	.word	0x080062bd
 800628c:	080063c1 	.word	0x080063c1
 8006290:	080063c1 	.word	0x080063c1
 8006294:	080063c1 	.word	0x080063c1
 8006298:	080062fd 	.word	0x080062fd
 800629c:	080063c1 	.word	0x080063c1
 80062a0:	080063c1 	.word	0x080063c1
 80062a4:	080063c1 	.word	0x080063c1
 80062a8:	0800633f 	.word	0x0800633f
 80062ac:	080063c1 	.word	0x080063c1
 80062b0:	080063c1 	.word	0x080063c1
 80062b4:	080063c1 	.word	0x080063c1
 80062b8:	0800637f 	.word	0x0800637f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f9d6 	bl	8006674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0204 	bic.w	r2, r2, #4
 80062e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6999      	ldr	r1, [r3, #24]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	619a      	str	r2, [r3, #24]
      break;
 80062fa:	e064      	b.n	80063c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fa1c 	bl	8006740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6999      	ldr	r1, [r3, #24]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	021a      	lsls	r2, r3, #8
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	619a      	str	r2, [r3, #24]
      break;
 800633c:	e043      	b.n	80063c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fa67 	bl	8006818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69da      	ldr	r2, [r3, #28]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0208 	orr.w	r2, r2, #8
 8006358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0204 	bic.w	r2, r2, #4
 8006368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69d9      	ldr	r1, [r3, #28]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	61da      	str	r2, [r3, #28]
      break;
 800637c:	e023      	b.n	80063c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fab1 	bl	80068ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	021a      	lsls	r2, r3, #8
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	61da      	str	r2, [r3, #28]
      break;
 80063be:	e002      	b.n	80063c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]
      break;
 80063c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_TIM_ConfigClockSource+0x1c>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0b4      	b.n	800655e <HAL_TIM_ConfigClockSource+0x186>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800641a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800642c:	d03e      	beq.n	80064ac <HAL_TIM_ConfigClockSource+0xd4>
 800642e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006432:	f200 8087 	bhi.w	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643a:	f000 8086 	beq.w	800654a <HAL_TIM_ConfigClockSource+0x172>
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006442:	d87f      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b70      	cmp	r3, #112	@ 0x70
 8006446:	d01a      	beq.n	800647e <HAL_TIM_ConfigClockSource+0xa6>
 8006448:	2b70      	cmp	r3, #112	@ 0x70
 800644a:	d87b      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b60      	cmp	r3, #96	@ 0x60
 800644e:	d050      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006450:	2b60      	cmp	r3, #96	@ 0x60
 8006452:	d877      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b50      	cmp	r3, #80	@ 0x50
 8006456:	d03c      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006458:	2b50      	cmp	r3, #80	@ 0x50
 800645a:	d873      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b40      	cmp	r3, #64	@ 0x40
 800645e:	d058      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x13a>
 8006460:	2b40      	cmp	r3, #64	@ 0x40
 8006462:	d86f      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006464:	2b30      	cmp	r3, #48	@ 0x30
 8006466:	d064      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 8006468:	2b30      	cmp	r3, #48	@ 0x30
 800646a:	d86b      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 800646c:	2b20      	cmp	r3, #32
 800646e:	d060      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 8006470:	2b20      	cmp	r3, #32
 8006472:	d867      	bhi.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d05c      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 8006478:	2b10      	cmp	r3, #16
 800647a:	d05a      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0x15a>
 800647c:	e062      	b.n	8006544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	f000 faf7 	bl	8006a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	609a      	str	r2, [r3, #8]
      break;
 80064aa:	e04f      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064bc:	f000 fae0 	bl	8006a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ce:	609a      	str	r2, [r3, #8]
      break;
 80064d0:	e03c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 fa54 	bl	800698c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2150      	movs	r1, #80	@ 0x50
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 faad 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 80064f0:	e02c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 fa73 	bl	80069ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2160      	movs	r1, #96	@ 0x60
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fa9d 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 8006510:	e01c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	461a      	mov	r2, r3
 8006520:	f000 fa34 	bl	800698c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2140      	movs	r1, #64	@ 0x40
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fa8d 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 8006530:	e00c      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f000 fa84 	bl	8006a4a <TIM_ITRx_SetConfig>
      break;
 8006542:	e003      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e000      	b.n	800654c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800654a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a37      	ldr	r2, [pc, #220]	@ (8006658 <TIM_Base_SetConfig+0xf0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00f      	beq.n	80065a0 <TIM_Base_SetConfig+0x38>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	d00b      	beq.n	80065a0 <TIM_Base_SetConfig+0x38>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a34      	ldr	r2, [pc, #208]	@ (800665c <TIM_Base_SetConfig+0xf4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_Base_SetConfig+0x38>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a33      	ldr	r2, [pc, #204]	@ (8006660 <TIM_Base_SetConfig+0xf8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_Base_SetConfig+0x38>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a32      	ldr	r2, [pc, #200]	@ (8006664 <TIM_Base_SetConfig+0xfc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a28      	ldr	r2, [pc, #160]	@ (8006658 <TIM_Base_SetConfig+0xf0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01b      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c0:	d017      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a25      	ldr	r2, [pc, #148]	@ (800665c <TIM_Base_SetConfig+0xf4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a24      	ldr	r2, [pc, #144]	@ (8006660 <TIM_Base_SetConfig+0xf8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00f      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a23      	ldr	r2, [pc, #140]	@ (8006664 <TIM_Base_SetConfig+0xfc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00b      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a22      	ldr	r2, [pc, #136]	@ (8006668 <TIM_Base_SetConfig+0x100>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d007      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a21      	ldr	r2, [pc, #132]	@ (800666c <TIM_Base_SetConfig+0x104>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d003      	beq.n	80065f2 <TIM_Base_SetConfig+0x8a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <TIM_Base_SetConfig+0x108>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d108      	bne.n	8006604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a0c      	ldr	r2, [pc, #48]	@ (8006658 <TIM_Base_SetConfig+0xf0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d103      	bne.n	8006632 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f043 0204 	orr.w	r2, r3, #4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40010000 	.word	0x40010000
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400
 8006670:	40014800 	.word	0x40014800

08006674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 0201 	bic.w	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 0302 	bic.w	r3, r3, #2
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <TIM_OC1_SetConfig+0xc8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10c      	bne.n	80066ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0308 	bic.w	r3, r3, #8
 80066d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a13      	ldr	r2, [pc, #76]	@ (800673c <TIM_OC1_SetConfig+0xc8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d111      	bne.n	8006716 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	621a      	str	r2, [r3, #32]
}
 8006730:	bf00      	nop
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40010000 	.word	0x40010000

08006740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 0210 	bic.w	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0320 	bic.w	r3, r3, #32
 800678a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a1e      	ldr	r2, [pc, #120]	@ (8006814 <TIM_OC2_SetConfig+0xd4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10d      	bne.n	80067bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <TIM_OC2_SetConfig+0xd4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d113      	bne.n	80067ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000

08006818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	@ (80068e8 <TIM_OC3_SetConfig+0xd0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10d      	bne.n	8006892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800687c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <TIM_OC3_SetConfig+0xd0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d113      	bne.n	80068c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	40010000 	.word	0x40010000

080068ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a10      	ldr	r2, [pc, #64]	@ (8006988 <TIM_OC4_SetConfig+0x9c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d109      	bne.n	8006960 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	019b      	lsls	r3, r3, #6
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000

0800698c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0201 	bic.w	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 030a 	bic.w	r3, r3, #10
 80069c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b087      	sub	sp, #28
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f023 0210 	bic.w	r2, r3, #16
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	031b      	lsls	r3, r3, #12
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f043 0307 	orr.w	r3, r3, #7
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	609a      	str	r2, [r3, #8]
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	021a      	lsls	r2, r3, #8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e050      	b.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b70:	d013      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a16      	ldr	r2, [pc, #88]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a13      	ldr	r2, [pc, #76]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d10c      	bne.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40014000 	.word	0x40014000

08006be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e03d      	b.n	8006c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e042      	b.n	8006d24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fc fdae 	bl	8003814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2224      	movs	r2, #36	@ 0x24
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fdd3 	bl	800787c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	@ 0x28
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d175      	bne.n	8006e38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_UART_Transmit+0x2c>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e06e      	b.n	8006e3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2221      	movs	r2, #33	@ 0x21
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d6a:	f7fc ffa5 	bl	8003cb8 <HAL_GetTick>
 8006d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	88fa      	ldrh	r2, [r7, #6]
 8006d7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d84:	d108      	bne.n	8006d98 <HAL_UART_Transmit+0x6c>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d104      	bne.n	8006d98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e003      	b.n	8006da0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006da0:	e02e      	b.n	8006e00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2200      	movs	r2, #0
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fb37 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e03a      	b.n	8006e3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	3302      	adds	r3, #2
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	e007      	b.n	8006df2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1cb      	bne.n	8006da2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2140      	movs	r1, #64	@ 0x40
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fb03 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e006      	b.n	8006e3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e000      	b.n	8006e3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e38:	2302      	movs	r3, #2
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d112      	bne.n	8006e82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_UART_Receive_IT+0x26>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e00b      	b.n	8006e84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	461a      	mov	r2, r3
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fb2a 	bl	80074d2 <UART_Start_Receive_IT>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	e000      	b.n	8006e84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e82:	2302      	movs	r3, #2
  }
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10f      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x66>
 8006ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc07 	bl	80076fe <UART_Receive_IT>
      return;
 8006ef0:	e273      	b.n	80073da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80de 	beq.w	80070b8 <HAL_UART_IRQHandler+0x22c>
 8006efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 80d1 	beq.w	80070b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_UART_IRQHandler+0xae>
 8006f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <HAL_UART_IRQHandler+0xd2>
 8006f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	f043 0202 	orr.w	r2, r3, #2
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <HAL_UART_IRQHandler+0xf6>
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7a:	f043 0204 	orr.w	r2, r3, #4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d011      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x126>
 8006f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006faa:	f043 0208 	orr.w	r2, r3, #8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 820a 	beq.w	80073d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <HAL_UART_IRQHandler+0x14e>
 8006fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fb92 	bl	80076fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	bf0c      	ite	eq
 8006fe8:	2301      	moveq	r3, #1
 8006fea:	2300      	movne	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <HAL_UART_IRQHandler+0x17a>
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007002:	2b00      	cmp	r3, #0
 8007004:	d04f      	beq.n	80070a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa9d 	bl	8007546 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d141      	bne.n	800709e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3314      	adds	r3, #20
 8007042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007046:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800704a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800705e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1d9      	bne.n	800701a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d013      	beq.n	8007096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	4a8a      	ldr	r2, [pc, #552]	@ (800729c <HAL_UART_IRQHandler+0x410>)
 8007074:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	4618      	mov	r0, r3
 800707c:	f7fc ffcd 	bl	800401a <HAL_DMA_Abort_IT>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d016      	beq.n	80070b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	e00e      	b.n	80070b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9ac 	bl	80073f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709c:	e00a      	b.n	80070b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9a8 	bl	80073f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a4:	e006      	b.n	80070b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9a4 	bl	80073f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070b2:	e18d      	b.n	80073d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	bf00      	nop
    return;
 80070b6:	e18b      	b.n	80073d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	2b01      	cmp	r3, #1
 80070be:	f040 8167 	bne.w	8007390 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8160 	beq.w	8007390 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80070d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8159 	beq.w	8007390 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60bb      	str	r3, [r7, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	f040 80ce 	bne.w	80072a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80a9 	beq.w	800726c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800711e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007122:	429a      	cmp	r2, r3
 8007124:	f080 80a2 	bcs.w	800726c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800712e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800713a:	f000 8088 	beq.w	800724e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007154:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800716a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800716e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1d9      	bne.n	800713e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3314      	adds	r3, #20
 8007190:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800719a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3314      	adds	r3, #20
 80071aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e1      	bne.n	800718a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3314      	adds	r3, #20
 80071e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e3      	bne.n	80071c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800721c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800721e:	f023 0310 	bic.w	r3, r3, #16
 8007222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007230:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007232:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800723e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e3      	bne.n	800720c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007248:	4618      	mov	r0, r3
 800724a:	f7fc fe76 	bl	8003f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800725c:	b29b      	uxth	r3, r3
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	b29b      	uxth	r3, r3
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f8cf 	bl	8007408 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800726a:	e0b3      	b.n	80073d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007270:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007274:	429a      	cmp	r2, r3
 8007276:	f040 80ad 	bne.w	80073d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007284:	f040 80a6 	bne.w	80073d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f8b7 	bl	8007408 <HAL_UARTEx_RxEventCallback>
      return;
 800729a:	e09b      	b.n	80073d4 <HAL_UART_IRQHandler+0x548>
 800729c:	0800760d 	.word	0x0800760d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 808e 	beq.w	80073d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80072bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8089 	beq.w	80073d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	330c      	adds	r3, #12
 80072cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80072ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e3      	bne.n	80072c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	623b      	str	r3, [r7, #32]
   return(result);
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f023 0301 	bic.w	r3, r3, #1
 8007314:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007322:	633a      	str	r2, [r7, #48]	@ 0x30
 8007324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e3      	bne.n	80072fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60fb      	str	r3, [r7, #12]
   return(result);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	330c      	adds	r3, #12
 8007364:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007368:	61fa      	str	r2, [r7, #28]
 800736a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	69b9      	ldr	r1, [r7, #24]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	617b      	str	r3, [r7, #20]
   return(result);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e3      	bne.n	8007344 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f83d 	bl	8007408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800738e:	e023      	b.n	80073d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <HAL_UART_IRQHandler+0x524>
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f940 	bl	800762e <UART_Transmit_IT>
    return;
 80073ae:	e014      	b.n	80073da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00e      	beq.n	80073da <HAL_UART_IRQHandler+0x54e>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f980 	bl	80076ce <UART_EndTransmit_IT>
    return;
 80073ce:	e004      	b.n	80073da <HAL_UART_IRQHandler+0x54e>
    return;
 80073d0:	bf00      	nop
 80073d2:	e002      	b.n	80073da <HAL_UART_IRQHandler+0x54e>
      return;
 80073d4:	bf00      	nop
 80073d6:	e000      	b.n	80073da <HAL_UART_IRQHandler+0x54e>
      return;
 80073d8:	bf00      	nop
  }
}
 80073da:	37e8      	adds	r7, #232	@ 0xe8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4613      	mov	r3, r2
 800742e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007430:	e03b      	b.n	80074aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d037      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7fc fc3d 	bl	8003cb8 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	6a3a      	ldr	r2, [r7, #32]
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <UART_WaitOnFlagUntilTimeout+0x30>
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e03a      	b.n	80074ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d023      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b80      	cmp	r3, #128	@ 0x80
 8007466:	d020      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b40      	cmp	r3, #64	@ 0x40
 800746c:	d01d      	beq.n	80074aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d116      	bne.n	80074aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f857 	bl	8007546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2208      	movs	r2, #8
 800749c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e00f      	b.n	80074ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d0b4      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	4613      	mov	r3, r2
 80074de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	88fa      	ldrh	r2, [r7, #6]
 80074ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2222      	movs	r2, #34	@ 0x22
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007516:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0220 	orr.w	r2, r2, #32
 8007536:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007546:	b480      	push	{r7}
 8007548:	b095      	sub	sp, #84	@ 0x54
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	330c      	adds	r3, #12
 800756c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800756e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007574:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3314      	adds	r3, #20
 8007588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	61fb      	str	r3, [r7, #28]
   return(result);
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	f023 0301 	bic.w	r3, r3, #1
 8007598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3314      	adds	r3, #20
 80075a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e5      	bne.n	8007582 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d119      	bne.n	80075f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f023 0310 	bic.w	r3, r3, #16
 80075d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075de:	61ba      	str	r2, [r7, #24]
 80075e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6979      	ldr	r1, [r7, #20]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	613b      	str	r3, [r7, #16]
   return(result);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e5      	bne.n	80075be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007600:	bf00      	nop
 8007602:	3754      	adds	r7, #84	@ 0x54
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff fee7 	bl	80073f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007626:	bf00      	nop
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b21      	cmp	r3, #33	@ 0x21
 8007640:	d13e      	bne.n	80076c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764a:	d114      	bne.n	8007676 <UART_Transmit_IT+0x48>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d110      	bne.n	8007676 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007668:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	1c9a      	adds	r2, r3, #2
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	621a      	str	r2, [r3, #32]
 8007674:	e008      	b.n	8007688 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6211      	str	r1, [r2, #32]
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29b      	uxth	r3, r3
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	4619      	mov	r1, r3
 8007696:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10f      	bne.n	80076bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e000      	b.n	80076c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
  }
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fe76 	bl	80073e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b08c      	sub	sp, #48	@ 0x30
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b22      	cmp	r3, #34	@ 0x22
 8007718:	f040 80aa 	bne.w	8007870 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007724:	d115      	bne.n	8007752 <UART_Receive_IT+0x54>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d111      	bne.n	8007752 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007740:	b29a      	uxth	r2, r3
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774a:	1c9a      	adds	r2, r3, #2
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007750:	e024      	b.n	800779c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007760:	d007      	beq.n	8007772 <UART_Receive_IT+0x74>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <UART_Receive_IT+0x82>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	b2da      	uxtb	r2, r3
 800777a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e008      	b.n	8007792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800778c:	b2da      	uxtb	r2, r3
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	4619      	mov	r1, r3
 80077aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d15d      	bne.n	800786c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0220 	bic.w	r2, r2, #32
 80077be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695a      	ldr	r2, [r3, #20]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0201 	bic.w	r2, r2, #1
 80077de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d135      	bne.n	8007862 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	613b      	str	r3, [r7, #16]
   return(result);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800781c:	623a      	str	r2, [r7, #32]
 800781e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69f9      	ldr	r1, [r7, #28]
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	61bb      	str	r3, [r7, #24]
   return(result);
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b10      	cmp	r3, #16
 800783c:	d10a      	bne.n	8007854 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fdd4 	bl	8007408 <HAL_UARTEx_RxEventCallback>
 8007860:	e002      	b.n	8007868 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fb f866 	bl	8002934 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	e002      	b.n	8007872 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	e000      	b.n	8007872 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007870:	2302      	movs	r3, #2
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3730      	adds	r7, #48	@ 0x30
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800787c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007880:	b0c0      	sub	sp, #256	@ 0x100
 8007882:	af00      	add	r7, sp, #0
 8007884:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	68d9      	ldr	r1, [r3, #12]
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	ea40 0301 	orr.w	r3, r0, r1
 80078a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078d4:	f021 010c 	bic.w	r1, r1, #12
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078e2:	430b      	orrs	r3, r1
 80078e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f6:	6999      	ldr	r1, [r3, #24]
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	ea40 0301 	orr.w	r3, r0, r1
 8007902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b8f      	ldr	r3, [pc, #572]	@ (8007b48 <UART_SetConfig+0x2cc>)
 800790c:	429a      	cmp	r2, r3
 800790e:	d005      	beq.n	800791c <UART_SetConfig+0xa0>
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b8d      	ldr	r3, [pc, #564]	@ (8007b4c <UART_SetConfig+0x2d0>)
 8007918:	429a      	cmp	r2, r3
 800791a:	d104      	bne.n	8007926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800791c:	f7fd fe60 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8007920:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007924:	e003      	b.n	800792e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007926:	f7fd fe47 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 800792a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800792e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007938:	f040 810c 	bne.w	8007b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800793c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007940:	2200      	movs	r2, #0
 8007942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007946:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800794a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	1891      	adds	r1, r2, r2
 8007954:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007956:	415b      	adcs	r3, r3
 8007958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800795a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800795e:	4621      	mov	r1, r4
 8007960:	eb12 0801 	adds.w	r8, r2, r1
 8007964:	4629      	mov	r1, r5
 8007966:	eb43 0901 	adc.w	r9, r3, r1
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	f04f 0300 	mov.w	r3, #0
 8007972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800797a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800797e:	4690      	mov	r8, r2
 8007980:	4699      	mov	r9, r3
 8007982:	4623      	mov	r3, r4
 8007984:	eb18 0303 	adds.w	r3, r8, r3
 8007988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800798c:	462b      	mov	r3, r5
 800798e:	eb49 0303 	adc.w	r3, r9, r3
 8007992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079aa:	460b      	mov	r3, r1
 80079ac:	18db      	adds	r3, r3, r3
 80079ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80079b0:	4613      	mov	r3, r2
 80079b2:	eb42 0303 	adc.w	r3, r2, r3
 80079b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80079b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079c0:	f7f9 f9ca 	bl	8000d58 <__aeabi_uldivmod>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4b61      	ldr	r3, [pc, #388]	@ (8007b50 <UART_SetConfig+0x2d4>)
 80079ca:	fba3 2302 	umull	r2, r3, r3, r2
 80079ce:	095b      	lsrs	r3, r3, #5
 80079d0:	011c      	lsls	r4, r3, #4
 80079d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	1891      	adds	r1, r2, r2
 80079ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079ec:	415b      	adcs	r3, r3
 80079ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079f4:	4641      	mov	r1, r8
 80079f6:	eb12 0a01 	adds.w	sl, r2, r1
 80079fa:	4649      	mov	r1, r9
 80079fc:	eb43 0b01 	adc.w	fp, r3, r1
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a14:	4692      	mov	sl, r2
 8007a16:	469b      	mov	fp, r3
 8007a18:	4643      	mov	r3, r8
 8007a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a22:	464b      	mov	r3, r9
 8007a24:	eb4b 0303 	adc.w	r3, fp, r3
 8007a28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a40:	460b      	mov	r3, r1
 8007a42:	18db      	adds	r3, r3, r3
 8007a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a46:	4613      	mov	r3, r2
 8007a48:	eb42 0303 	adc.w	r3, r2, r3
 8007a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a56:	f7f9 f97f 	bl	8000d58 <__aeabi_uldivmod>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	4b3b      	ldr	r3, [pc, #236]	@ (8007b50 <UART_SetConfig+0x2d4>)
 8007a62:	fba3 2301 	umull	r2, r3, r3, r1
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	2264      	movs	r2, #100	@ 0x64
 8007a6a:	fb02 f303 	mul.w	r3, r2, r3
 8007a6e:	1acb      	subs	r3, r1, r3
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a76:	4b36      	ldr	r3, [pc, #216]	@ (8007b50 <UART_SetConfig+0x2d4>)
 8007a78:	fba3 2302 	umull	r2, r3, r3, r2
 8007a7c:	095b      	lsrs	r3, r3, #5
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a84:	441c      	add	r4, r3
 8007a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	1891      	adds	r1, r2, r2
 8007a9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007aa0:	415b      	adcs	r3, r3
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	1851      	adds	r1, r2, r1
 8007aac:	6339      	str	r1, [r7, #48]	@ 0x30
 8007aae:	4649      	mov	r1, r9
 8007ab0:	414b      	adcs	r3, r1
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	00cb      	lsls	r3, r1, #3
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aca:	4651      	mov	r1, sl
 8007acc:	00ca      	lsls	r2, r1, #3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	189b      	adds	r3, r3, r2
 8007ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007adc:	464b      	mov	r3, r9
 8007ade:	460a      	mov	r2, r1
 8007ae0:	eb42 0303 	adc.w	r3, r2, r3
 8007ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007af4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007afc:	460b      	mov	r3, r1
 8007afe:	18db      	adds	r3, r3, r3
 8007b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b02:	4613      	mov	r3, r2
 8007b04:	eb42 0303 	adc.w	r3, r2, r3
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b12:	f7f9 f921 	bl	8000d58 <__aeabi_uldivmod>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b50 <UART_SetConfig+0x2d4>)
 8007b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	2164      	movs	r1, #100	@ 0x64
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	3332      	adds	r3, #50	@ 0x32
 8007b2e:	4a08      	ldr	r2, [pc, #32]	@ (8007b50 <UART_SetConfig+0x2d4>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	f003 0207 	and.w	r2, r3, #7
 8007b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4422      	add	r2, r4
 8007b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b44:	e106      	b.n	8007d54 <UART_SetConfig+0x4d8>
 8007b46:	bf00      	nop
 8007b48:	40011000 	.word	0x40011000
 8007b4c:	40011400 	.word	0x40011400
 8007b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b66:	4642      	mov	r2, r8
 8007b68:	464b      	mov	r3, r9
 8007b6a:	1891      	adds	r1, r2, r2
 8007b6c:	6239      	str	r1, [r7, #32]
 8007b6e:	415b      	adcs	r3, r3
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b76:	4641      	mov	r1, r8
 8007b78:	1854      	adds	r4, r2, r1
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	eb43 0501 	adc.w	r5, r3, r1
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	00eb      	lsls	r3, r5, #3
 8007b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b8e:	00e2      	lsls	r2, r4, #3
 8007b90:	4614      	mov	r4, r2
 8007b92:	461d      	mov	r5, r3
 8007b94:	4643      	mov	r3, r8
 8007b96:	18e3      	adds	r3, r4, r3
 8007b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	eb45 0303 	adc.w	r3, r5, r3
 8007ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	008b      	lsls	r3, r1, #2
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bcc:	4621      	mov	r1, r4
 8007bce:	008a      	lsls	r2, r1, #2
 8007bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bd4:	f7f9 f8c0 	bl	8000d58 <__aeabi_uldivmod>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4b60      	ldr	r3, [pc, #384]	@ (8007d60 <UART_SetConfig+0x4e4>)
 8007bde:	fba3 2302 	umull	r2, r3, r3, r2
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	011c      	lsls	r4, r3, #4
 8007be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	1891      	adds	r1, r2, r2
 8007bfe:	61b9      	str	r1, [r7, #24]
 8007c00:	415b      	adcs	r3, r3
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c08:	4641      	mov	r1, r8
 8007c0a:	1851      	adds	r1, r2, r1
 8007c0c:	6139      	str	r1, [r7, #16]
 8007c0e:	4649      	mov	r1, r9
 8007c10:	414b      	adcs	r3, r1
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c20:	4659      	mov	r1, fp
 8007c22:	00cb      	lsls	r3, r1, #3
 8007c24:	4651      	mov	r1, sl
 8007c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c2a:	4651      	mov	r1, sl
 8007c2c:	00ca      	lsls	r2, r1, #3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4619      	mov	r1, r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	4642      	mov	r2, r8
 8007c36:	189b      	adds	r3, r3, r2
 8007c38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c3c:	464b      	mov	r3, r9
 8007c3e:	460a      	mov	r2, r1
 8007c40:	eb42 0303 	adc.w	r3, r2, r3
 8007c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c60:	4649      	mov	r1, r9
 8007c62:	008b      	lsls	r3, r1, #2
 8007c64:	4641      	mov	r1, r8
 8007c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c6a:	4641      	mov	r1, r8
 8007c6c:	008a      	lsls	r2, r1, #2
 8007c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c72:	f7f9 f871 	bl	8000d58 <__aeabi_uldivmod>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4b38      	ldr	r3, [pc, #224]	@ (8007d60 <UART_SetConfig+0x4e4>)
 8007c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	2264      	movs	r2, #100	@ 0x64
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	1acb      	subs	r3, r1, r3
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	3332      	adds	r3, #50	@ 0x32
 8007c90:	4a33      	ldr	r2, [pc, #204]	@ (8007d60 <UART_SetConfig+0x4e4>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c9c:	441c      	add	r4, r3
 8007c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ca6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cac:	4642      	mov	r2, r8
 8007cae:	464b      	mov	r3, r9
 8007cb0:	1891      	adds	r1, r2, r2
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	415b      	adcs	r3, r3
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cbc:	4641      	mov	r1, r8
 8007cbe:	1851      	adds	r1, r2, r1
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	414b      	adcs	r3, r1
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	f04f 0200 	mov.w	r2, #0
 8007ccc:	f04f 0300 	mov.w	r3, #0
 8007cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	00cb      	lsls	r3, r1, #3
 8007cd8:	4651      	mov	r1, sl
 8007cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cde:	4651      	mov	r1, sl
 8007ce0:	00ca      	lsls	r2, r1, #3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4642      	mov	r2, r8
 8007cea:	189b      	adds	r3, r3, r2
 8007cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cee:	464b      	mov	r3, r9
 8007cf0:	460a      	mov	r2, r1
 8007cf2:	eb42 0303 	adc.w	r3, r2, r3
 8007cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d02:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d04:	f04f 0200 	mov.w	r2, #0
 8007d08:	f04f 0300 	mov.w	r3, #0
 8007d0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d10:	4649      	mov	r1, r9
 8007d12:	008b      	lsls	r3, r1, #2
 8007d14:	4641      	mov	r1, r8
 8007d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	008a      	lsls	r2, r1, #2
 8007d1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d22:	f7f9 f819 	bl	8000d58 <__aeabi_uldivmod>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <UART_SetConfig+0x4e4>)
 8007d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	2164      	movs	r1, #100	@ 0x64
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	3332      	adds	r3, #50	@ 0x32
 8007d3e:	4a08      	ldr	r2, [pc, #32]	@ (8007d60 <UART_SetConfig+0x4e4>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	095b      	lsrs	r3, r3, #5
 8007d46:	f003 020f 	and.w	r2, r3, #15
 8007d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4422      	add	r2, r4
 8007d52:	609a      	str	r2, [r3, #8]
}
 8007d54:	bf00      	nop
 8007d56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d60:	51eb851f 	.word	0x51eb851f

08007d64 <__NVIC_SetPriority>:
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	6039      	str	r1, [r7, #0]
 8007d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	db0a      	blt.n	8007d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	490c      	ldr	r1, [pc, #48]	@ (8007db0 <__NVIC_SetPriority+0x4c>)
 8007d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d82:	0112      	lsls	r2, r2, #4
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	440b      	add	r3, r1
 8007d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d8c:	e00a      	b.n	8007da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	4908      	ldr	r1, [pc, #32]	@ (8007db4 <__NVIC_SetPriority+0x50>)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	3b04      	subs	r3, #4
 8007d9c:	0112      	lsls	r2, r2, #4
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	440b      	add	r3, r1
 8007da2:	761a      	strb	r2, [r3, #24]
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	e000e100 	.word	0xe000e100
 8007db4:	e000ed00 	.word	0xe000ed00

08007db8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f06f 0004 	mvn.w	r0, #4
 8007dc2:	f7ff ffcf 	bl	8007d64 <__NVIC_SetPriority>
#endif
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd2:	f3ef 8305 	mrs	r3, IPSR
 8007dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8007dd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dde:	f06f 0305 	mvn.w	r3, #5
 8007de2:	607b      	str	r3, [r7, #4]
 8007de4:	e00c      	b.n	8007e00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <osKernelInitialize+0x44>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dee:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <osKernelInitialize+0x44>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	e002      	b.n	8007e00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e00:	687b      	ldr	r3, [r7, #4]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20002450 	.word	0x20002450

08007e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1a:	f3ef 8305 	mrs	r3, IPSR
 8007e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007e20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e26:	f06f 0305 	mvn.w	r3, #5
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e010      	b.n	8007e50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <osKernelStart+0x48>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d109      	bne.n	8007e4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e36:	f7ff ffbf 	bl	8007db8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e3a:	4b08      	ldr	r3, [pc, #32]	@ (8007e5c <osKernelStart+0x48>)
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e40:	f001 fc24 	bl	800968c <vTaskStartScheduler>
      stat = osOK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	e002      	b.n	8007e50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e50:	687b      	ldr	r3, [r7, #4]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20002450 	.word	0x20002450

08007e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	@ 0x38
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e70:	f3ef 8305 	mrs	r3, IPSR
 8007e74:	617b      	str	r3, [r7, #20]
  return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d17e      	bne.n	8007f7a <osThreadNew+0x11a>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d07b      	beq.n	8007f7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e86:	2318      	movs	r3, #24
 8007e88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d045      	beq.n	8007f26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <osThreadNew+0x48>
        name = attr->name;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <osThreadNew+0x6e>
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b38      	cmp	r3, #56	@ 0x38
 8007ec0:	d805      	bhi.n	8007ece <osThreadNew+0x6e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <osThreadNew+0x72>
        return (NULL);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e054      	b.n	8007f7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00e      	beq.n	8007f08 <osThreadNew+0xa8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ef0:	d90a      	bls.n	8007f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <osThreadNew+0xa8>
        mem = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e010      	b.n	8007f2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10c      	bne.n	8007f2a <osThreadNew+0xca>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <osThreadNew+0xca>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <osThreadNew+0xca>
          mem = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	e001      	b.n	8007f2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d110      	bne.n	8007f52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f38:	9202      	str	r2, [sp, #8]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6a3a      	ldr	r2, [r7, #32]
 8007f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f001 f944 	bl	80091d4 <xTaskCreateStatic>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	e013      	b.n	8007f7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d110      	bne.n	8007f7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f001 f992 	bl	8009294 <xTaskCreate>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d001      	beq.n	8007f7a <osThreadNew+0x11a>
            hTask = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f7a:	693b      	ldr	r3, [r7, #16]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	@ 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8c:	f3ef 8305 	mrs	r3, IPSR
 8007f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <osDelay+0x1c>
    stat = osErrorISR;
 8007f98:	f06f 0305 	mvn.w	r3, #5
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e007      	b.n	8007fb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 fb38 	bl	8009620 <vTaskDelay>
    }
  }

  return (stat);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b088      	sub	sp, #32
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc6:	f3ef 8305 	mrs	r3, IPSR
 8007fca:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fcc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d174      	bne.n	80080bc <osMutexNew+0x102>
    if (attr != NULL) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	e001      	b.n	8007fe4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <osMutexNew+0x3a>
      rmtx = 1U;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	e001      	b.n	8007ff8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d15c      	bne.n	80080bc <osMutexNew+0x102>
      mem = -1;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d015      	beq.n	800803a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <osMutexNew+0x6a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b4f      	cmp	r3, #79	@ 0x4f
 800801c:	d902      	bls.n	8008024 <osMutexNew+0x6a>
          mem = 1;
 800801e:	2301      	movs	r3, #1
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	e00c      	b.n	800803e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d108      	bne.n	800803e <osMutexNew+0x84>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <osMutexNew+0x84>
            mem = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	613b      	str	r3, [r7, #16]
 8008038:	e001      	b.n	800803e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d112      	bne.n	800806a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	4619      	mov	r1, r3
 8008050:	2004      	movs	r0, #4
 8008052:	f000 fb20 	bl	8008696 <xQueueCreateMutexStatic>
 8008056:	61f8      	str	r0, [r7, #28]
 8008058:	e016      	b.n	8008088 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	4619      	mov	r1, r3
 8008060:	2001      	movs	r0, #1
 8008062:	f000 fb18 	bl	8008696 <xQueueCreateMutexStatic>
 8008066:	61f8      	str	r0, [r7, #28]
 8008068:	e00e      	b.n	8008088 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d004      	beq.n	8008080 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008076:	2004      	movs	r0, #4
 8008078:	f000 faf5 	bl	8008666 <xQueueCreateMutex>
 800807c:	61f8      	str	r0, [r7, #28]
 800807e:	e003      	b.n	8008088 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008080:	2001      	movs	r0, #1
 8008082:	f000 faf0 	bl	8008666 <xQueueCreateMutex>
 8008086:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00c      	beq.n	80080a8 <osMutexNew+0xee>
        if (attr != NULL) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <osMutexNew+0xe2>
          name = attr->name;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	e001      	b.n	80080a0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80080a0:	68f9      	ldr	r1, [r7, #12]
 80080a2:	69f8      	ldr	r0, [r7, #28]
 80080a4:	f001 f838 	bl	8009118 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <osMutexNew+0x102>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80080bc:	69fb      	ldr	r3, [r7, #28]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3720      	adds	r7, #32
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e4:	f3ef 8305 	mrs	r3, IPSR
 80080e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80080ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80080f0:	f06f 0305 	mvn.w	r3, #5
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e02c      	b.n	8008152 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80080fe:	f06f 0303 	mvn.w	r3, #3
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	e025      	b.n	8008152 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d011      	beq.n	8008130 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6938      	ldr	r0, [r7, #16]
 8008110:	f000 fb11 	bl	8008736 <xQueueTakeMutexRecursive>
 8008114:	4603      	mov	r3, r0
 8008116:	2b01      	cmp	r3, #1
 8008118:	d01b      	beq.n	8008152 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008120:	f06f 0301 	mvn.w	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	e014      	b.n	8008152 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008128:	f06f 0302 	mvn.w	r3, #2
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e010      	b.n	8008152 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6938      	ldr	r0, [r7, #16]
 8008134:	f000 fdb8 	bl	8008ca8 <xQueueSemaphoreTake>
 8008138:	4603      	mov	r3, r0
 800813a:	2b01      	cmp	r3, #1
 800813c:	d009      	beq.n	8008152 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008144:	f06f 0301 	mvn.w	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e002      	b.n	8008152 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800814c:	f06f 0302 	mvn.w	r3, #2
 8008150:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008152:	697b      	ldr	r3, [r7, #20]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f023 0301 	bic.w	r3, r3, #1
 800816a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008178:	f3ef 8305 	mrs	r3, IPSR
 800817c:	60bb      	str	r3, [r7, #8]
  return(result);
 800817e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <osMutexRelease+0x30>
    stat = osErrorISR;
 8008184:	f06f 0305 	mvn.w	r3, #5
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	e01f      	b.n	80081cc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008192:	f06f 0303 	mvn.w	r3, #3
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e018      	b.n	80081cc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80081a0:	6938      	ldr	r0, [r7, #16]
 80081a2:	f000 fa93 	bl	80086cc <xQueueGiveMutexRecursive>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d00f      	beq.n	80081cc <osMutexRelease+0x70>
        stat = osErrorResource;
 80081ac:	f06f 0302 	mvn.w	r3, #2
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e00b      	b.n	80081cc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80081b4:	2300      	movs	r3, #0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 faf2 	bl	80087a4 <xQueueGenericSend>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d002      	beq.n	80081cc <osMutexRelease+0x70>
        stat = osErrorResource;
 80081c6:	f06f 0302 	mvn.w	r3, #2
 80081ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80081cc:	697b      	ldr	r3, [r7, #20]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a07      	ldr	r2, [pc, #28]	@ (8008204 <vApplicationGetIdleTaskMemory+0x2c>)
 80081e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4a06      	ldr	r2, [pc, #24]	@ (8008208 <vApplicationGetIdleTaskMemory+0x30>)
 80081ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2280      	movs	r2, #128	@ 0x80
 80081f4:	601a      	str	r2, [r3, #0]
}
 80081f6:	bf00      	nop
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20002454 	.word	0x20002454
 8008208:	200024b0 	.word	0x200024b0

0800820c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4a07      	ldr	r2, [pc, #28]	@ (8008238 <vApplicationGetTimerTaskMemory+0x2c>)
 800821c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4a06      	ldr	r2, [pc, #24]	@ (800823c <vApplicationGetTimerTaskMemory+0x30>)
 8008222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800822a:	601a      	str	r2, [r3, #0]
}
 800822c:	bf00      	nop
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	200026b0 	.word	0x200026b0
 800823c:	2000270c 	.word	0x2000270c

08008240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f103 0208 	add.w	r2, r3, #8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f04f 32ff 	mov.w	r2, #4294967295
 8008258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f103 0208 	add.w	r2, r3, #8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f103 0208 	add.w	r2, r3, #8
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d103      	bne.n	8008302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e00c      	b.n	800831c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3308      	adds	r3, #8
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e002      	b.n	8008310 <vListInsert+0x2e>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	429a      	cmp	r2, r3
 800831a:	d2f6      	bcs.n	800830a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]
}
 8008348:	bf00      	nop
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6892      	ldr	r2, [r2, #8]
 800836a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6852      	ldr	r2, [r2, #4]
 8008374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d103      	bne.n	8008388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	1e5a      	subs	r2, r3, #1
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083d4:	f002 fc28 	bl	800ac28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e0:	68f9      	ldr	r1, [r7, #12]
 80083e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008404:	3b01      	subs	r3, #1
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800840a:	fb01 f303 	mul.w	r3, r1, r3
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	22ff      	movs	r2, #255	@ 0xff
 8008418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	22ff      	movs	r2, #255	@ 0xff
 8008420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d114      	bne.n	8008454 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01a      	beq.n	8008468 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3310      	adds	r3, #16
 8008436:	4618      	mov	r0, r3
 8008438:	f001 fbb6 	bl	8009ba8 <xTaskRemoveFromEventList>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d012      	beq.n	8008468 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008442:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <xQueueGenericReset+0xd0>)
 8008444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	e009      	b.n	8008468 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3310      	adds	r3, #16
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fef1 	bl	8008240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3324      	adds	r3, #36	@ 0x24
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff feec 	bl	8008240 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008468:	f002 fc10 	bl	800ac8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800846c:	2301      	movs	r3, #1
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08e      	sub	sp, #56	@ 0x38
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10b      	bne.n	80084a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	e7fd      	b.n	80084a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10b      	bne.n	80084c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084c0:	bf00      	nop
 80084c2:	bf00      	nop
 80084c4:	e7fd      	b.n	80084c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <xQueueGenericCreateStatic+0x56>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <xQueueGenericCreateStatic+0x5a>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueGenericCreateStatic+0x5c>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	623b      	str	r3, [r7, #32]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <xQueueGenericCreateStatic+0x84>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <xQueueGenericCreateStatic+0x88>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <xQueueGenericCreateStatic+0x8a>
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10b      	bne.n	8008522 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	61fb      	str	r3, [r7, #28]
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	e7fd      	b.n	800851e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008522:	2350      	movs	r3, #80	@ 0x50
 8008524:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b50      	cmp	r3, #80	@ 0x50
 800852a:	d00b      	beq.n	8008544 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	61bb      	str	r3, [r7, #24]
}
 800853e:	bf00      	nop
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008544:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00d      	beq.n	800856c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008558:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800855c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f840 	bl	80085ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800856e:	4618      	mov	r0, r3
 8008570:	3730      	adds	r7, #48	@ 0x30
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008576:	b580      	push	{r7, lr}
 8008578:	b08a      	sub	sp, #40	@ 0x28
 800857a:	af02      	add	r7, sp, #8
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	4613      	mov	r3, r2
 8008582:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10b      	bne.n	80085a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	613b      	str	r3, [r7, #16]
}
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	e7fd      	b.n	800859e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
 80085aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	3350      	adds	r3, #80	@ 0x50
 80085b0:	4618      	mov	r0, r3
 80085b2:	f002 fc5b 	bl	800ae6c <pvPortMalloc>
 80085b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d011      	beq.n	80085e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	3350      	adds	r3, #80	@ 0x50
 80085c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085d0:	79fa      	ldrb	r2, [r7, #7]
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4613      	mov	r3, r2
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 f805 	bl	80085ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085e2:	69bb      	ldr	r3, [r7, #24]
	}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e002      	b.n	800860e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800861a:	2101      	movs	r1, #1
 800861c:	69b8      	ldr	r0, [r7, #24]
 800861e:	f7ff fec3 	bl	80083a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00e      	beq.n	800865e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008652:	2300      	movs	r3, #0
 8008654:	2200      	movs	r2, #0
 8008656:	2100      	movs	r1, #0
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f8a3 	bl	80087a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800865e:	bf00      	nop
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	4603      	mov	r3, r0
 800866e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008670:	2301      	movs	r3, #1
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	461a      	mov	r2, r3
 800867c:	6939      	ldr	r1, [r7, #16]
 800867e:	6978      	ldr	r0, [r7, #20]
 8008680:	f7ff ff79 	bl	8008576 <xQueueGenericCreate>
 8008684:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff ffd3 	bl	8008632 <prvInitialiseMutex>

		return xNewQueue;
 800868c:	68fb      	ldr	r3, [r7, #12]
	}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008696:	b580      	push	{r7, lr}
 8008698:	b088      	sub	sp, #32
 800869a:	af02      	add	r7, sp, #8
 800869c:	4603      	mov	r3, r0
 800869e:	6039      	str	r1, [r7, #0]
 80086a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80086a2:	2301      	movs	r3, #1
 80086a4:	617b      	str	r3, [r7, #20]
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2200      	movs	r2, #0
 80086b2:	6939      	ldr	r1, [r7, #16]
 80086b4:	6978      	ldr	r0, [r7, #20]
 80086b6:	f7ff fee1 	bl	800847c <xQueueGenericCreateStatic>
 80086ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff ffb8 	bl	8008632 <prvInitialiseMutex>

		return xNewQueue;
 80086c2:	68fb      	ldr	r3, [r7, #12]
	}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10b      	bne.n	80086f6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	60fb      	str	r3, [r7, #12]
}
 80086f0:	bf00      	nop
 80086f2:	bf00      	nop
 80086f4:	e7fd      	b.n	80086f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	689c      	ldr	r4, [r3, #8]
 80086fa:	f001 fc15 	bl	8009f28 <xTaskGetCurrentTaskHandle>
 80086fe:	4603      	mov	r3, r0
 8008700:	429c      	cmp	r4, r3
 8008702:	d111      	bne.n	8008728 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	1e5a      	subs	r2, r3, #1
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008716:	2300      	movs	r3, #0
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6938      	ldr	r0, [r7, #16]
 800871e:	f000 f841 	bl	80087a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008722:	2301      	movs	r3, #1
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e001      	b.n	800872c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008728:	2300      	movs	r3, #0
 800872a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800872c:	697b      	ldr	r3, [r7, #20]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bd90      	pop	{r4, r7, pc}

08008736 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008736:	b590      	push	{r4, r7, lr}
 8008738:	b087      	sub	sp, #28
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	60fb      	str	r3, [r7, #12]
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	e7fd      	b.n	800875e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	689c      	ldr	r4, [r3, #8]
 8008766:	f001 fbdf 	bl	8009f28 <xTaskGetCurrentTaskHandle>
 800876a:	4603      	mov	r3, r0
 800876c:	429c      	cmp	r4, r3
 800876e:	d107      	bne.n	8008780 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	1c5a      	adds	r2, r3, #1
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800877a:	2301      	movs	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	e00c      	b.n	800879a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6938      	ldr	r0, [r7, #16]
 8008784:	f000 fa90 	bl	8008ca8 <xQueueSemaphoreTake>
 8008788:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800879a:	697b      	ldr	r3, [r7, #20]
	}
 800879c:	4618      	mov	r0, r3
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08e      	sub	sp, #56	@ 0x38
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087b2:	2300      	movs	r3, #0
 80087b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10b      	bne.n	80087d8 <xQueueGenericSend+0x34>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d103      	bne.n	80087e6 <xQueueGenericSend+0x42>
 80087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <xQueueGenericSend+0x46>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <xQueueGenericSend+0x48>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <xQueueGenericSend+0x64>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008802:	bf00      	nop
 8008804:	bf00      	nop
 8008806:	e7fd      	b.n	8008804 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d103      	bne.n	8008816 <xQueueGenericSend+0x72>
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <xQueueGenericSend+0x76>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <xQueueGenericSend+0x78>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <xQueueGenericSend+0x94>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	623b      	str	r3, [r7, #32]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008838:	f001 fb86 	bl	8009f48 <xTaskGetSchedulerState>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <xQueueGenericSend+0xa4>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <xQueueGenericSend+0xa8>
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <xQueueGenericSend+0xaa>
 800884c:	2300      	movs	r3, #0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <xQueueGenericSend+0xc6>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	61fb      	str	r3, [r7, #28]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800886a:	f002 f9dd 	bl	800ac28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <xQueueGenericSend+0xdc>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b02      	cmp	r3, #2
 800887e:	d129      	bne.n	80088d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008886:	f000 fb37 	bl	8008ef8 <prvCopyDataToQueue>
 800888a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	d010      	beq.n	80088b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	3324      	adds	r3, #36	@ 0x24
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f985 	bl	8009ba8 <xTaskRemoveFromEventList>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d013      	beq.n	80088cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088a4:	4b3f      	ldr	r3, [pc, #252]	@ (80089a4 <xQueueGenericSend+0x200>)
 80088a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	e00a      	b.n	80088cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088bc:	4b39      	ldr	r3, [pc, #228]	@ (80089a4 <xQueueGenericSend+0x200>)
 80088be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088cc:	f002 f9de 	bl	800ac8c <vPortExitCritical>
				return pdPASS;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e063      	b.n	800899c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088da:	f002 f9d7 	bl	800ac8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	e05c      	b.n	800899c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d106      	bne.n	80088f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 f9bf 	bl	8009c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088f6:	f002 f9c9 	bl	800ac8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088fa:	f000 ff2f 	bl	800975c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088fe:	f002 f993 	bl	800ac28 <vPortEnterCritical>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008908:	b25b      	sxtb	r3, r3
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890e:	d103      	bne.n	8008918 <xQueueGenericSend+0x174>
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800891e:	b25b      	sxtb	r3, r3
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d103      	bne.n	800892e <xQueueGenericSend+0x18a>
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800892e:	f002 f9ad 	bl	800ac8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008932:	1d3a      	adds	r2, r7, #4
 8008934:	f107 0314 	add.w	r3, r7, #20
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f9ae 	bl	8009c9c <xTaskCheckForTimeOut>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d124      	bne.n	8008990 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008946:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008948:	f000 fbce 	bl	80090e8 <prvIsQueueFull>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d018      	beq.n	8008984 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	3310      	adds	r3, #16
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f001 f8d2 	bl	8009b04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008962:	f000 fb59 	bl	8009018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008966:	f000 ff07 	bl	8009778 <xTaskResumeAll>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f af7c 	bne.w	800886a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008972:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <xQueueGenericSend+0x200>)
 8008974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	e772      	b.n	800886a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008984:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008986:	f000 fb47 	bl	8009018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800898a:	f000 fef5 	bl	8009778 <xTaskResumeAll>
 800898e:	e76c      	b.n	800886a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008992:	f000 fb41 	bl	8009018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008996:	f000 feef 	bl	8009778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800899a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800899c:	4618      	mov	r0, r3
 800899e:	3738      	adds	r7, #56	@ 0x38
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b090      	sub	sp, #64	@ 0x40
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10b      	bne.n	80089d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d103      	bne.n	80089e6 <xQueueGenericSendFromISR+0x3e>
 80089de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <xQueueGenericSendFromISR+0x42>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <xQueueGenericSendFromISR+0x44>
 80089ea:	2300      	movs	r3, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a02:	bf00      	nop
 8008a04:	bf00      	nop
 8008a06:	e7fd      	b.n	8008a04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d103      	bne.n	8008a16 <xQueueGenericSendFromISR+0x6e>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d101      	bne.n	8008a1a <xQueueGenericSendFromISR+0x72>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <xQueueGenericSendFromISR+0x74>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	623b      	str	r3, [r7, #32]
}
 8008a32:	bf00      	nop
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a38:	f002 f9d6 	bl	800ade8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a3c:	f3ef 8211 	mrs	r2, BASEPRI
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	61fa      	str	r2, [r7, #28]
 8008a52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <xQueueGenericSendFromISR+0xc2>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d12f      	bne.n	8008aca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a80:	f000 fa3a 	bl	8008ef8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d112      	bne.n	8008ab4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d016      	beq.n	8008ac4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	3324      	adds	r3, #36	@ 0x24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 f884 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00e      	beq.n	8008ac4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e007      	b.n	8008ac4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ab8:	3301      	adds	r3, #1
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	b25a      	sxtb	r2, r3
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ac8:	e001      	b.n	8008ace <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ad8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3740      	adds	r7, #64	@ 0x40
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08c      	sub	sp, #48	@ 0x30
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10b      	bne.n	8008b16 <xQueueReceive+0x32>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	623b      	str	r3, [r7, #32]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d103      	bne.n	8008b24 <xQueueReceive+0x40>
 8008b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <xQueueReceive+0x44>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e000      	b.n	8008b2a <xQueueReceive+0x46>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10b      	bne.n	8008b46 <xQueueReceive+0x62>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	61fb      	str	r3, [r7, #28]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b46:	f001 f9ff 	bl	8009f48 <xTaskGetSchedulerState>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <xQueueReceive+0x72>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <xQueueReceive+0x76>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <xQueueReceive+0x78>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <xQueueReceive+0x94>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	61bb      	str	r3, [r7, #24]
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	e7fd      	b.n	8008b74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b78:	f002 f856 	bl	800ac28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01f      	beq.n	8008bc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b8c:	f000 fa1e 	bl	8008fcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	1e5a      	subs	r2, r3, #1
 8008b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00f      	beq.n	8008bc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba2:	3310      	adds	r3, #16
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 ffff 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ca4 <xQueueReceive+0x1c0>)
 8008bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bc0:	f002 f864 	bl	800ac8c <vPortExitCritical>
				return pdPASS;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e069      	b.n	8008c9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bce:	f002 f85d 	bl	800ac8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e062      	b.n	8008c9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d106      	bne.n	8008bea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 f845 	bl	8009c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bea:	f002 f84f 	bl	800ac8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bee:	f000 fdb5 	bl	800975c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bf2:	f002 f819 	bl	800ac28 <vPortEnterCritical>
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bfc:	b25b      	sxtb	r3, r3
 8008bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c02:	d103      	bne.n	8008c0c <xQueueReceive+0x128>
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d103      	bne.n	8008c22 <xQueueReceive+0x13e>
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c22:	f002 f833 	bl	800ac8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c26:	1d3a      	adds	r2, r7, #4
 8008c28:	f107 0310 	add.w	r3, r7, #16
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 f834 	bl	8009c9c <xTaskCheckForTimeOut>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d123      	bne.n	8008c82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c3c:	f000 fa3e 	bl	80090bc <prvIsQueueEmpty>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d017      	beq.n	8008c76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c48:	3324      	adds	r3, #36	@ 0x24
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 ff58 	bl	8009b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c56:	f000 f9df 	bl	8009018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c5a:	f000 fd8d 	bl	8009778 <xTaskResumeAll>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d189      	bne.n	8008b78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <xQueueReceive+0x1c0>)
 8008c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	e780      	b.n	8008b78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c78:	f000 f9ce 	bl	8009018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c7c:	f000 fd7c 	bl	8009778 <xTaskResumeAll>
 8008c80:	e77a      	b.n	8008b78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c84:	f000 f9c8 	bl	8009018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c88:	f000 fd76 	bl	8009778 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c8e:	f000 fa15 	bl	80090bc <prvIsQueueEmpty>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f43f af6f 	beq.w	8008b78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3730      	adds	r7, #48	@ 0x30
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08e      	sub	sp, #56	@ 0x38
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	623b      	str	r3, [r7, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	61fb      	str	r3, [r7, #28]
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	e7fd      	b.n	8008cf8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cfc:	f001 f924 	bl	8009f48 <xTaskGetSchedulerState>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d102      	bne.n	8008d0c <xQueueSemaphoreTake+0x64>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <xQueueSemaphoreTake+0x68>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <xQueueSemaphoreTake+0x6a>
 8008d10:	2300      	movs	r3, #0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	61bb      	str	r3, [r7, #24]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d2e:	f001 ff7b 	bl	800ac28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d024      	beq.n	8008d88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008d4e:	f001 fa75 	bl	800a23c <pvTaskIncrementMutexHeldCount>
 8008d52:	4602      	mov	r2, r0
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00f      	beq.n	8008d80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d62:	3310      	adds	r3, #16
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 ff1f 	bl	8009ba8 <xTaskRemoveFromEventList>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d70:	4b54      	ldr	r3, [pc, #336]	@ (8008ec4 <xQueueSemaphoreTake+0x21c>)
 8008d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d80:	f001 ff84 	bl	800ac8c <vPortExitCritical>
				return pdPASS;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e098      	b.n	8008eba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d112      	bne.n	8008db4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	617b      	str	r3, [r7, #20]
}
 8008da6:	bf00      	nop
 8008da8:	bf00      	nop
 8008daa:	e7fd      	b.n	8008da8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008dac:	f001 ff6e 	bl	800ac8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e082      	b.n	8008eba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dba:	f107 030c 	add.w	r3, r7, #12
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 ff56 	bl	8009c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dc8:	f001 ff60 	bl	800ac8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dcc:	f000 fcc6 	bl	800975c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dd0:	f001 ff2a 	bl	800ac28 <vPortEnterCritical>
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d103      	bne.n	8008dea <xQueueSemaphoreTake+0x142>
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d103      	bne.n	8008e00 <xQueueSemaphoreTake+0x158>
 8008df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e00:	f001 ff44 	bl	800ac8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e04:	463a      	mov	r2, r7
 8008e06:	f107 030c 	add.w	r3, r7, #12
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 ff45 	bl	8009c9c <xTaskCheckForTimeOut>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d132      	bne.n	8008e7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e1a:	f000 f94f 	bl	80090bc <prvIsQueueEmpty>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d026      	beq.n	8008e72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008e2c:	f001 fefc 	bl	800ac28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 f8a5 	bl	8009f84 <xTaskPriorityInherit>
 8008e3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008e3c:	f001 ff26 	bl	800ac8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e42:	3324      	adds	r3, #36	@ 0x24
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fe5b 	bl	8009b04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e50:	f000 f8e2 	bl	8009018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e54:	f000 fc90 	bl	8009778 <xTaskResumeAll>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f47f af67 	bne.w	8008d2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008e60:	4b18      	ldr	r3, [pc, #96]	@ (8008ec4 <xQueueSemaphoreTake+0x21c>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	e75d      	b.n	8008d2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e74:	f000 f8d0 	bl	8009018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e78:	f000 fc7e 	bl	8009778 <xTaskResumeAll>
 8008e7c:	e757      	b.n	8008d2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e80:	f000 f8ca 	bl	8009018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e84:	f000 fc78 	bl	8009778 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e8a:	f000 f917 	bl	80090bc <prvIsQueueEmpty>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f43f af4c 	beq.w	8008d2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00d      	beq.n	8008eb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008e9c:	f001 fec4 	bl	800ac28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008ea0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ea2:	f000 f811 	bl	8008ec8 <prvGetDisinheritPriorityAfterTimeout>
 8008ea6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 f940 	bl	800a134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008eb4:	f001 feea 	bl	800ac8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008eb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3738      	adds	r7, #56	@ 0x38
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d006      	beq.n	8008ee6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e001      	b.n	8008eea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008eea:	68fb      	ldr	r3, [r7, #12]
	}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10d      	bne.n	8008f32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d14d      	bne.n	8008fba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 f896 	bl	800a054 <xTaskPriorityDisinherit>
 8008f28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	609a      	str	r2, [r3, #8]
 8008f30:	e043      	b.n	8008fba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d119      	bne.n	8008f6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6858      	ldr	r0, [r3, #4]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f40:	461a      	mov	r2, r3
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	f004 ff1d 	bl	800dd82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f50:	441a      	add	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d32b      	bcc.n	8008fba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	e026      	b.n	8008fba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	68d8      	ldr	r0, [r3, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f74:	461a      	mov	r2, r3
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	f004 ff03 	bl	800dd82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f84:	425b      	negs	r3, r3
 8008f86:	441a      	add	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d207      	bcs.n	8008fa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa0:	425b      	negs	r3, r3
 8008fa2:	441a      	add	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d105      	bne.n	8008fba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008fc2:	697b      	ldr	r3, [r7, #20]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d018      	beq.n	8009010 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe6:	441a      	add	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d303      	bcc.n	8009000 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68d9      	ldr	r1, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009008:	461a      	mov	r2, r3
 800900a:	6838      	ldr	r0, [r7, #0]
 800900c:	f004 feb9 	bl	800dd82 <memcpy>
	}
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009020:	f001 fe02 	bl	800ac28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800902a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800902c:	e011      	b.n	8009052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d012      	beq.n	800905c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3324      	adds	r3, #36	@ 0x24
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fdb4 	bl	8009ba8 <xTaskRemoveFromEventList>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009046:	f000 fe8d 	bl	8009d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	3b01      	subs	r3, #1
 800904e:	b2db      	uxtb	r3, r3
 8009050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009056:	2b00      	cmp	r3, #0
 8009058:	dce9      	bgt.n	800902e <prvUnlockQueue+0x16>
 800905a:	e000      	b.n	800905e <prvUnlockQueue+0x46>
					break;
 800905c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	22ff      	movs	r2, #255	@ 0xff
 8009062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009066:	f001 fe11 	bl	800ac8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800906a:	f001 fddd 	bl	800ac28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009076:	e011      	b.n	800909c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d012      	beq.n	80090a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3310      	adds	r3, #16
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fd8f 	bl	8009ba8 <xTaskRemoveFromEventList>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009090:	f000 fe68 	bl	8009d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	3b01      	subs	r3, #1
 8009098:	b2db      	uxtb	r3, r3
 800909a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800909c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	dce9      	bgt.n	8009078 <prvUnlockQueue+0x60>
 80090a4:	e000      	b.n	80090a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	22ff      	movs	r2, #255	@ 0xff
 80090ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80090b0:	f001 fdec 	bl	800ac8c <vPortExitCritical>
}
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090c4:	f001 fdb0 	bl	800ac28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e001      	b.n	80090da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090da:	f001 fdd7 	bl	800ac8c <vPortExitCritical>

	return xReturn;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090f0:	f001 fd9a 	bl	800ac28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d102      	bne.n	8009106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009100:	2301      	movs	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	e001      	b.n	800910a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800910a:	f001 fdbf 	bl	800ac8c <vPortExitCritical>

	return xReturn;
 800910e:	68fb      	ldr	r3, [r7, #12]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e014      	b.n	8009152 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009128:	4a0f      	ldr	r2, [pc, #60]	@ (8009168 <vQueueAddToRegistry+0x50>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009134:	490c      	ldr	r1, [pc, #48]	@ (8009168 <vQueueAddToRegistry+0x50>)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800913e:	4a0a      	ldr	r2, [pc, #40]	@ (8009168 <vQueueAddToRegistry+0x50>)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800914a:	e006      	b.n	800915a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b07      	cmp	r3, #7
 8009156:	d9e7      	bls.n	8009128 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20002b0c 	.word	0x20002b0c

0800916c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800917c:	f001 fd54 	bl	800ac28 <vPortEnterCritical>
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009186:	b25b      	sxtb	r3, r3
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d103      	bne.n	8009196 <vQueueWaitForMessageRestricted+0x2a>
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800919c:	b25b      	sxtb	r3, r3
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a2:	d103      	bne.n	80091ac <vQueueWaitForMessageRestricted+0x40>
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ac:	f001 fd6e 	bl	800ac8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d106      	bne.n	80091c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	3324      	adds	r3, #36	@ 0x24
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	68b9      	ldr	r1, [r7, #8]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fcc5 	bl	8009b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80091c6:	6978      	ldr	r0, [r7, #20]
 80091c8:	f7ff ff26 	bl	8009018 <prvUnlockQueue>
	}
 80091cc:	bf00      	nop
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08e      	sub	sp, #56	@ 0x38
 80091d8:	af04      	add	r7, sp, #16
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10b      	bne.n	8009200 <xTaskCreateStatic+0x2c>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	623b      	str	r3, [r7, #32]
}
 80091fa:	bf00      	nop
 80091fc:	bf00      	nop
 80091fe:	e7fd      	b.n	80091fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	61fb      	str	r3, [r7, #28]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800921e:	235c      	movs	r3, #92	@ 0x5c
 8009220:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	2b5c      	cmp	r3, #92	@ 0x5c
 8009226:	d00b      	beq.n	8009240 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	61bb      	str	r3, [r7, #24]
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009240:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01e      	beq.n	8009286 <xTaskCreateStatic+0xb2>
 8009248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924a:	2b00      	cmp	r3, #0
 800924c:	d01b      	beq.n	8009286 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800924e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009250:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009256:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925a:	2202      	movs	r2, #2
 800925c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009260:	2300      	movs	r3, #0
 8009262:	9303      	str	r3, [sp, #12]
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	9302      	str	r3, [sp, #8]
 8009268:	f107 0314 	add.w	r3, r7, #20
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f850 	bl	800931e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800927e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009280:	f000 f8de 	bl	8009440 <prvAddNewTaskToReadyList>
 8009284:	e001      	b.n	800928a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800928a:	697b      	ldr	r3, [r7, #20]
	}
 800928c:	4618      	mov	r0, r3
 800928e:	3728      	adds	r7, #40	@ 0x28
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08c      	sub	sp, #48	@ 0x30
 8009298:	af04      	add	r7, sp, #16
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 fddf 	bl	800ae6c <pvPortMalloc>
 80092ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00e      	beq.n	80092d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092b6:	205c      	movs	r0, #92	@ 0x5c
 80092b8:	f001 fdd8 	bl	800ae6c <pvPortMalloc>
 80092bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80092ca:	e005      	b.n	80092d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092cc:	6978      	ldr	r0, [r7, #20]
 80092ce:	f001 fe9b 	bl	800b008 <vPortFree>
 80092d2:	e001      	b.n	80092d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d017      	beq.n	800930e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	2300      	movs	r3, #0
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	9302      	str	r3, [sp, #8]
 80092f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f80e 	bl	800931e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009302:	69f8      	ldr	r0, [r7, #28]
 8009304:	f000 f89c 	bl	8009440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009308:	2301      	movs	r3, #1
 800930a:	61bb      	str	r3, [r7, #24]
 800930c:	e002      	b.n	8009314 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009314:	69bb      	ldr	r3, [r7, #24]
	}
 8009316:	4618      	mov	r0, r3
 8009318:	3720      	adds	r7, #32
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b088      	sub	sp, #32
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800932c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	461a      	mov	r2, r3
 8009336:	21a5      	movs	r1, #165	@ 0xa5
 8009338:	f003 fd2c 	bl	800cd94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009346:	3b01      	subs	r3, #1
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	f023 0307 	bic.w	r3, r3, #7
 8009354:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	617b      	str	r3, [r7, #20]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01f      	beq.n	80093be <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e012      	b.n	80093aa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	7819      	ldrb	r1, [r3, #0]
 800938c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	4413      	add	r3, r2
 8009392:	3334      	adds	r3, #52	@ 0x34
 8009394:	460a      	mov	r2, r1
 8009396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	4413      	add	r3, r2
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d006      	beq.n	80093b2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	3301      	adds	r3, #1
 80093a8:	61fb      	str	r3, [r7, #28]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	2b0f      	cmp	r3, #15
 80093ae:	d9e9      	bls.n	8009384 <prvInitialiseNewTask+0x66>
 80093b0:	e000      	b.n	80093b4 <prvInitialiseNewTask+0x96>
			{
				break;
 80093b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80093bc:	e003      	b.n	80093c6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	2b37      	cmp	r3, #55	@ 0x37
 80093ca:	d901      	bls.n	80093d0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093cc:	2337      	movs	r3, #55	@ 0x37
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093da:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	2200      	movs	r2, #0
 80093e0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe ff4a 	bl	8008280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	3318      	adds	r3, #24
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe ff45 	bl	8008280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800940a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2200      	movs	r2, #0
 8009410:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	68f9      	ldr	r1, [r7, #12]
 800941e:	69b8      	ldr	r0, [r7, #24]
 8009420:	f001 face 	bl	800a9c0 <pxPortInitialiseStack>
 8009424:	4602      	mov	r2, r0
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800942a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009436:	bf00      	nop
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009448:	f001 fbee 	bl	800ac28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800944c:	4b2d      	ldr	r3, [pc, #180]	@ (8009504 <prvAddNewTaskToReadyList+0xc4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	4a2c      	ldr	r2, [pc, #176]	@ (8009504 <prvAddNewTaskToReadyList+0xc4>)
 8009454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009456:	4b2c      	ldr	r3, [pc, #176]	@ (8009508 <prvAddNewTaskToReadyList+0xc8>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800945e:	4a2a      	ldr	r2, [pc, #168]	@ (8009508 <prvAddNewTaskToReadyList+0xc8>)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009464:	4b27      	ldr	r3, [pc, #156]	@ (8009504 <prvAddNewTaskToReadyList+0xc4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d110      	bne.n	800948e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800946c:	f000 fc9e 	bl	8009dac <prvInitialiseTaskLists>
 8009470:	e00d      	b.n	800948e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009472:	4b26      	ldr	r3, [pc, #152]	@ (800950c <prvAddNewTaskToReadyList+0xcc>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d109      	bne.n	800948e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800947a:	4b23      	ldr	r3, [pc, #140]	@ (8009508 <prvAddNewTaskToReadyList+0xc8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	429a      	cmp	r2, r3
 8009486:	d802      	bhi.n	800948e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009488:	4a1f      	ldr	r2, [pc, #124]	@ (8009508 <prvAddNewTaskToReadyList+0xc8>)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800948e:	4b20      	ldr	r3, [pc, #128]	@ (8009510 <prvAddNewTaskToReadyList+0xd0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	4a1e      	ldr	r2, [pc, #120]	@ (8009510 <prvAddNewTaskToReadyList+0xd0>)
 8009496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009498:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <prvAddNewTaskToReadyList+0xd0>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009514 <prvAddNewTaskToReadyList+0xd4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d903      	bls.n	80094b4 <prvAddNewTaskToReadyList+0x74>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b0:	4a18      	ldr	r2, [pc, #96]	@ (8009514 <prvAddNewTaskToReadyList+0xd4>)
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4a15      	ldr	r2, [pc, #84]	@ (8009518 <prvAddNewTaskToReadyList+0xd8>)
 80094c2:	441a      	add	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7fe fee5 	bl	800829a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094d0:	f001 fbdc 	bl	800ac8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094d4:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <prvAddNewTaskToReadyList+0xcc>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00e      	beq.n	80094fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <prvAddNewTaskToReadyList+0xc8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d207      	bcs.n	80094fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094ea:	4b0c      	ldr	r3, [pc, #48]	@ (800951c <prvAddNewTaskToReadyList+0xdc>)
 80094ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20003020 	.word	0x20003020
 8009508:	20002b4c 	.word	0x20002b4c
 800950c:	2000302c 	.word	0x2000302c
 8009510:	2000303c 	.word	0x2000303c
 8009514:	20003028 	.word	0x20003028
 8009518:	20002b50 	.word	0x20002b50
 800951c:	e000ed04 	.word	0xe000ed04

08009520 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	@ 0x28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10b      	bne.n	800954c <vTaskDelayUntil+0x2c>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	617b      	str	r3, [r7, #20]
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	e7fd      	b.n	8009548 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <vTaskDelayUntil+0x4a>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	613b      	str	r3, [r7, #16]
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	e7fd      	b.n	8009566 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800956a:	4b2a      	ldr	r3, [pc, #168]	@ (8009614 <vTaskDelayUntil+0xf4>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <vTaskDelayUntil+0x6a>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800958a:	f000 f8e7 	bl	800975c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800958e:	4b22      	ldr	r3, [pc, #136]	@ (8009618 <vTaskDelayUntil+0xf8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	4413      	add	r3, r2
 800959c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6a3a      	ldr	r2, [r7, #32]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d20b      	bcs.n	80095c0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d211      	bcs.n	80095d6 <vTaskDelayUntil+0xb6>
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d90d      	bls.n	80095d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80095ba:	2301      	movs	r3, #1
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80095be:	e00a      	b.n	80095d6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d303      	bcc.n	80095d2 <vTaskDelayUntil+0xb2>
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d901      	bls.n	80095d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80095d2:	2301      	movs	r3, #1
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80095dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d006      	beq.n	80095f0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fe3a 	bl	800a264 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80095f0:	f000 f8c2 	bl	8009778 <xTaskResumeAll>
 80095f4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d107      	bne.n	800960c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80095fc:	4b07      	ldr	r3, [pc, #28]	@ (800961c <vTaskDelayUntil+0xfc>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800960c:	bf00      	nop
 800960e:	3728      	adds	r7, #40	@ 0x28
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20003048 	.word	0x20003048
 8009618:	20003024 	.word	0x20003024
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d018      	beq.n	8009664 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009632:	4b14      	ldr	r3, [pc, #80]	@ (8009684 <vTaskDelay+0x64>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <vTaskDelay+0x32>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	60bb      	str	r3, [r7, #8]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009652:	f000 f883 	bl	800975c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fe03 	bl	800a264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800965e:	f000 f88b 	bl	8009778 <xTaskResumeAll>
 8009662:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d107      	bne.n	800967a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800966a:	4b07      	ldr	r3, [pc, #28]	@ (8009688 <vTaskDelay+0x68>)
 800966c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20003048 	.word	0x20003048
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	@ 0x28
 8009690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800969a:	463a      	mov	r2, r7
 800969c:	1d39      	adds	r1, r7, #4
 800969e:	f107 0308 	add.w	r3, r7, #8
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fd98 	bl	80081d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	9202      	str	r2, [sp, #8]
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	2300      	movs	r3, #0
 80096b8:	460a      	mov	r2, r1
 80096ba:	4922      	ldr	r1, [pc, #136]	@ (8009744 <vTaskStartScheduler+0xb8>)
 80096bc:	4822      	ldr	r0, [pc, #136]	@ (8009748 <vTaskStartScheduler+0xbc>)
 80096be:	f7ff fd89 	bl	80091d4 <xTaskCreateStatic>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4a21      	ldr	r2, [pc, #132]	@ (800974c <vTaskStartScheduler+0xc0>)
 80096c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096c8:	4b20      	ldr	r3, [pc, #128]	@ (800974c <vTaskStartScheduler+0xc0>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096d0:	2301      	movs	r3, #1
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e001      	b.n	80096da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d102      	bne.n	80096e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096e0:	f000 fe14 	bl	800a30c <xTimerCreateTimerTask>
 80096e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d116      	bne.n	800971a <vTaskStartScheduler+0x8e>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	613b      	str	r3, [r7, #16]
}
 80096fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009700:	4b13      	ldr	r3, [pc, #76]	@ (8009750 <vTaskStartScheduler+0xc4>)
 8009702:	f04f 32ff 	mov.w	r2, #4294967295
 8009706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009708:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <vTaskStartScheduler+0xc8>)
 800970a:	2201      	movs	r2, #1
 800970c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800970e:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <vTaskStartScheduler+0xcc>)
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009714:	f001 f9e4 	bl	800aae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009718:	e00f      	b.n	800973a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009720:	d10b      	bne.n	800973a <vTaskStartScheduler+0xae>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60fb      	str	r3, [r7, #12]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <vTaskStartScheduler+0xaa>
}
 800973a:	bf00      	nop
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	08011998 	.word	0x08011998
 8009748:	08009d7d 	.word	0x08009d7d
 800974c:	20003044 	.word	0x20003044
 8009750:	20003040 	.word	0x20003040
 8009754:	2000302c 	.word	0x2000302c
 8009758:	20003024 	.word	0x20003024

0800975c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009760:	4b04      	ldr	r3, [pc, #16]	@ (8009774 <vTaskSuspendAll+0x18>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	4a03      	ldr	r2, [pc, #12]	@ (8009774 <vTaskSuspendAll+0x18>)
 8009768:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800976a:	bf00      	nop
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	20003048 	.word	0x20003048

08009778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009782:	2300      	movs	r3, #0
 8009784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009786:	4b42      	ldr	r3, [pc, #264]	@ (8009890 <xTaskResumeAll+0x118>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10b      	bne.n	80097a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	603b      	str	r3, [r7, #0]
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	e7fd      	b.n	80097a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097a6:	f001 fa3f 	bl	800ac28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097aa:	4b39      	ldr	r3, [pc, #228]	@ (8009890 <xTaskResumeAll+0x118>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	4a37      	ldr	r2, [pc, #220]	@ (8009890 <xTaskResumeAll+0x118>)
 80097b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b4:	4b36      	ldr	r3, [pc, #216]	@ (8009890 <xTaskResumeAll+0x118>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d162      	bne.n	8009882 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097bc:	4b35      	ldr	r3, [pc, #212]	@ (8009894 <xTaskResumeAll+0x11c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d05e      	beq.n	8009882 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097c4:	e02f      	b.n	8009826 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	4b34      	ldr	r3, [pc, #208]	@ (8009898 <xTaskResumeAll+0x120>)
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3318      	adds	r3, #24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fdbe 	bl	8008354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3304      	adds	r3, #4
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe fdb9 	bl	8008354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e6:	4b2d      	ldr	r3, [pc, #180]	@ (800989c <xTaskResumeAll+0x124>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d903      	bls.n	80097f6 <xTaskResumeAll+0x7e>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	4a2a      	ldr	r2, [pc, #168]	@ (800989c <xTaskResumeAll+0x124>)
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4a27      	ldr	r2, [pc, #156]	@ (80098a0 <xTaskResumeAll+0x128>)
 8009804:	441a      	add	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3304      	adds	r3, #4
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f7fe fd44 	bl	800829a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009816:	4b23      	ldr	r3, [pc, #140]	@ (80098a4 <xTaskResumeAll+0x12c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981c:	429a      	cmp	r2, r3
 800981e:	d302      	bcc.n	8009826 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009820:	4b21      	ldr	r3, [pc, #132]	@ (80098a8 <xTaskResumeAll+0x130>)
 8009822:	2201      	movs	r2, #1
 8009824:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009826:	4b1c      	ldr	r3, [pc, #112]	@ (8009898 <xTaskResumeAll+0x120>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1cb      	bne.n	80097c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009834:	f000 fb58 	bl	8009ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009838:	4b1c      	ldr	r3, [pc, #112]	@ (80098ac <xTaskResumeAll+0x134>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d010      	beq.n	8009866 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009844:	f000 f846 	bl	80098d4 <xTaskIncrementTick>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800984e:	4b16      	ldr	r3, [pc, #88]	@ (80098a8 <xTaskResumeAll+0x130>)
 8009850:	2201      	movs	r2, #1
 8009852:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3b01      	subs	r3, #1
 8009858:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1f1      	bne.n	8009844 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009860:	4b12      	ldr	r3, [pc, #72]	@ (80098ac <xTaskResumeAll+0x134>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009866:	4b10      	ldr	r3, [pc, #64]	@ (80098a8 <xTaskResumeAll+0x130>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800986e:	2301      	movs	r3, #1
 8009870:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009872:	4b0f      	ldr	r3, [pc, #60]	@ (80098b0 <xTaskResumeAll+0x138>)
 8009874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009882:	f001 fa03 	bl	800ac8c <vPortExitCritical>

	return xAlreadyYielded;
 8009886:	68bb      	ldr	r3, [r7, #8]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20003048 	.word	0x20003048
 8009894:	20003020 	.word	0x20003020
 8009898:	20002fe0 	.word	0x20002fe0
 800989c:	20003028 	.word	0x20003028
 80098a0:	20002b50 	.word	0x20002b50
 80098a4:	20002b4c 	.word	0x20002b4c
 80098a8:	20003034 	.word	0x20003034
 80098ac:	20003030 	.word	0x20003030
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098ba:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <xTaskGetTickCount+0x1c>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098c0:	687b      	ldr	r3, [r7, #4]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	370c      	adds	r7, #12
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20003024 	.word	0x20003024

080098d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098de:	4b4f      	ldr	r3, [pc, #316]	@ (8009a1c <xTaskIncrementTick+0x148>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f040 8090 	bne.w	8009a08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098e8:	4b4d      	ldr	r3, [pc, #308]	@ (8009a20 <xTaskIncrementTick+0x14c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098f0:	4a4b      	ldr	r2, [pc, #300]	@ (8009a20 <xTaskIncrementTick+0x14c>)
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d121      	bne.n	8009940 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098fc:	4b49      	ldr	r3, [pc, #292]	@ (8009a24 <xTaskIncrementTick+0x150>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	603b      	str	r3, [r7, #0]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <xTaskIncrementTick+0x46>
 800991e:	4b41      	ldr	r3, [pc, #260]	@ (8009a24 <xTaskIncrementTick+0x150>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	4b40      	ldr	r3, [pc, #256]	@ (8009a28 <xTaskIncrementTick+0x154>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a3e      	ldr	r2, [pc, #248]	@ (8009a24 <xTaskIncrementTick+0x150>)
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a28 <xTaskIncrementTick+0x154>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	4b3e      	ldr	r3, [pc, #248]	@ (8009a2c <xTaskIncrementTick+0x158>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	4a3c      	ldr	r2, [pc, #240]	@ (8009a2c <xTaskIncrementTick+0x158>)
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	f000 fad4 	bl	8009ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009940:	4b3b      	ldr	r3, [pc, #236]	@ (8009a30 <xTaskIncrementTick+0x15c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	429a      	cmp	r2, r3
 8009948:	d349      	bcc.n	80099de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994a:	4b36      	ldr	r3, [pc, #216]	@ (8009a24 <xTaskIncrementTick+0x150>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009954:	4b36      	ldr	r3, [pc, #216]	@ (8009a30 <xTaskIncrementTick+0x15c>)
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	601a      	str	r2, [r3, #0]
					break;
 800995c:	e03f      	b.n	80099de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995e:	4b31      	ldr	r3, [pc, #196]	@ (8009a24 <xTaskIncrementTick+0x150>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d203      	bcs.n	800997e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009976:	4a2e      	ldr	r2, [pc, #184]	@ (8009a30 <xTaskIncrementTick+0x15c>)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800997c:	e02f      	b.n	80099de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	3304      	adds	r3, #4
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fce6 	bl	8008354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	3318      	adds	r3, #24
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fcdd 	bl	8008354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800999e:	4b25      	ldr	r3, [pc, #148]	@ (8009a34 <xTaskIncrementTick+0x160>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d903      	bls.n	80099ae <xTaskIncrementTick+0xda>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099aa:	4a22      	ldr	r2, [pc, #136]	@ (8009a34 <xTaskIncrementTick+0x160>)
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009a38 <xTaskIncrementTick+0x164>)
 80099bc:	441a      	add	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f7fe fc68 	bl	800829a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ce:	4b1b      	ldr	r3, [pc, #108]	@ (8009a3c <xTaskIncrementTick+0x168>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d3b8      	bcc.n	800994a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099dc:	e7b5      	b.n	800994a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099de:	4b17      	ldr	r3, [pc, #92]	@ (8009a3c <xTaskIncrementTick+0x168>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e4:	4914      	ldr	r1, [pc, #80]	@ (8009a38 <xTaskIncrementTick+0x164>)
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	440b      	add	r3, r1
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d901      	bls.n	80099fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099f6:	2301      	movs	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099fa:	4b11      	ldr	r3, [pc, #68]	@ (8009a40 <xTaskIncrementTick+0x16c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	e004      	b.n	8009a12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a08:	4b0e      	ldr	r3, [pc, #56]	@ (8009a44 <xTaskIncrementTick+0x170>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8009a44 <xTaskIncrementTick+0x170>)
 8009a10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a12:	697b      	ldr	r3, [r7, #20]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20003048 	.word	0x20003048
 8009a20:	20003024 	.word	0x20003024
 8009a24:	20002fd8 	.word	0x20002fd8
 8009a28:	20002fdc 	.word	0x20002fdc
 8009a2c:	20003038 	.word	0x20003038
 8009a30:	20003040 	.word	0x20003040
 8009a34:	20003028 	.word	0x20003028
 8009a38:	20002b50 	.word	0x20002b50
 8009a3c:	20002b4c 	.word	0x20002b4c
 8009a40:	20003034 	.word	0x20003034
 8009a44:	20003030 	.word	0x20003030

08009a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a4e:	4b28      	ldr	r3, [pc, #160]	@ (8009af0 <vTaskSwitchContext+0xa8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a56:	4b27      	ldr	r3, [pc, #156]	@ (8009af4 <vTaskSwitchContext+0xac>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a5c:	e042      	b.n	8009ae4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a5e:	4b25      	ldr	r3, [pc, #148]	@ (8009af4 <vTaskSwitchContext+0xac>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a64:	4b24      	ldr	r3, [pc, #144]	@ (8009af8 <vTaskSwitchContext+0xb0>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e011      	b.n	8009a90 <vTaskSwitchContext+0x48>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <vTaskSwitchContext+0x42>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	607b      	str	r3, [r7, #4]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <vTaskSwitchContext+0x3e>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	491a      	ldr	r1, [pc, #104]	@ (8009afc <vTaskSwitchContext+0xb4>)
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0e3      	beq.n	8009a6c <vTaskSwitchContext+0x24>
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4a13      	ldr	r2, [pc, #76]	@ (8009afc <vTaskSwitchContext+0xb4>)
 8009ab0:	4413      	add	r3, r2
 8009ab2:	60bb      	str	r3, [r7, #8]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	605a      	str	r2, [r3, #4]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d104      	bne.n	8009ad4 <vTaskSwitchContext+0x8c>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	605a      	str	r2, [r3, #4]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	4a09      	ldr	r2, [pc, #36]	@ (8009b00 <vTaskSwitchContext+0xb8>)
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	4a06      	ldr	r2, [pc, #24]	@ (8009af8 <vTaskSwitchContext+0xb0>)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6013      	str	r3, [r2, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	20003048 	.word	0x20003048
 8009af4:	20003034 	.word	0x20003034
 8009af8:	20003028 	.word	0x20003028
 8009afc:	20002b50 	.word	0x20002b50
 8009b00:	20002b4c 	.word	0x20002b4c

08009b04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10b      	bne.n	8009b2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	60fb      	str	r3, [r7, #12]
}
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	e7fd      	b.n	8009b28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b2c:	4b07      	ldr	r3, [pc, #28]	@ (8009b4c <vTaskPlaceOnEventList+0x48>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3318      	adds	r3, #24
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7fe fbd4 	bl	80082e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	6838      	ldr	r0, [r7, #0]
 8009b3e:	f000 fb91 	bl	800a264 <prvAddCurrentTaskToDelayedList>
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20002b4c 	.word	0x20002b4c

08009b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10b      	bne.n	8009b7a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	617b      	str	r3, [r7, #20]
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	e7fd      	b.n	8009b76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3318      	adds	r3, #24
 8009b80:	4619      	mov	r1, r3
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f7fe fb89 	bl	800829a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	68b8      	ldr	r0, [r7, #8]
 8009b98:	f000 fb64 	bl	800a264 <prvAddCurrentTaskToDelayedList>
	}
 8009b9c:	bf00      	nop
 8009b9e:	3718      	adds	r7, #24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20002b4c 	.word	0x20002b4c

08009ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	60fb      	str	r3, [r7, #12]
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	3318      	adds	r3, #24
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fbba 	bl	8008354 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c58 <xTaskRemoveFromEventList+0xb0>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d11d      	bne.n	8009c24 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	3304      	adds	r3, #4
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe fbb1 	bl	8008354 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf6:	4b19      	ldr	r3, [pc, #100]	@ (8009c5c <xTaskRemoveFromEventList+0xb4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d903      	bls.n	8009c06 <xTaskRemoveFromEventList+0x5e>
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c02:	4a16      	ldr	r2, [pc, #88]	@ (8009c5c <xTaskRemoveFromEventList+0xb4>)
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4a13      	ldr	r2, [pc, #76]	@ (8009c60 <xTaskRemoveFromEventList+0xb8>)
 8009c14:	441a      	add	r2, r3
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7fe fb3c 	bl	800829a <vListInsertEnd>
 8009c22:	e005      	b.n	8009c30 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	3318      	adds	r3, #24
 8009c28:	4619      	mov	r1, r3
 8009c2a:	480e      	ldr	r0, [pc, #56]	@ (8009c64 <xTaskRemoveFromEventList+0xbc>)
 8009c2c:	f7fe fb35 	bl	800829a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c34:	4b0c      	ldr	r3, [pc, #48]	@ (8009c68 <xTaskRemoveFromEventList+0xc0>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d905      	bls.n	8009c4a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c42:	4b0a      	ldr	r3, [pc, #40]	@ (8009c6c <xTaskRemoveFromEventList+0xc4>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e001      	b.n	8009c4e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c4e:	697b      	ldr	r3, [r7, #20]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20003048 	.word	0x20003048
 8009c5c:	20003028 	.word	0x20003028
 8009c60:	20002b50 	.word	0x20002b50
 8009c64:	20002fe0 	.word	0x20002fe0
 8009c68:	20002b4c 	.word	0x20002b4c
 8009c6c:	20003034 	.word	0x20003034

08009c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c78:	4b06      	ldr	r3, [pc, #24]	@ (8009c94 <vTaskInternalSetTimeOutState+0x24>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c80:	4b05      	ldr	r3, [pc, #20]	@ (8009c98 <vTaskInternalSetTimeOutState+0x28>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	605a      	str	r2, [r3, #4]
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	20003038 	.word	0x20003038
 8009c98:	20003024 	.word	0x20003024

08009c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10b      	bne.n	8009cc4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	613b      	str	r3, [r7, #16]
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	e7fd      	b.n	8009cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	60fb      	str	r3, [r7, #12]
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	e7fd      	b.n	8009cde <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009ce2:	f000 ffa1 	bl	800ac28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d5c <xTaskCheckForTimeOut+0xc0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfe:	d102      	bne.n	8009d06 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]
 8009d04:	e023      	b.n	8009d4e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b15      	ldr	r3, [pc, #84]	@ (8009d60 <xTaskCheckForTimeOut+0xc4>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d007      	beq.n	8009d22 <xTaskCheckForTimeOut+0x86>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d302      	bcc.n	8009d22 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e015      	b.n	8009d4e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d20b      	bcs.n	8009d44 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ff99 	bl	8009c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e004      	b.n	8009d4e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d4e:	f000 ff9d 	bl	800ac8c <vPortExitCritical>

	return xReturn;
 8009d52:	69fb      	ldr	r3, [r7, #28]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3720      	adds	r7, #32
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20003024 	.word	0x20003024
 8009d60:	20003038 	.word	0x20003038

08009d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d68:	4b03      	ldr	r3, [pc, #12]	@ (8009d78 <vTaskMissedYield+0x14>)
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	20003034 	.word	0x20003034

08009d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d84:	f000 f852 	bl	8009e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d88:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <prvIdleTask+0x28>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d9f9      	bls.n	8009d84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d90:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <prvIdleTask+0x2c>)
 8009d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009da0:	e7f0      	b.n	8009d84 <prvIdleTask+0x8>
 8009da2:	bf00      	nop
 8009da4:	20002b50 	.word	0x20002b50
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009db2:	2300      	movs	r3, #0
 8009db4:	607b      	str	r3, [r7, #4]
 8009db6:	e00c      	b.n	8009dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4a12      	ldr	r2, [pc, #72]	@ (8009e0c <prvInitialiseTaskLists+0x60>)
 8009dc4:	4413      	add	r3, r2
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe fa3a 	bl	8008240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	607b      	str	r3, [r7, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b37      	cmp	r3, #55	@ 0x37
 8009dd6:	d9ef      	bls.n	8009db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dd8:	480d      	ldr	r0, [pc, #52]	@ (8009e10 <prvInitialiseTaskLists+0x64>)
 8009dda:	f7fe fa31 	bl	8008240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dde:	480d      	ldr	r0, [pc, #52]	@ (8009e14 <prvInitialiseTaskLists+0x68>)
 8009de0:	f7fe fa2e 	bl	8008240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009de4:	480c      	ldr	r0, [pc, #48]	@ (8009e18 <prvInitialiseTaskLists+0x6c>)
 8009de6:	f7fe fa2b 	bl	8008240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dea:	480c      	ldr	r0, [pc, #48]	@ (8009e1c <prvInitialiseTaskLists+0x70>)
 8009dec:	f7fe fa28 	bl	8008240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009df0:	480b      	ldr	r0, [pc, #44]	@ (8009e20 <prvInitialiseTaskLists+0x74>)
 8009df2:	f7fe fa25 	bl	8008240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009df6:	4b0b      	ldr	r3, [pc, #44]	@ (8009e24 <prvInitialiseTaskLists+0x78>)
 8009df8:	4a05      	ldr	r2, [pc, #20]	@ (8009e10 <prvInitialiseTaskLists+0x64>)
 8009dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009e28 <prvInitialiseTaskLists+0x7c>)
 8009dfe:	4a05      	ldr	r2, [pc, #20]	@ (8009e14 <prvInitialiseTaskLists+0x68>)
 8009e00:	601a      	str	r2, [r3, #0]
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20002b50 	.word	0x20002b50
 8009e10:	20002fb0 	.word	0x20002fb0
 8009e14:	20002fc4 	.word	0x20002fc4
 8009e18:	20002fe0 	.word	0x20002fe0
 8009e1c:	20002ff4 	.word	0x20002ff4
 8009e20:	2000300c 	.word	0x2000300c
 8009e24:	20002fd8 	.word	0x20002fd8
 8009e28:	20002fdc 	.word	0x20002fdc

08009e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e32:	e019      	b.n	8009e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e34:	f000 fef8 	bl	800ac28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e38:	4b10      	ldr	r3, [pc, #64]	@ (8009e7c <prvCheckTasksWaitingTermination+0x50>)
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3304      	adds	r3, #4
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fa85 	bl	8008354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <prvCheckTasksWaitingTermination+0x54>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	4a0b      	ldr	r2, [pc, #44]	@ (8009e80 <prvCheckTasksWaitingTermination+0x54>)
 8009e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e54:	4b0b      	ldr	r3, [pc, #44]	@ (8009e84 <prvCheckTasksWaitingTermination+0x58>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e84 <prvCheckTasksWaitingTermination+0x58>)
 8009e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e5e:	f000 ff15 	bl	800ac8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f810 	bl	8009e88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e68:	4b06      	ldr	r3, [pc, #24]	@ (8009e84 <prvCheckTasksWaitingTermination+0x58>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1e1      	bne.n	8009e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20002ff4 	.word	0x20002ff4
 8009e80:	20003020 	.word	0x20003020
 8009e84:	20003008 	.word	0x20003008

08009e88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d108      	bne.n	8009eac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 f8b2 	bl	800b008 <vPortFree>
				vPortFree( pxTCB );
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 f8af 	bl	800b008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009eaa:	e019      	b.n	8009ee0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d103      	bne.n	8009ebe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 f8a6 	bl	800b008 <vPortFree>
	}
 8009ebc:	e010      	b.n	8009ee0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d00b      	beq.n	8009ee0 <prvDeleteTCB+0x58>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	e7fd      	b.n	8009edc <prvDeleteTCB+0x54>
	}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eee:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <prvResetNextTaskUnblockTime+0x38>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f24 <prvResetNextTaskUnblockTime+0x3c>)
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f00:	e008      	b.n	8009f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f02:	4b07      	ldr	r3, [pc, #28]	@ (8009f20 <prvResetNextTaskUnblockTime+0x38>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a04      	ldr	r2, [pc, #16]	@ (8009f24 <prvResetNextTaskUnblockTime+0x3c>)
 8009f12:	6013      	str	r3, [r2, #0]
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	20002fd8 	.word	0x20002fd8
 8009f24:	20003040 	.word	0x20003040

08009f28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009f2e:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <xTaskGetCurrentTaskHandle+0x1c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009f34:	687b      	ldr	r3, [r7, #4]
	}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20002b4c 	.word	0x20002b4c

08009f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f7c <xTaskGetSchedulerState+0x34>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d102      	bne.n	8009f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f56:	2301      	movs	r3, #1
 8009f58:	607b      	str	r3, [r7, #4]
 8009f5a:	e008      	b.n	8009f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f5c:	4b08      	ldr	r3, [pc, #32]	@ (8009f80 <xTaskGetSchedulerState+0x38>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f64:	2302      	movs	r3, #2
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	e001      	b.n	8009f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f6e:	687b      	ldr	r3, [r7, #4]
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	2000302c 	.word	0x2000302c
 8009f80:	20003048 	.word	0x20003048

08009f84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d051      	beq.n	800a03e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9e:	4b2a      	ldr	r3, [pc, #168]	@ (800a048 <xTaskPriorityInherit+0xc4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d241      	bcs.n	800a02c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	db06      	blt.n	8009fbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb0:	4b25      	ldr	r3, [pc, #148]	@ (800a048 <xTaskPriorityInherit+0xc4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6959      	ldr	r1, [r3, #20]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4a1f      	ldr	r2, [pc, #124]	@ (800a04c <xTaskPriorityInherit+0xc8>)
 8009fd0:	4413      	add	r3, r2
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	d122      	bne.n	800a01c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe f9ba 	bl	8008354 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fe0:	4b19      	ldr	r3, [pc, #100]	@ (800a048 <xTaskPriorityInherit+0xc4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fee:	4b18      	ldr	r3, [pc, #96]	@ (800a050 <xTaskPriorityInherit+0xcc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d903      	bls.n	8009ffe <xTaskPriorityInherit+0x7a>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	4a15      	ldr	r2, [pc, #84]	@ (800a050 <xTaskPriorityInherit+0xcc>)
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4a10      	ldr	r2, [pc, #64]	@ (800a04c <xTaskPriorityInherit+0xc8>)
 800a00c:	441a      	add	r2, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	3304      	adds	r3, #4
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fe f940 	bl	800829a <vListInsertEnd>
 800a01a:	e004      	b.n	800a026 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a01c:	4b0a      	ldr	r3, [pc, #40]	@ (800a048 <xTaskPriorityInherit+0xc4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a026:	2301      	movs	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	e008      	b.n	800a03e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a030:	4b05      	ldr	r3, [pc, #20]	@ (800a048 <xTaskPriorityInherit+0xc4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a036:	429a      	cmp	r2, r3
 800a038:	d201      	bcs.n	800a03e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a03a:	2301      	movs	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a03e:	68fb      	ldr	r3, [r7, #12]
	}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20002b4c 	.word	0x20002b4c
 800a04c:	20002b50 	.word	0x20002b50
 800a050:	20003028 	.word	0x20003028

0800a054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a060:	2300      	movs	r3, #0
 800a062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d058      	beq.n	800a11c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a06a:	4b2f      	ldr	r3, [pc, #188]	@ (800a128 <xTaskPriorityDisinherit+0xd4>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	d00b      	beq.n	800a08c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	60fb      	str	r3, [r7, #12]
}
 800a086:	bf00      	nop
 800a088:	bf00      	nop
 800a08a:	e7fd      	b.n	800a088 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	60bb      	str	r3, [r7, #8]
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0b0:	1e5a      	subs	r2, r3, #1
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d02c      	beq.n	800a11c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d128      	bne.n	800a11c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe f940 	bl	8008354 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a12c <xTaskPriorityDisinherit+0xd8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d903      	bls.n	800a0fc <xTaskPriorityDisinherit+0xa8>
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a12c <xTaskPriorityDisinherit+0xd8>)
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4a09      	ldr	r2, [pc, #36]	@ (800a130 <xTaskPriorityDisinherit+0xdc>)
 800a10a:	441a      	add	r2, r3
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	3304      	adds	r3, #4
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f7fe f8c1 	bl	800829a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a11c:	697b      	ldr	r3, [r7, #20]
	}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20002b4c 	.word	0x20002b4c
 800a12c:	20003028 	.word	0x20003028
 800a130:	20002b50 	.word	0x20002b50

0800a134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a142:	2301      	movs	r3, #1
 800a144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d06c      	beq.n	800a226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10b      	bne.n	800a16c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	60fb      	str	r3, [r7, #12]
}
 800a166:	bf00      	nop
 800a168:	bf00      	nop
 800a16a:	e7fd      	b.n	800a168 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d902      	bls.n	800a17c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	61fb      	str	r3, [r7, #28]
 800a17a:	e002      	b.n	800a182 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a180:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d04c      	beq.n	800a226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	429a      	cmp	r2, r3
 800a194:	d147      	bne.n	800a226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a196:	4b26      	ldr	r3, [pc, #152]	@ (800a230 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d10b      	bne.n	800a1b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	60bb      	str	r3, [r7, #8]
}
 800a1b2:	bf00      	nop
 800a1b4:	bf00      	nop
 800a1b6:	e7fd      	b.n	800a1b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	db04      	blt.n	800a1d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	6959      	ldr	r1, [r3, #20]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4a13      	ldr	r2, [pc, #76]	@ (800a234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1e6:	4413      	add	r3, r2
 800a1e8:	4299      	cmp	r1, r3
 800a1ea:	d11c      	bne.n	800a226 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe f8af 	bl	8008354 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d903      	bls.n	800a20a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a206:	4a0c      	ldr	r2, [pc, #48]	@ (800a238 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4a07      	ldr	r2, [pc, #28]	@ (800a234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a218:	441a      	add	r2, r3
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fe f83a 	bl	800829a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a226:	bf00      	nop
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20002b4c 	.word	0x20002b4c
 800a234:	20002b50 	.word	0x20002b50
 800a238:	20003028 	.word	0x20003028

0800a23c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a240:	4b07      	ldr	r3, [pc, #28]	@ (800a260 <pvTaskIncrementMutexHeldCount+0x24>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a248:	4b05      	ldr	r3, [pc, #20]	@ (800a260 <pvTaskIncrementMutexHeldCount+0x24>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a24e:	3201      	adds	r2, #1
 800a250:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a252:	4b03      	ldr	r3, [pc, #12]	@ (800a260 <pvTaskIncrementMutexHeldCount+0x24>)
 800a254:	681b      	ldr	r3, [r3, #0]
	}
 800a256:	4618      	mov	r0, r3
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	20002b4c 	.word	0x20002b4c

0800a264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a26e:	4b21      	ldr	r3, [pc, #132]	@ (800a2f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a274:	4b20      	ldr	r3, [pc, #128]	@ (800a2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3304      	adds	r3, #4
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe f86a 	bl	8008354 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d10a      	bne.n	800a29e <prvAddCurrentTaskToDelayedList+0x3a>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a28e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3304      	adds	r3, #4
 800a294:	4619      	mov	r1, r3
 800a296:	4819      	ldr	r0, [pc, #100]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0x98>)
 800a298:	f7fd ffff 	bl	800829a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a29c:	e026      	b.n	800a2ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2a6:	4b14      	ldr	r3, [pc, #80]	@ (800a2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d209      	bcs.n	800a2ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b6:	4b12      	ldr	r3, [pc, #72]	@ (800a300 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f7fe f80d 	bl	80082e2 <vListInsert>
}
 800a2c8:	e010      	b.n	800a2ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a304 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fe f803 	bl	80082e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d202      	bcs.n	800a2ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2e6:	4a08      	ldr	r2, [pc, #32]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6013      	str	r3, [r2, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20003024 	.word	0x20003024
 800a2f8:	20002b4c 	.word	0x20002b4c
 800a2fc:	2000300c 	.word	0x2000300c
 800a300:	20002fdc 	.word	0x20002fdc
 800a304:	20002fd8 	.word	0x20002fd8
 800a308:	20003040 	.word	0x20003040

0800a30c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	@ 0x28
 800a310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a312:	2300      	movs	r3, #0
 800a314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a316:	f000 fb13 	bl	800a940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a31a:	4b1d      	ldr	r3, [pc, #116]	@ (800a390 <xTimerCreateTimerTask+0x84>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d021      	beq.n	800a366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a32a:	1d3a      	adds	r2, r7, #4
 800a32c:	f107 0108 	add.w	r1, r7, #8
 800a330:	f107 030c 	add.w	r3, r7, #12
 800a334:	4618      	mov	r0, r3
 800a336:	f7fd ff69 	bl	800820c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	9202      	str	r2, [sp, #8]
 800a342:	9301      	str	r3, [sp, #4]
 800a344:	2302      	movs	r3, #2
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	2300      	movs	r3, #0
 800a34a:	460a      	mov	r2, r1
 800a34c:	4911      	ldr	r1, [pc, #68]	@ (800a394 <xTimerCreateTimerTask+0x88>)
 800a34e:	4812      	ldr	r0, [pc, #72]	@ (800a398 <xTimerCreateTimerTask+0x8c>)
 800a350:	f7fe ff40 	bl	80091d4 <xTaskCreateStatic>
 800a354:	4603      	mov	r3, r0
 800a356:	4a11      	ldr	r2, [pc, #68]	@ (800a39c <xTimerCreateTimerTask+0x90>)
 800a358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a35a:	4b10      	ldr	r3, [pc, #64]	@ (800a39c <xTimerCreateTimerTask+0x90>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a362:	2301      	movs	r3, #1
 800a364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	613b      	str	r3, [r7, #16]
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	e7fd      	b.n	800a380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a384:	697b      	ldr	r3, [r7, #20]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	2000307c 	.word	0x2000307c
 800a394:	080119a0 	.word	0x080119a0
 800a398:	0800a4d9 	.word	0x0800a4d9
 800a39c:	20003080 	.word	0x20003080

0800a3a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	@ 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10b      	bne.n	800a3d0 <xTimerGenericCommand+0x30>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	623b      	str	r3, [r7, #32]
}
 800a3ca:	bf00      	nop
 800a3cc:	bf00      	nop
 800a3ce:	e7fd      	b.n	800a3cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3d0:	4b19      	ldr	r3, [pc, #100]	@ (800a438 <xTimerGenericCommand+0x98>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d02a      	beq.n	800a42e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	dc18      	bgt.n	800a41c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3ea:	f7ff fdad 	bl	8009f48 <xTaskGetSchedulerState>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d109      	bne.n	800a408 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3f4:	4b10      	ldr	r3, [pc, #64]	@ (800a438 <xTimerGenericCommand+0x98>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	f107 0110 	add.w	r1, r7, #16
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a400:	f7fe f9d0 	bl	80087a4 <xQueueGenericSend>
 800a404:	6278      	str	r0, [r7, #36]	@ 0x24
 800a406:	e012      	b.n	800a42e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a408:	4b0b      	ldr	r3, [pc, #44]	@ (800a438 <xTimerGenericCommand+0x98>)
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	f107 0110 	add.w	r1, r7, #16
 800a410:	2300      	movs	r3, #0
 800a412:	2200      	movs	r2, #0
 800a414:	f7fe f9c6 	bl	80087a4 <xQueueGenericSend>
 800a418:	6278      	str	r0, [r7, #36]	@ 0x24
 800a41a:	e008      	b.n	800a42e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <xTimerGenericCommand+0x98>)
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	f107 0110 	add.w	r1, r7, #16
 800a424:	2300      	movs	r3, #0
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	f7fe fabe 	bl	80089a8 <xQueueGenericSendFromISR>
 800a42c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a430:	4618      	mov	r0, r3
 800a432:	3728      	adds	r7, #40	@ 0x28
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	2000307c 	.word	0x2000307c

0800a43c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af02      	add	r7, sp, #8
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a446:	4b23      	ldr	r3, [pc, #140]	@ (800a4d4 <prvProcessExpiredTimer+0x98>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	3304      	adds	r3, #4
 800a454:	4618      	mov	r0, r3
 800a456:	f7fd ff7d 	bl	8008354 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d023      	beq.n	800a4b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	699a      	ldr	r2, [r3, #24]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	18d1      	adds	r1, r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	6978      	ldr	r0, [r7, #20]
 800a476:	f000 f8d5 	bl	800a624 <prvInsertTimerInActiveList>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d020      	beq.n	800a4c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a480:	2300      	movs	r3, #0
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	2300      	movs	r3, #0
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	2100      	movs	r1, #0
 800a48a:	6978      	ldr	r0, [r7, #20]
 800a48c:	f7ff ff88 	bl	800a3a0 <xTimerGenericCommand>
 800a490:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d114      	bne.n	800a4c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	60fb      	str	r3, [r7, #12]
}
 800a4aa:	bf00      	nop
 800a4ac:	bf00      	nop
 800a4ae:	e7fd      	b.n	800a4ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4b6:	f023 0301 	bic.w	r3, r3, #1
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	6978      	ldr	r0, [r7, #20]
 800a4c8:	4798      	blx	r3
}
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20003074 	.word	0x20003074

0800a4d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4e0:	f107 0308 	add.w	r3, r7, #8
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 f859 	bl	800a59c <prvGetNextExpireTime>
 800a4ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 f805 	bl	800a500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4f6:	f000 f8d7 	bl	800a6a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4fa:	bf00      	nop
 800a4fc:	e7f0      	b.n	800a4e0 <prvTimerTask+0x8>
	...

0800a500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a50a:	f7ff f927 	bl	800975c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a50e:	f107 0308 	add.w	r3, r7, #8
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f866 	bl	800a5e4 <prvSampleTimeNow>
 800a518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d130      	bne.n	800a582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <prvProcessTimerOrBlockTask+0x3c>
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d806      	bhi.n	800a53c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a52e:	f7ff f923 	bl	8009778 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff81 	bl	800a43c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a53a:	e024      	b.n	800a586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a542:	4b13      	ldr	r3, [pc, #76]	@ (800a590 <prvProcessTimerOrBlockTask+0x90>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <prvProcessTimerOrBlockTask+0x50>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e000      	b.n	800a552 <prvProcessTimerOrBlockTask+0x52>
 800a550:	2300      	movs	r3, #0
 800a552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a554:	4b0f      	ldr	r3, [pc, #60]	@ (800a594 <prvProcessTimerOrBlockTask+0x94>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	f7fe fe03 	bl	800916c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a566:	f7ff f907 	bl	8009778 <xTaskResumeAll>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a570:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <prvProcessTimerOrBlockTask+0x98>)
 800a572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
}
 800a580:	e001      	b.n	800a586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a582:	f7ff f8f9 	bl	8009778 <xTaskResumeAll>
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20003078 	.word	0x20003078
 800a594:	2000307c 	.word	0x2000307c
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <prvGetNextExpireTime+0x44>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <prvGetNextExpireTime+0x16>
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	e000      	b.n	800a5b4 <prvGetNextExpireTime+0x18>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d105      	bne.n	800a5cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5c0:	4b07      	ldr	r3, [pc, #28]	@ (800a5e0 <prvGetNextExpireTime+0x44>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e001      	b.n	800a5d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20003074 	.word	0x20003074

0800a5e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5ec:	f7ff f962 	bl	80098b4 <xTaskGetTickCount>
 800a5f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a620 <prvSampleTimeNow+0x3c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d205      	bcs.n	800a608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5fc:	f000 f93a 	bl	800a874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e002      	b.n	800a60e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a60e:	4a04      	ldr	r2, [pc, #16]	@ (800a620 <prvSampleTimeNow+0x3c>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20003084 	.word	0x20003084

0800a624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a632:	2300      	movs	r3, #0
 800a634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d812      	bhi.n	800a670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d302      	bcc.n	800a65e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a658:	2301      	movs	r3, #1
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e01b      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a65e:	4b10      	ldr	r3, [pc, #64]	@ (800a6a0 <prvInsertTimerInActiveList+0x7c>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7fd fe3a 	bl	80082e2 <vListInsert>
 800a66e:	e012      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d206      	bcs.n	800a686 <prvInsertTimerInActiveList+0x62>
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d302      	bcc.n	800a686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e007      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <prvInsertTimerInActiveList+0x80>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fd fe26 	bl	80082e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a696:	697b      	ldr	r3, [r7, #20]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20003078 	.word	0x20003078
 800a6a4:	20003074 	.word	0x20003074

0800a6a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08e      	sub	sp, #56	@ 0x38
 800a6ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ae:	e0ce      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	da19      	bge.n	800a6ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10b      	bne.n	800a6da <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	61fb      	str	r3, [r7, #28]
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	e7fd      	b.n	800a6d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e0:	6850      	ldr	r0, [r2, #4]
 800a6e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e4:	6892      	ldr	r2, [r2, #8]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f2c0 80ae 	blt.w	800a84e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a700:	3304      	adds	r3, #4
 800a702:	4618      	mov	r0, r3
 800a704:	f7fd fe26 	bl	8008354 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a708:	463b      	mov	r3, r7
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff ff6a 	bl	800a5e4 <prvSampleTimeNow>
 800a710:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b09      	cmp	r3, #9
 800a716:	f200 8097 	bhi.w	800a848 <prvProcessReceivedCommands+0x1a0>
 800a71a:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <prvProcessReceivedCommands+0x78>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a7bf 	.word	0x0800a7bf
 800a730:	0800a7d3 	.word	0x0800a7d3
 800a734:	0800a81f 	.word	0x0800a81f
 800a738:	0800a749 	.word	0x0800a749
 800a73c:	0800a749 	.word	0x0800a749
 800a740:	0800a7bf 	.word	0x0800a7bf
 800a744:	0800a7d3 	.word	0x0800a7d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a74e:	f043 0301 	orr.w	r3, r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	18d1      	adds	r1, r2, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a768:	f7ff ff5c 	bl	800a624 <prvInsertTimerInActiveList>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d06c      	beq.n	800a84c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d061      	beq.n	800a84c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	441a      	add	r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	2100      	movs	r1, #0
 800a798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a79a:	f7ff fe01 	bl	800a3a0 <xTimerGenericCommand>
 800a79e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d152      	bne.n	800a84c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	61bb      	str	r3, [r7, #24]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7c4:	f023 0301 	bic.w	r3, r3, #1
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a7d0:	e03d      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10b      	bne.n	800a80a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	617b      	str	r3, [r7, #20]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	18d1      	adds	r1, r2, r3
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a818:	f7ff ff04 	bl	800a624 <prvInsertTimerInActiveList>
					break;
 800a81c:	e017      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d103      	bne.n	800a834 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a82c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82e:	f000 fbeb 	bl	800b008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a832:	e00c      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a846:	e002      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a848:	bf00      	nop
 800a84a:	e000      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
					break;
 800a84c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a84e:	4b08      	ldr	r3, [pc, #32]	@ (800a870 <prvProcessReceivedCommands+0x1c8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	1d39      	adds	r1, r7, #4
 800a854:	2200      	movs	r2, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe f944 	bl	8008ae4 <xQueueReceive>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f47f af26 	bne.w	800a6b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	3730      	adds	r7, #48	@ 0x30
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	2000307c 	.word	0x2000307c

0800a874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a87a:	e049      	b.n	800a910 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a87c:	4b2e      	ldr	r3, [pc, #184]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	4b2c      	ldr	r3, [pc, #176]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3304      	adds	r3, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f7fd fd5d 	bl	8008354 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d02f      	beq.n	800a910 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d90e      	bls.n	800a8e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fd fd02 	bl	80082e2 <vListInsert>
 800a8de:	e017      	b.n	800a910 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff fd58 	bl	800a3a0 <xTimerGenericCommand>
 800a8f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	603b      	str	r3, [r7, #0]
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a910:	4b09      	ldr	r3, [pc, #36]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1b0      	bne.n	800a87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a91a:	4b07      	ldr	r3, [pc, #28]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a920:	4b06      	ldr	r3, [pc, #24]	@ (800a93c <prvSwitchTimerLists+0xc8>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a04      	ldr	r2, [pc, #16]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a926:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a928:	4a04      	ldr	r2, [pc, #16]	@ (800a93c <prvSwitchTimerLists+0xc8>)
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	6013      	str	r3, [r2, #0]
}
 800a92e:	bf00      	nop
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20003074 	.word	0x20003074
 800a93c:	20003078 	.word	0x20003078

0800a940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a946:	f000 f96f 	bl	800ac28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a94a:	4b15      	ldr	r3, [pc, #84]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d120      	bne.n	800a994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a952:	4814      	ldr	r0, [pc, #80]	@ (800a9a4 <prvCheckForValidListAndQueue+0x64>)
 800a954:	f7fd fc74 	bl	8008240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a958:	4813      	ldr	r0, [pc, #76]	@ (800a9a8 <prvCheckForValidListAndQueue+0x68>)
 800a95a:	f7fd fc71 	bl	8008240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a95e:	4b13      	ldr	r3, [pc, #76]	@ (800a9ac <prvCheckForValidListAndQueue+0x6c>)
 800a960:	4a10      	ldr	r2, [pc, #64]	@ (800a9a4 <prvCheckForValidListAndQueue+0x64>)
 800a962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a964:	4b12      	ldr	r3, [pc, #72]	@ (800a9b0 <prvCheckForValidListAndQueue+0x70>)
 800a966:	4a10      	ldr	r2, [pc, #64]	@ (800a9a8 <prvCheckForValidListAndQueue+0x68>)
 800a968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a96a:	2300      	movs	r3, #0
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	4b11      	ldr	r3, [pc, #68]	@ (800a9b4 <prvCheckForValidListAndQueue+0x74>)
 800a970:	4a11      	ldr	r2, [pc, #68]	@ (800a9b8 <prvCheckForValidListAndQueue+0x78>)
 800a972:	2110      	movs	r1, #16
 800a974:	200a      	movs	r0, #10
 800a976:	f7fd fd81 	bl	800847c <xQueueGenericCreateStatic>
 800a97a:	4603      	mov	r3, r0
 800a97c:	4a08      	ldr	r2, [pc, #32]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a97e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a980:	4b07      	ldr	r3, [pc, #28]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a988:	4b05      	ldr	r3, [pc, #20]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	490b      	ldr	r1, [pc, #44]	@ (800a9bc <prvCheckForValidListAndQueue+0x7c>)
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fbc2 	bl	8009118 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a994:	f000 f97a 	bl	800ac8c <vPortExitCritical>
}
 800a998:	bf00      	nop
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	2000307c 	.word	0x2000307c
 800a9a4:	2000304c 	.word	0x2000304c
 800a9a8:	20003060 	.word	0x20003060
 800a9ac:	20003074 	.word	0x20003074
 800a9b0:	20003078 	.word	0x20003078
 800a9b4:	20003128 	.word	0x20003128
 800a9b8:	20003088 	.word	0x20003088
 800a9bc:	080119a8 	.word	0x080119a8

0800a9c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3b04      	subs	r3, #4
 800a9d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a9d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f023 0201 	bic.w	r2, r3, #1
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3b04      	subs	r3, #4
 800a9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9f0:	4a0c      	ldr	r2, [pc, #48]	@ (800aa24 <pxPortInitialiseStack+0x64>)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3b14      	subs	r3, #20
 800a9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3b04      	subs	r3, #4
 800aa06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f06f 0202 	mvn.w	r2, #2
 800aa0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3b20      	subs	r3, #32
 800aa14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa16:	68fb      	ldr	r3, [r7, #12]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	0800aa29 	.word	0x0800aa29

0800aa28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa32:	4b13      	ldr	r3, [pc, #76]	@ (800aa80 <prvTaskExitError+0x58>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3a:	d00b      	beq.n	800aa54 <prvTaskExitError+0x2c>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60fb      	str	r3, [r7, #12]
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	e7fd      	b.n	800aa50 <prvTaskExitError+0x28>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	60bb      	str	r3, [r7, #8]
}
 800aa66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa68:	bf00      	nop
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d0fc      	beq.n	800aa6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	20000020 	.word	0x20000020
	...

0800aa90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa90:	4b07      	ldr	r3, [pc, #28]	@ (800aab0 <pxCurrentTCBConst2>)
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	6808      	ldr	r0, [r1, #0]
 800aa96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	f380 8809 	msr	PSP, r0
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f04f 0000 	mov.w	r0, #0
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	4770      	bx	lr
 800aaac:	f3af 8000 	nop.w

0800aab0 <pxCurrentTCBConst2>:
 800aab0:	20002b4c 	.word	0x20002b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aab8:	4808      	ldr	r0, [pc, #32]	@ (800aadc <prvPortStartFirstTask+0x24>)
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	6800      	ldr	r0, [r0, #0]
 800aabe:	f380 8808 	msr	MSP, r0
 800aac2:	f04f 0000 	mov.w	r0, #0
 800aac6:	f380 8814 	msr	CONTROL, r0
 800aaca:	b662      	cpsie	i
 800aacc:	b661      	cpsie	f
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	df00      	svc	0
 800aad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aada:	bf00      	nop
 800aadc:	e000ed08 	.word	0xe000ed08

0800aae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aae6:	4b47      	ldr	r3, [pc, #284]	@ (800ac04 <xPortStartScheduler+0x124>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a47      	ldr	r2, [pc, #284]	@ (800ac08 <xPortStartScheduler+0x128>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d10b      	bne.n	800ab08 <xPortStartScheduler+0x28>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60fb      	str	r3, [r7, #12]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab08:	4b3e      	ldr	r3, [pc, #248]	@ (800ac04 <xPortStartScheduler+0x124>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac0c <xPortStartScheduler+0x12c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d10b      	bne.n	800ab2a <xPortStartScheduler+0x4a>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	613b      	str	r3, [r7, #16]
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	e7fd      	b.n	800ab26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab2a:	4b39      	ldr	r3, [pc, #228]	@ (800ac10 <xPortStartScheduler+0x130>)
 800ab2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	22ff      	movs	r2, #255	@ 0xff
 800ab3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	4b31      	ldr	r3, [pc, #196]	@ (800ac14 <xPortStartScheduler+0x134>)
 800ab50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab52:	4b31      	ldr	r3, [pc, #196]	@ (800ac18 <xPortStartScheduler+0x138>)
 800ab54:	2207      	movs	r2, #7
 800ab56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab58:	e009      	b.n	800ab6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ab5a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac18 <xPortStartScheduler+0x138>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	4a2d      	ldr	r2, [pc, #180]	@ (800ac18 <xPortStartScheduler+0x138>)
 800ab62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab6e:	78fb      	ldrb	r3, [r7, #3]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab76:	2b80      	cmp	r3, #128	@ 0x80
 800ab78:	d0ef      	beq.n	800ab5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab7a:	4b27      	ldr	r3, [pc, #156]	@ (800ac18 <xPortStartScheduler+0x138>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f1c3 0307 	rsb	r3, r3, #7
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d00b      	beq.n	800ab9e <xPortStartScheduler+0xbe>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60bb      	str	r3, [r7, #8]
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	e7fd      	b.n	800ab9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ac18 <xPortStartScheduler+0x138>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	021b      	lsls	r3, r3, #8
 800aba4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac18 <xPortStartScheduler+0x138>)
 800aba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aba8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac18 <xPortStartScheduler+0x138>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abb0:	4a19      	ldr	r2, [pc, #100]	@ (800ac18 <xPortStartScheduler+0x138>)
 800abb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abbc:	4b17      	ldr	r3, [pc, #92]	@ (800ac1c <xPortStartScheduler+0x13c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a16      	ldr	r2, [pc, #88]	@ (800ac1c <xPortStartScheduler+0x13c>)
 800abc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800abc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abc8:	4b14      	ldr	r3, [pc, #80]	@ (800ac1c <xPortStartScheduler+0x13c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a13      	ldr	r2, [pc, #76]	@ (800ac1c <xPortStartScheduler+0x13c>)
 800abce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800abd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abd4:	f000 f8da 	bl	800ad8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800abd8:	4b11      	ldr	r3, [pc, #68]	@ (800ac20 <xPortStartScheduler+0x140>)
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800abde:	f000 f8f9 	bl	800add4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abe2:	4b10      	ldr	r3, [pc, #64]	@ (800ac24 <xPortStartScheduler+0x144>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a0f      	ldr	r2, [pc, #60]	@ (800ac24 <xPortStartScheduler+0x144>)
 800abe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800abec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abee:	f7ff ff63 	bl	800aab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abf2:	f7fe ff29 	bl	8009a48 <vTaskSwitchContext>
	prvTaskExitError();
 800abf6:	f7ff ff17 	bl	800aa28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3718      	adds	r7, #24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	e000ed00 	.word	0xe000ed00
 800ac08:	410fc271 	.word	0x410fc271
 800ac0c:	410fc270 	.word	0x410fc270
 800ac10:	e000e400 	.word	0xe000e400
 800ac14:	20003178 	.word	0x20003178
 800ac18:	2000317c 	.word	0x2000317c
 800ac1c:	e000ed20 	.word	0xe000ed20
 800ac20:	20000020 	.word	0x20000020
 800ac24:	e000ef34 	.word	0xe000ef34

0800ac28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	607b      	str	r3, [r7, #4]
}
 800ac40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac42:	4b10      	ldr	r3, [pc, #64]	@ (800ac84 <vPortEnterCritical+0x5c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	4a0e      	ldr	r2, [pc, #56]	@ (800ac84 <vPortEnterCritical+0x5c>)
 800ac4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <vPortEnterCritical+0x5c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d110      	bne.n	800ac76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac54:	4b0c      	ldr	r3, [pc, #48]	@ (800ac88 <vPortEnterCritical+0x60>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00b      	beq.n	800ac76 <vPortEnterCritical+0x4e>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	603b      	str	r3, [r7, #0]
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	e7fd      	b.n	800ac72 <vPortEnterCritical+0x4a>
	}
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	20000020 	.word	0x20000020
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac92:	4b12      	ldr	r3, [pc, #72]	@ (800acdc <vPortExitCritical+0x50>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10b      	bne.n	800acb2 <vPortExitCritical+0x26>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	607b      	str	r3, [r7, #4]
}
 800acac:	bf00      	nop
 800acae:	bf00      	nop
 800acb0:	e7fd      	b.n	800acae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acb2:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <vPortExitCritical+0x50>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	4a08      	ldr	r2, [pc, #32]	@ (800acdc <vPortExitCritical+0x50>)
 800acba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acbc:	4b07      	ldr	r3, [pc, #28]	@ (800acdc <vPortExitCritical+0x50>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d105      	bne.n	800acd0 <vPortExitCritical+0x44>
 800acc4:	2300      	movs	r3, #0
 800acc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f383 8811 	msr	BASEPRI, r3
}
 800acce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	20000020 	.word	0x20000020

0800ace0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ace0:	f3ef 8009 	mrs	r0, PSP
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	4b15      	ldr	r3, [pc, #84]	@ (800ad40 <pxCurrentTCBConst>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	f01e 0f10 	tst.w	lr, #16
 800acf0:	bf08      	it	eq
 800acf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	6010      	str	r0, [r2, #0]
 800acfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad04:	f380 8811 	msr	BASEPRI, r0
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f7fe fe9a 	bl	8009a48 <vTaskSwitchContext>
 800ad14:	f04f 0000 	mov.w	r0, #0
 800ad18:	f380 8811 	msr	BASEPRI, r0
 800ad1c:	bc09      	pop	{r0, r3}
 800ad1e:	6819      	ldr	r1, [r3, #0]
 800ad20:	6808      	ldr	r0, [r1, #0]
 800ad22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad26:	f01e 0f10 	tst.w	lr, #16
 800ad2a:	bf08      	it	eq
 800ad2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad30:	f380 8809 	msr	PSP, r0
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	f3af 8000 	nop.w

0800ad40 <pxCurrentTCBConst>:
 800ad40:	20002b4c 	.word	0x20002b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	607b      	str	r3, [r7, #4]
}
 800ad60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad62:	f7fe fdb7 	bl	80098d4 <xTaskIncrementTick>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad6c:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <xPortSysTickHandler+0x40>)
 800ad6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	f383 8811 	msr	BASEPRI, r3
}
 800ad7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad90:	4b0b      	ldr	r3, [pc, #44]	@ (800adc0 <vPortSetupTimerInterrupt+0x34>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad96:	4b0b      	ldr	r3, [pc, #44]	@ (800adc4 <vPortSetupTimerInterrupt+0x38>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	@ (800adc8 <vPortSetupTimerInterrupt+0x3c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a0a      	ldr	r2, [pc, #40]	@ (800adcc <vPortSetupTimerInterrupt+0x40>)
 800ada2:	fba2 2303 	umull	r2, r3, r2, r3
 800ada6:	099b      	lsrs	r3, r3, #6
 800ada8:	4a09      	ldr	r2, [pc, #36]	@ (800add0 <vPortSetupTimerInterrupt+0x44>)
 800adaa:	3b01      	subs	r3, #1
 800adac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adae:	4b04      	ldr	r3, [pc, #16]	@ (800adc0 <vPortSetupTimerInterrupt+0x34>)
 800adb0:	2207      	movs	r2, #7
 800adb2:	601a      	str	r2, [r3, #0]
}
 800adb4:	bf00      	nop
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	e000e010 	.word	0xe000e010
 800adc4:	e000e018 	.word	0xe000e018
 800adc8:	20000014 	.word	0x20000014
 800adcc:	10624dd3 	.word	0x10624dd3
 800add0:	e000e014 	.word	0xe000e014

0800add4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800add4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ade4 <vPortEnableVFP+0x10>
 800add8:	6801      	ldr	r1, [r0, #0]
 800adda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800adde:	6001      	str	r1, [r0, #0]
 800ade0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ade2:	bf00      	nop
 800ade4:	e000ed88 	.word	0xe000ed88

0800ade8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adee:	f3ef 8305 	mrs	r3, IPSR
 800adf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b0f      	cmp	r3, #15
 800adf8:	d915      	bls.n	800ae26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800adfa:	4a18      	ldr	r2, [pc, #96]	@ (800ae5c <vPortValidateInterruptPriority+0x74>)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae04:	4b16      	ldr	r3, [pc, #88]	@ (800ae60 <vPortValidateInterruptPriority+0x78>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	7afa      	ldrb	r2, [r7, #11]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d20b      	bcs.n	800ae26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	607b      	str	r3, [r7, #4]
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae26:	4b0f      	ldr	r3, [pc, #60]	@ (800ae64 <vPortValidateInterruptPriority+0x7c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ae2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae68 <vPortValidateInterruptPriority+0x80>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d90b      	bls.n	800ae4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	603b      	str	r3, [r7, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <vPortValidateInterruptPriority+0x62>
	}
 800ae4e:	bf00      	nop
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	e000e3f0 	.word	0xe000e3f0
 800ae60:	20003178 	.word	0x20003178
 800ae64:	e000ed0c 	.word	0xe000ed0c
 800ae68:	2000317c 	.word	0x2000317c

0800ae6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	@ 0x28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae74:	2300      	movs	r3, #0
 800ae76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae78:	f7fe fc70 	bl	800975c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae7c:	4b5c      	ldr	r3, [pc, #368]	@ (800aff0 <pvPortMalloc+0x184>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae84:	f000 f924 	bl	800b0d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae88:	4b5a      	ldr	r3, [pc, #360]	@ (800aff4 <pvPortMalloc+0x188>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f040 8095 	bne.w	800afc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01e      	beq.n	800aeda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ae9c:	2208      	movs	r2, #8
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4413      	add	r3, r2
 800aea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d015      	beq.n	800aeda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f003 0307 	and.w	r3, r3, #7
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00b      	beq.n	800aeda <pvPortMalloc+0x6e>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	617b      	str	r3, [r7, #20]
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
 800aed8:	e7fd      	b.n	800aed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d06f      	beq.n	800afc0 <pvPortMalloc+0x154>
 800aee0:	4b45      	ldr	r3, [pc, #276]	@ (800aff8 <pvPortMalloc+0x18c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d86a      	bhi.n	800afc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aeea:	4b44      	ldr	r3, [pc, #272]	@ (800affc <pvPortMalloc+0x190>)
 800aeec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aeee:	4b43      	ldr	r3, [pc, #268]	@ (800affc <pvPortMalloc+0x190>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aef4:	e004      	b.n	800af00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	429a      	cmp	r2, r3
 800af08:	d903      	bls.n	800af12 <pvPortMalloc+0xa6>
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1f1      	bne.n	800aef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af12:	4b37      	ldr	r3, [pc, #220]	@ (800aff0 <pvPortMalloc+0x184>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af18:	429a      	cmp	r2, r3
 800af1a:	d051      	beq.n	800afc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2208      	movs	r2, #8
 800af22:	4413      	add	r3, r2
 800af24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	1ad2      	subs	r2, r2, r3
 800af36:	2308      	movs	r3, #8
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d920      	bls.n	800af80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4413      	add	r3, r2
 800af44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00b      	beq.n	800af68 <pvPortMalloc+0xfc>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	613b      	str	r3, [r7, #16]
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	e7fd      	b.n	800af64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af7a:	69b8      	ldr	r0, [r7, #24]
 800af7c:	f000 f90a 	bl	800b194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af80:	4b1d      	ldr	r3, [pc, #116]	@ (800aff8 <pvPortMalloc+0x18c>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	4a1b      	ldr	r2, [pc, #108]	@ (800aff8 <pvPortMalloc+0x18c>)
 800af8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af8e:	4b1a      	ldr	r3, [pc, #104]	@ (800aff8 <pvPortMalloc+0x18c>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b1b      	ldr	r3, [pc, #108]	@ (800b000 <pvPortMalloc+0x194>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d203      	bcs.n	800afa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af9a:	4b17      	ldr	r3, [pc, #92]	@ (800aff8 <pvPortMalloc+0x18c>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a18      	ldr	r2, [pc, #96]	@ (800b000 <pvPortMalloc+0x194>)
 800afa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	4b13      	ldr	r3, [pc, #76]	@ (800aff4 <pvPortMalloc+0x188>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	431a      	orrs	r2, r3
 800afac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800afb6:	4b13      	ldr	r3, [pc, #76]	@ (800b004 <pvPortMalloc+0x198>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3301      	adds	r3, #1
 800afbc:	4a11      	ldr	r2, [pc, #68]	@ (800b004 <pvPortMalloc+0x198>)
 800afbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800afc0:	f7fe fbda 	bl	8009778 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	f003 0307 	and.w	r3, r3, #7
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00b      	beq.n	800afe6 <pvPortMalloc+0x17a>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	60fb      	str	r3, [r7, #12]
}
 800afe0:	bf00      	nop
 800afe2:	bf00      	nop
 800afe4:	e7fd      	b.n	800afe2 <pvPortMalloc+0x176>
	return pvReturn;
 800afe6:	69fb      	ldr	r3, [r7, #28]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3728      	adds	r7, #40	@ 0x28
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20006d88 	.word	0x20006d88
 800aff4:	20006d9c 	.word	0x20006d9c
 800aff8:	20006d8c 	.word	0x20006d8c
 800affc:	20006d80 	.word	0x20006d80
 800b000:	20006d90 	.word	0x20006d90
 800b004:	20006d94 	.word	0x20006d94

0800b008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d04f      	beq.n	800b0ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b01a:	2308      	movs	r3, #8
 800b01c:	425b      	negs	r3, r3
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4413      	add	r3, r2
 800b022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	4b25      	ldr	r3, [pc, #148]	@ (800b0c4 <vPortFree+0xbc>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4013      	ands	r3, r2
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10b      	bne.n	800b04e <vPortFree+0x46>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	60fb      	str	r3, [r7, #12]
}
 800b048:	bf00      	nop
 800b04a:	bf00      	nop
 800b04c:	e7fd      	b.n	800b04a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00b      	beq.n	800b06e <vPortFree+0x66>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	60bb      	str	r3, [r7, #8]
}
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
 800b06c:	e7fd      	b.n	800b06a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	4b14      	ldr	r3, [pc, #80]	@ (800b0c4 <vPortFree+0xbc>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4013      	ands	r3, r2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d01e      	beq.n	800b0ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d11a      	bne.n	800b0ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c4 <vPortFree+0xbc>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	43db      	mvns	r3, r3
 800b08e:	401a      	ands	r2, r3
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b094:	f7fe fb62 	bl	800975c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c8 <vPortFree+0xc0>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	4a09      	ldr	r2, [pc, #36]	@ (800b0c8 <vPortFree+0xc0>)
 800b0a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0a6:	6938      	ldr	r0, [r7, #16]
 800b0a8:	f000 f874 	bl	800b194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0ac:	4b07      	ldr	r3, [pc, #28]	@ (800b0cc <vPortFree+0xc4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	4a06      	ldr	r2, [pc, #24]	@ (800b0cc <vPortFree+0xc4>)
 800b0b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0b6:	f7fe fb5f 	bl	8009778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0ba:	bf00      	nop
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20006d9c 	.word	0x20006d9c
 800b0c8:	20006d8c 	.word	0x20006d8c
 800b0cc:	20006d98 	.word	0x20006d98

0800b0d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b0da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b0dc:	4b27      	ldr	r3, [pc, #156]	@ (800b17c <prvHeapInit+0xac>)
 800b0de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00c      	beq.n	800b104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3307      	adds	r3, #7
 800b0ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0307 	bic.w	r3, r3, #7
 800b0f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	4a1f      	ldr	r2, [pc, #124]	@ (800b17c <prvHeapInit+0xac>)
 800b100:	4413      	add	r3, r2
 800b102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b108:	4a1d      	ldr	r2, [pc, #116]	@ (800b180 <prvHeapInit+0xb0>)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b10e:	4b1c      	ldr	r3, [pc, #112]	@ (800b180 <prvHeapInit+0xb0>)
 800b110:	2200      	movs	r2, #0
 800b112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	4413      	add	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b11c:	2208      	movs	r2, #8
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1a9b      	subs	r3, r3, r2
 800b122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f023 0307 	bic.w	r3, r3, #7
 800b12a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4a15      	ldr	r2, [pc, #84]	@ (800b184 <prvHeapInit+0xb4>)
 800b130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b132:	4b14      	ldr	r3, [pc, #80]	@ (800b184 <prvHeapInit+0xb4>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2200      	movs	r2, #0
 800b138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b13a:	4b12      	ldr	r3, [pc, #72]	@ (800b184 <prvHeapInit+0xb4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	1ad2      	subs	r2, r2, r3
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b150:	4b0c      	ldr	r3, [pc, #48]	@ (800b184 <prvHeapInit+0xb4>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4a0a      	ldr	r2, [pc, #40]	@ (800b188 <prvHeapInit+0xb8>)
 800b15e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	4a09      	ldr	r2, [pc, #36]	@ (800b18c <prvHeapInit+0xbc>)
 800b166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b168:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <prvHeapInit+0xc0>)
 800b16a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b16e:	601a      	str	r2, [r3, #0]
}
 800b170:	bf00      	nop
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	20003180 	.word	0x20003180
 800b180:	20006d80 	.word	0x20006d80
 800b184:	20006d88 	.word	0x20006d88
 800b188:	20006d90 	.word	0x20006d90
 800b18c:	20006d8c 	.word	0x20006d8c
 800b190:	20006d9c 	.word	0x20006d9c

0800b194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b19c:	4b28      	ldr	r3, [pc, #160]	@ (800b240 <prvInsertBlockIntoFreeList+0xac>)
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e002      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x14>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d8f7      	bhi.n	800b1a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	4413      	add	r3, r2
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d108      	bne.n	800b1d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	441a      	add	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d118      	bne.n	800b21c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b15      	ldr	r3, [pc, #84]	@ (800b244 <prvInsertBlockIntoFreeList+0xb0>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d00d      	beq.n	800b212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	441a      	add	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	e008      	b.n	800b224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b212:	4b0c      	ldr	r3, [pc, #48]	@ (800b244 <prvInsertBlockIntoFreeList+0xb0>)
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	e003      	b.n	800b224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d002      	beq.n	800b232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b232:	bf00      	nop
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	20006d80 	.word	0x20006d80
 800b244:	20006d88 	.word	0x20006d88

0800b248 <atof>:
 800b248:	2100      	movs	r1, #0
 800b24a:	f000 be09 	b.w	800be60 <strtod>

0800b24e <atoi>:
 800b24e:	220a      	movs	r2, #10
 800b250:	2100      	movs	r1, #0
 800b252:	f000 be8d 	b.w	800bf70 <strtol>

0800b256 <sulp>:
 800b256:	b570      	push	{r4, r5, r6, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	460d      	mov	r5, r1
 800b25c:	ec45 4b10 	vmov	d0, r4, r5
 800b260:	4616      	mov	r6, r2
 800b262:	f004 fc29 	bl	800fab8 <__ulp>
 800b266:	ec51 0b10 	vmov	r0, r1, d0
 800b26a:	b17e      	cbz	r6, 800b28c <sulp+0x36>
 800b26c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b270:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd09      	ble.n	800b28c <sulp+0x36>
 800b278:	051b      	lsls	r3, r3, #20
 800b27a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b27e:	2400      	movs	r4, #0
 800b280:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b284:	4622      	mov	r2, r4
 800b286:	462b      	mov	r3, r5
 800b288:	f7f5 f9ce 	bl	8000628 <__aeabi_dmul>
 800b28c:	ec41 0b10 	vmov	d0, r0, r1
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	0000      	movs	r0, r0
 800b294:	0000      	movs	r0, r0
	...

0800b298 <_strtod_l>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	b09f      	sub	sp, #124	@ 0x7c
 800b29e:	460c      	mov	r4, r1
 800b2a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b2a6:	9005      	str	r0, [sp, #20]
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	f04f 0b00 	mov.w	fp, #0
 800b2b0:	460a      	mov	r2, r1
 800b2b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2b4:	7811      	ldrb	r1, [r2, #0]
 800b2b6:	292b      	cmp	r1, #43	@ 0x2b
 800b2b8:	d04a      	beq.n	800b350 <_strtod_l+0xb8>
 800b2ba:	d838      	bhi.n	800b32e <_strtod_l+0x96>
 800b2bc:	290d      	cmp	r1, #13
 800b2be:	d832      	bhi.n	800b326 <_strtod_l+0x8e>
 800b2c0:	2908      	cmp	r1, #8
 800b2c2:	d832      	bhi.n	800b32a <_strtod_l+0x92>
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	d03b      	beq.n	800b340 <_strtod_l+0xa8>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b2ce:	782a      	ldrb	r2, [r5, #0]
 800b2d0:	2a30      	cmp	r2, #48	@ 0x30
 800b2d2:	f040 80b2 	bne.w	800b43a <_strtod_l+0x1a2>
 800b2d6:	786a      	ldrb	r2, [r5, #1]
 800b2d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2dc:	2a58      	cmp	r2, #88	@ 0x58
 800b2de:	d16e      	bne.n	800b3be <_strtod_l+0x126>
 800b2e0:	9302      	str	r3, [sp, #8]
 800b2e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	4a8f      	ldr	r2, [pc, #572]	@ (800b528 <_strtod_l+0x290>)
 800b2ec:	9805      	ldr	r0, [sp, #20]
 800b2ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b2f0:	a919      	add	r1, sp, #100	@ 0x64
 800b2f2:	f003 fc8f 	bl	800ec14 <__gethex>
 800b2f6:	f010 060f 	ands.w	r6, r0, #15
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	d005      	beq.n	800b30a <_strtod_l+0x72>
 800b2fe:	2e06      	cmp	r6, #6
 800b300:	d128      	bne.n	800b354 <_strtod_l+0xbc>
 800b302:	3501      	adds	r5, #1
 800b304:	2300      	movs	r3, #0
 800b306:	9519      	str	r5, [sp, #100]	@ 0x64
 800b308:	930e      	str	r3, [sp, #56]	@ 0x38
 800b30a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 858e 	bne.w	800be2e <_strtod_l+0xb96>
 800b312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b314:	b1cb      	cbz	r3, 800b34a <_strtod_l+0xb2>
 800b316:	4652      	mov	r2, sl
 800b318:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b31c:	ec43 2b10 	vmov	d0, r2, r3
 800b320:	b01f      	add	sp, #124	@ 0x7c
 800b322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b326:	2920      	cmp	r1, #32
 800b328:	d1ce      	bne.n	800b2c8 <_strtod_l+0x30>
 800b32a:	3201      	adds	r2, #1
 800b32c:	e7c1      	b.n	800b2b2 <_strtod_l+0x1a>
 800b32e:	292d      	cmp	r1, #45	@ 0x2d
 800b330:	d1ca      	bne.n	800b2c8 <_strtod_l+0x30>
 800b332:	2101      	movs	r1, #1
 800b334:	910e      	str	r1, [sp, #56]	@ 0x38
 800b336:	1c51      	adds	r1, r2, #1
 800b338:	9119      	str	r1, [sp, #100]	@ 0x64
 800b33a:	7852      	ldrb	r2, [r2, #1]
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	d1c5      	bne.n	800b2cc <_strtod_l+0x34>
 800b340:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b342:	9419      	str	r4, [sp, #100]	@ 0x64
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 8570 	bne.w	800be2a <_strtod_l+0xb92>
 800b34a:	4652      	mov	r2, sl
 800b34c:	465b      	mov	r3, fp
 800b34e:	e7e5      	b.n	800b31c <_strtod_l+0x84>
 800b350:	2100      	movs	r1, #0
 800b352:	e7ef      	b.n	800b334 <_strtod_l+0x9c>
 800b354:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b356:	b13a      	cbz	r2, 800b368 <_strtod_l+0xd0>
 800b358:	2135      	movs	r1, #53	@ 0x35
 800b35a:	a81c      	add	r0, sp, #112	@ 0x70
 800b35c:	f004 fca6 	bl	800fcac <__copybits>
 800b360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b362:	9805      	ldr	r0, [sp, #20]
 800b364:	f004 f87c 	bl	800f460 <_Bfree>
 800b368:	3e01      	subs	r6, #1
 800b36a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b36c:	2e04      	cmp	r6, #4
 800b36e:	d806      	bhi.n	800b37e <_strtod_l+0xe6>
 800b370:	e8df f006 	tbb	[pc, r6]
 800b374:	201d0314 	.word	0x201d0314
 800b378:	14          	.byte	0x14
 800b379:	00          	.byte	0x00
 800b37a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b37e:	05e1      	lsls	r1, r4, #23
 800b380:	bf48      	it	mi
 800b382:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b38a:	0d1b      	lsrs	r3, r3, #20
 800b38c:	051b      	lsls	r3, r3, #20
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1bb      	bne.n	800b30a <_strtod_l+0x72>
 800b392:	f002 fcbf 	bl	800dd14 <__errno>
 800b396:	2322      	movs	r3, #34	@ 0x22
 800b398:	6003      	str	r3, [r0, #0]
 800b39a:	e7b6      	b.n	800b30a <_strtod_l+0x72>
 800b39c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b3a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b3a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b3a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b3ac:	e7e7      	b.n	800b37e <_strtod_l+0xe6>
 800b3ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b530 <_strtod_l+0x298>
 800b3b2:	e7e4      	b.n	800b37e <_strtod_l+0xe6>
 800b3b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b3b8:	f04f 3aff 	mov.w	sl, #4294967295
 800b3bc:	e7df      	b.n	800b37e <_strtod_l+0xe6>
 800b3be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	2b30      	cmp	r3, #48	@ 0x30
 800b3c8:	d0f9      	beq.n	800b3be <_strtod_l+0x126>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d09d      	beq.n	800b30a <_strtod_l+0x72>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	2700      	movs	r7, #0
 800b3d2:	9308      	str	r3, [sp, #32]
 800b3d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b3da:	46b9      	mov	r9, r7
 800b3dc:	220a      	movs	r2, #10
 800b3de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b3e0:	7805      	ldrb	r5, [r0, #0]
 800b3e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b3e6:	b2d9      	uxtb	r1, r3
 800b3e8:	2909      	cmp	r1, #9
 800b3ea:	d928      	bls.n	800b43e <_strtod_l+0x1a6>
 800b3ec:	494f      	ldr	r1, [pc, #316]	@ (800b52c <_strtod_l+0x294>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f001 fcf6 	bl	800cde0 <strncmp>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d032      	beq.n	800b45e <_strtod_l+0x1c6>
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b3fe:	464d      	mov	r5, r9
 800b400:	4603      	mov	r3, r0
 800b402:	2a65      	cmp	r2, #101	@ 0x65
 800b404:	d001      	beq.n	800b40a <_strtod_l+0x172>
 800b406:	2a45      	cmp	r2, #69	@ 0x45
 800b408:	d114      	bne.n	800b434 <_strtod_l+0x19c>
 800b40a:	b91d      	cbnz	r5, 800b414 <_strtod_l+0x17c>
 800b40c:	9a08      	ldr	r2, [sp, #32]
 800b40e:	4302      	orrs	r2, r0
 800b410:	d096      	beq.n	800b340 <_strtod_l+0xa8>
 800b412:	2500      	movs	r5, #0
 800b414:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b416:	1c62      	adds	r2, r4, #1
 800b418:	9219      	str	r2, [sp, #100]	@ 0x64
 800b41a:	7862      	ldrb	r2, [r4, #1]
 800b41c:	2a2b      	cmp	r2, #43	@ 0x2b
 800b41e:	d07a      	beq.n	800b516 <_strtod_l+0x27e>
 800b420:	2a2d      	cmp	r2, #45	@ 0x2d
 800b422:	d07e      	beq.n	800b522 <_strtod_l+0x28a>
 800b424:	f04f 0c00 	mov.w	ip, #0
 800b428:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b42c:	2909      	cmp	r1, #9
 800b42e:	f240 8085 	bls.w	800b53c <_strtod_l+0x2a4>
 800b432:	9419      	str	r4, [sp, #100]	@ 0x64
 800b434:	f04f 0800 	mov.w	r8, #0
 800b438:	e0a5      	b.n	800b586 <_strtod_l+0x2ee>
 800b43a:	2300      	movs	r3, #0
 800b43c:	e7c8      	b.n	800b3d0 <_strtod_l+0x138>
 800b43e:	f1b9 0f08 	cmp.w	r9, #8
 800b442:	bfd8      	it	le
 800b444:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b446:	f100 0001 	add.w	r0, r0, #1
 800b44a:	bfda      	itte	le
 800b44c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b450:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b452:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b456:	f109 0901 	add.w	r9, r9, #1
 800b45a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b45c:	e7bf      	b.n	800b3de <_strtod_l+0x146>
 800b45e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	9219      	str	r2, [sp, #100]	@ 0x64
 800b464:	785a      	ldrb	r2, [r3, #1]
 800b466:	f1b9 0f00 	cmp.w	r9, #0
 800b46a:	d03b      	beq.n	800b4e4 <_strtod_l+0x24c>
 800b46c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b46e:	464d      	mov	r5, r9
 800b470:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b474:	2b09      	cmp	r3, #9
 800b476:	d912      	bls.n	800b49e <_strtod_l+0x206>
 800b478:	2301      	movs	r3, #1
 800b47a:	e7c2      	b.n	800b402 <_strtod_l+0x16a>
 800b47c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	9219      	str	r2, [sp, #100]	@ 0x64
 800b482:	785a      	ldrb	r2, [r3, #1]
 800b484:	3001      	adds	r0, #1
 800b486:	2a30      	cmp	r2, #48	@ 0x30
 800b488:	d0f8      	beq.n	800b47c <_strtod_l+0x1e4>
 800b48a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b48e:	2b08      	cmp	r3, #8
 800b490:	f200 84d2 	bhi.w	800be38 <_strtod_l+0xba0>
 800b494:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b496:	900a      	str	r0, [sp, #40]	@ 0x28
 800b498:	2000      	movs	r0, #0
 800b49a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b49c:	4605      	mov	r5, r0
 800b49e:	3a30      	subs	r2, #48	@ 0x30
 800b4a0:	f100 0301 	add.w	r3, r0, #1
 800b4a4:	d018      	beq.n	800b4d8 <_strtod_l+0x240>
 800b4a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4a8:	4419      	add	r1, r3
 800b4aa:	910a      	str	r1, [sp, #40]	@ 0x28
 800b4ac:	462e      	mov	r6, r5
 800b4ae:	f04f 0e0a 	mov.w	lr, #10
 800b4b2:	1c71      	adds	r1, r6, #1
 800b4b4:	eba1 0c05 	sub.w	ip, r1, r5
 800b4b8:	4563      	cmp	r3, ip
 800b4ba:	dc15      	bgt.n	800b4e8 <_strtod_l+0x250>
 800b4bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b4c0:	182b      	adds	r3, r5, r0
 800b4c2:	2b08      	cmp	r3, #8
 800b4c4:	f105 0501 	add.w	r5, r5, #1
 800b4c8:	4405      	add	r5, r0
 800b4ca:	dc1a      	bgt.n	800b502 <_strtod_l+0x26a>
 800b4cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4ce:	230a      	movs	r3, #10
 800b4d0:	fb03 2301 	mla	r3, r3, r1, r2
 800b4d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4da:	1c51      	adds	r1, r2, #1
 800b4dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b4de:	7852      	ldrb	r2, [r2, #1]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	e7c5      	b.n	800b470 <_strtod_l+0x1d8>
 800b4e4:	4648      	mov	r0, r9
 800b4e6:	e7ce      	b.n	800b486 <_strtod_l+0x1ee>
 800b4e8:	2e08      	cmp	r6, #8
 800b4ea:	dc05      	bgt.n	800b4f8 <_strtod_l+0x260>
 800b4ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b4ee:	fb0e f606 	mul.w	r6, lr, r6
 800b4f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b4f4:	460e      	mov	r6, r1
 800b4f6:	e7dc      	b.n	800b4b2 <_strtod_l+0x21a>
 800b4f8:	2910      	cmp	r1, #16
 800b4fa:	bfd8      	it	le
 800b4fc:	fb0e f707 	mulle.w	r7, lr, r7
 800b500:	e7f8      	b.n	800b4f4 <_strtod_l+0x25c>
 800b502:	2b0f      	cmp	r3, #15
 800b504:	bfdc      	itt	le
 800b506:	230a      	movle	r3, #10
 800b508:	fb03 2707 	mlale	r7, r3, r7, r2
 800b50c:	e7e3      	b.n	800b4d6 <_strtod_l+0x23e>
 800b50e:	2300      	movs	r3, #0
 800b510:	930a      	str	r3, [sp, #40]	@ 0x28
 800b512:	2301      	movs	r3, #1
 800b514:	e77a      	b.n	800b40c <_strtod_l+0x174>
 800b516:	f04f 0c00 	mov.w	ip, #0
 800b51a:	1ca2      	adds	r2, r4, #2
 800b51c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b51e:	78a2      	ldrb	r2, [r4, #2]
 800b520:	e782      	b.n	800b428 <_strtod_l+0x190>
 800b522:	f04f 0c01 	mov.w	ip, #1
 800b526:	e7f8      	b.n	800b51a <_strtod_l+0x282>
 800b528:	08011e30 	.word	0x08011e30
 800b52c:	08011ab8 	.word	0x08011ab8
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b536:	1c51      	adds	r1, r2, #1
 800b538:	9119      	str	r1, [sp, #100]	@ 0x64
 800b53a:	7852      	ldrb	r2, [r2, #1]
 800b53c:	2a30      	cmp	r2, #48	@ 0x30
 800b53e:	d0f9      	beq.n	800b534 <_strtod_l+0x29c>
 800b540:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b544:	2908      	cmp	r1, #8
 800b546:	f63f af75 	bhi.w	800b434 <_strtod_l+0x19c>
 800b54a:	3a30      	subs	r2, #48	@ 0x30
 800b54c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b54e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b550:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b552:	f04f 080a 	mov.w	r8, #10
 800b556:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b558:	1c56      	adds	r6, r2, #1
 800b55a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b55c:	7852      	ldrb	r2, [r2, #1]
 800b55e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b562:	f1be 0f09 	cmp.w	lr, #9
 800b566:	d939      	bls.n	800b5dc <_strtod_l+0x344>
 800b568:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b56a:	1a76      	subs	r6, r6, r1
 800b56c:	2e08      	cmp	r6, #8
 800b56e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b572:	dc03      	bgt.n	800b57c <_strtod_l+0x2e4>
 800b574:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b576:	4588      	cmp	r8, r1
 800b578:	bfa8      	it	ge
 800b57a:	4688      	movge	r8, r1
 800b57c:	f1bc 0f00 	cmp.w	ip, #0
 800b580:	d001      	beq.n	800b586 <_strtod_l+0x2ee>
 800b582:	f1c8 0800 	rsb	r8, r8, #0
 800b586:	2d00      	cmp	r5, #0
 800b588:	d14e      	bne.n	800b628 <_strtod_l+0x390>
 800b58a:	9908      	ldr	r1, [sp, #32]
 800b58c:	4308      	orrs	r0, r1
 800b58e:	f47f aebc 	bne.w	800b30a <_strtod_l+0x72>
 800b592:	2b00      	cmp	r3, #0
 800b594:	f47f aed4 	bne.w	800b340 <_strtod_l+0xa8>
 800b598:	2a69      	cmp	r2, #105	@ 0x69
 800b59a:	d028      	beq.n	800b5ee <_strtod_l+0x356>
 800b59c:	dc25      	bgt.n	800b5ea <_strtod_l+0x352>
 800b59e:	2a49      	cmp	r2, #73	@ 0x49
 800b5a0:	d025      	beq.n	800b5ee <_strtod_l+0x356>
 800b5a2:	2a4e      	cmp	r2, #78	@ 0x4e
 800b5a4:	f47f aecc 	bne.w	800b340 <_strtod_l+0xa8>
 800b5a8:	499a      	ldr	r1, [pc, #616]	@ (800b814 <_strtod_l+0x57c>)
 800b5aa:	a819      	add	r0, sp, #100	@ 0x64
 800b5ac:	f003 fd54 	bl	800f058 <__match>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f43f aec5 	beq.w	800b340 <_strtod_l+0xa8>
 800b5b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b28      	cmp	r3, #40	@ 0x28
 800b5bc:	d12e      	bne.n	800b61c <_strtod_l+0x384>
 800b5be:	4996      	ldr	r1, [pc, #600]	@ (800b818 <_strtod_l+0x580>)
 800b5c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b5c2:	a819      	add	r0, sp, #100	@ 0x64
 800b5c4:	f003 fd5c 	bl	800f080 <__hexnan>
 800b5c8:	2805      	cmp	r0, #5
 800b5ca:	d127      	bne.n	800b61c <_strtod_l+0x384>
 800b5cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b5d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b5d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b5da:	e696      	b.n	800b30a <_strtod_l+0x72>
 800b5dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5de:	fb08 2101 	mla	r1, r8, r1, r2
 800b5e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b5e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5e8:	e7b5      	b.n	800b556 <_strtod_l+0x2be>
 800b5ea:	2a6e      	cmp	r2, #110	@ 0x6e
 800b5ec:	e7da      	b.n	800b5a4 <_strtod_l+0x30c>
 800b5ee:	498b      	ldr	r1, [pc, #556]	@ (800b81c <_strtod_l+0x584>)
 800b5f0:	a819      	add	r0, sp, #100	@ 0x64
 800b5f2:	f003 fd31 	bl	800f058 <__match>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f43f aea2 	beq.w	800b340 <_strtod_l+0xa8>
 800b5fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5fe:	4988      	ldr	r1, [pc, #544]	@ (800b820 <_strtod_l+0x588>)
 800b600:	3b01      	subs	r3, #1
 800b602:	a819      	add	r0, sp, #100	@ 0x64
 800b604:	9319      	str	r3, [sp, #100]	@ 0x64
 800b606:	f003 fd27 	bl	800f058 <__match>
 800b60a:	b910      	cbnz	r0, 800b612 <_strtod_l+0x37a>
 800b60c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b60e:	3301      	adds	r3, #1
 800b610:	9319      	str	r3, [sp, #100]	@ 0x64
 800b612:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b830 <_strtod_l+0x598>
 800b616:	f04f 0a00 	mov.w	sl, #0
 800b61a:	e676      	b.n	800b30a <_strtod_l+0x72>
 800b61c:	4881      	ldr	r0, [pc, #516]	@ (800b824 <_strtod_l+0x58c>)
 800b61e:	f002 fbbf 	bl	800dda0 <nan>
 800b622:	ec5b ab10 	vmov	sl, fp, d0
 800b626:	e670      	b.n	800b30a <_strtod_l+0x72>
 800b628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b62a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b62c:	eba8 0303 	sub.w	r3, r8, r3
 800b630:	f1b9 0f00 	cmp.w	r9, #0
 800b634:	bf08      	it	eq
 800b636:	46a9      	moveq	r9, r5
 800b638:	2d10      	cmp	r5, #16
 800b63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b63c:	462c      	mov	r4, r5
 800b63e:	bfa8      	it	ge
 800b640:	2410      	movge	r4, #16
 800b642:	f7f4 ff77 	bl	8000534 <__aeabi_ui2d>
 800b646:	2d09      	cmp	r5, #9
 800b648:	4682      	mov	sl, r0
 800b64a:	468b      	mov	fp, r1
 800b64c:	dc13      	bgt.n	800b676 <_strtod_l+0x3de>
 800b64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	f43f ae5a 	beq.w	800b30a <_strtod_l+0x72>
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	dd78      	ble.n	800b74c <_strtod_l+0x4b4>
 800b65a:	2b16      	cmp	r3, #22
 800b65c:	dc5f      	bgt.n	800b71e <_strtod_l+0x486>
 800b65e:	4972      	ldr	r1, [pc, #456]	@ (800b828 <_strtod_l+0x590>)
 800b660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b664:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b668:	4652      	mov	r2, sl
 800b66a:	465b      	mov	r3, fp
 800b66c:	f7f4 ffdc 	bl	8000628 <__aeabi_dmul>
 800b670:	4682      	mov	sl, r0
 800b672:	468b      	mov	fp, r1
 800b674:	e649      	b.n	800b30a <_strtod_l+0x72>
 800b676:	4b6c      	ldr	r3, [pc, #432]	@ (800b828 <_strtod_l+0x590>)
 800b678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b67c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b680:	f7f4 ffd2 	bl	8000628 <__aeabi_dmul>
 800b684:	4682      	mov	sl, r0
 800b686:	4638      	mov	r0, r7
 800b688:	468b      	mov	fp, r1
 800b68a:	f7f4 ff53 	bl	8000534 <__aeabi_ui2d>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	f7f4 fe11 	bl	80002bc <__adddf3>
 800b69a:	2d0f      	cmp	r5, #15
 800b69c:	4682      	mov	sl, r0
 800b69e:	468b      	mov	fp, r1
 800b6a0:	ddd5      	ble.n	800b64e <_strtod_l+0x3b6>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a4:	1b2c      	subs	r4, r5, r4
 800b6a6:	441c      	add	r4, r3
 800b6a8:	2c00      	cmp	r4, #0
 800b6aa:	f340 8093 	ble.w	800b7d4 <_strtod_l+0x53c>
 800b6ae:	f014 030f 	ands.w	r3, r4, #15
 800b6b2:	d00a      	beq.n	800b6ca <_strtod_l+0x432>
 800b6b4:	495c      	ldr	r1, [pc, #368]	@ (800b828 <_strtod_l+0x590>)
 800b6b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	465b      	mov	r3, fp
 800b6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c2:	f7f4 ffb1 	bl	8000628 <__aeabi_dmul>
 800b6c6:	4682      	mov	sl, r0
 800b6c8:	468b      	mov	fp, r1
 800b6ca:	f034 040f 	bics.w	r4, r4, #15
 800b6ce:	d073      	beq.n	800b7b8 <_strtod_l+0x520>
 800b6d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b6d4:	dd49      	ble.n	800b76a <_strtod_l+0x4d2>
 800b6d6:	2400      	movs	r4, #0
 800b6d8:	46a0      	mov	r8, r4
 800b6da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6dc:	46a1      	mov	r9, r4
 800b6de:	9a05      	ldr	r2, [sp, #20]
 800b6e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b830 <_strtod_l+0x598>
 800b6e4:	2322      	movs	r3, #34	@ 0x22
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	f04f 0a00 	mov.w	sl, #0
 800b6ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f43f ae0b 	beq.w	800b30a <_strtod_l+0x72>
 800b6f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6f6:	9805      	ldr	r0, [sp, #20]
 800b6f8:	f003 feb2 	bl	800f460 <_Bfree>
 800b6fc:	9805      	ldr	r0, [sp, #20]
 800b6fe:	4649      	mov	r1, r9
 800b700:	f003 feae 	bl	800f460 <_Bfree>
 800b704:	9805      	ldr	r0, [sp, #20]
 800b706:	4641      	mov	r1, r8
 800b708:	f003 feaa 	bl	800f460 <_Bfree>
 800b70c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b70e:	9805      	ldr	r0, [sp, #20]
 800b710:	f003 fea6 	bl	800f460 <_Bfree>
 800b714:	9805      	ldr	r0, [sp, #20]
 800b716:	4621      	mov	r1, r4
 800b718:	f003 fea2 	bl	800f460 <_Bfree>
 800b71c:	e5f5      	b.n	800b30a <_strtod_l+0x72>
 800b71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b720:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b724:	4293      	cmp	r3, r2
 800b726:	dbbc      	blt.n	800b6a2 <_strtod_l+0x40a>
 800b728:	4c3f      	ldr	r4, [pc, #252]	@ (800b828 <_strtod_l+0x590>)
 800b72a:	f1c5 050f 	rsb	r5, r5, #15
 800b72e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b732:	4652      	mov	r2, sl
 800b734:	465b      	mov	r3, fp
 800b736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b73a:	f7f4 ff75 	bl	8000628 <__aeabi_dmul>
 800b73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b740:	1b5d      	subs	r5, r3, r5
 800b742:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b746:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b74a:	e78f      	b.n	800b66c <_strtod_l+0x3d4>
 800b74c:	3316      	adds	r3, #22
 800b74e:	dba8      	blt.n	800b6a2 <_strtod_l+0x40a>
 800b750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b752:	eba3 0808 	sub.w	r8, r3, r8
 800b756:	4b34      	ldr	r3, [pc, #208]	@ (800b828 <_strtod_l+0x590>)
 800b758:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b75c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b760:	4650      	mov	r0, sl
 800b762:	4659      	mov	r1, fp
 800b764:	f7f5 f88a 	bl	800087c <__aeabi_ddiv>
 800b768:	e782      	b.n	800b670 <_strtod_l+0x3d8>
 800b76a:	2300      	movs	r3, #0
 800b76c:	4f2f      	ldr	r7, [pc, #188]	@ (800b82c <_strtod_l+0x594>)
 800b76e:	1124      	asrs	r4, r4, #4
 800b770:	4650      	mov	r0, sl
 800b772:	4659      	mov	r1, fp
 800b774:	461e      	mov	r6, r3
 800b776:	2c01      	cmp	r4, #1
 800b778:	dc21      	bgt.n	800b7be <_strtod_l+0x526>
 800b77a:	b10b      	cbz	r3, 800b780 <_strtod_l+0x4e8>
 800b77c:	4682      	mov	sl, r0
 800b77e:	468b      	mov	fp, r1
 800b780:	492a      	ldr	r1, [pc, #168]	@ (800b82c <_strtod_l+0x594>)
 800b782:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b786:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b78a:	4652      	mov	r2, sl
 800b78c:	465b      	mov	r3, fp
 800b78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b792:	f7f4 ff49 	bl	8000628 <__aeabi_dmul>
 800b796:	4b26      	ldr	r3, [pc, #152]	@ (800b830 <_strtod_l+0x598>)
 800b798:	460a      	mov	r2, r1
 800b79a:	400b      	ands	r3, r1
 800b79c:	4925      	ldr	r1, [pc, #148]	@ (800b834 <_strtod_l+0x59c>)
 800b79e:	428b      	cmp	r3, r1
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	d898      	bhi.n	800b6d6 <_strtod_l+0x43e>
 800b7a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b7a8:	428b      	cmp	r3, r1
 800b7aa:	bf86      	itte	hi
 800b7ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b838 <_strtod_l+0x5a0>
 800b7b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b7b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	9308      	str	r3, [sp, #32]
 800b7bc:	e076      	b.n	800b8ac <_strtod_l+0x614>
 800b7be:	07e2      	lsls	r2, r4, #31
 800b7c0:	d504      	bpl.n	800b7cc <_strtod_l+0x534>
 800b7c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c6:	f7f4 ff2f 	bl	8000628 <__aeabi_dmul>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	3601      	adds	r6, #1
 800b7ce:	1064      	asrs	r4, r4, #1
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	e7d0      	b.n	800b776 <_strtod_l+0x4de>
 800b7d4:	d0f0      	beq.n	800b7b8 <_strtod_l+0x520>
 800b7d6:	4264      	negs	r4, r4
 800b7d8:	f014 020f 	ands.w	r2, r4, #15
 800b7dc:	d00a      	beq.n	800b7f4 <_strtod_l+0x55c>
 800b7de:	4b12      	ldr	r3, [pc, #72]	@ (800b828 <_strtod_l+0x590>)
 800b7e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7e4:	4650      	mov	r0, sl
 800b7e6:	4659      	mov	r1, fp
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f7f5 f846 	bl	800087c <__aeabi_ddiv>
 800b7f0:	4682      	mov	sl, r0
 800b7f2:	468b      	mov	fp, r1
 800b7f4:	1124      	asrs	r4, r4, #4
 800b7f6:	d0df      	beq.n	800b7b8 <_strtod_l+0x520>
 800b7f8:	2c1f      	cmp	r4, #31
 800b7fa:	dd1f      	ble.n	800b83c <_strtod_l+0x5a4>
 800b7fc:	2400      	movs	r4, #0
 800b7fe:	46a0      	mov	r8, r4
 800b800:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b802:	46a1      	mov	r9, r4
 800b804:	9a05      	ldr	r2, [sp, #20]
 800b806:	2322      	movs	r3, #34	@ 0x22
 800b808:	f04f 0a00 	mov.w	sl, #0
 800b80c:	f04f 0b00 	mov.w	fp, #0
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	e76b      	b.n	800b6ec <_strtod_l+0x454>
 800b814:	08011ac7 	.word	0x08011ac7
 800b818:	08011e1c 	.word	0x08011e1c
 800b81c:	08011abf 	.word	0x08011abf
 800b820:	08011c4b 	.word	0x08011c4b
 800b824:	08011e1b 	.word	0x08011e1b
 800b828:	08012068 	.word	0x08012068
 800b82c:	08012040 	.word	0x08012040
 800b830:	7ff00000 	.word	0x7ff00000
 800b834:	7ca00000 	.word	0x7ca00000
 800b838:	7fefffff 	.word	0x7fefffff
 800b83c:	f014 0310 	ands.w	r3, r4, #16
 800b840:	bf18      	it	ne
 800b842:	236a      	movne	r3, #106	@ 0x6a
 800b844:	4ea9      	ldr	r6, [pc, #676]	@ (800baec <_strtod_l+0x854>)
 800b846:	9308      	str	r3, [sp, #32]
 800b848:	4650      	mov	r0, sl
 800b84a:	4659      	mov	r1, fp
 800b84c:	2300      	movs	r3, #0
 800b84e:	07e7      	lsls	r7, r4, #31
 800b850:	d504      	bpl.n	800b85c <_strtod_l+0x5c4>
 800b852:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b856:	f7f4 fee7 	bl	8000628 <__aeabi_dmul>
 800b85a:	2301      	movs	r3, #1
 800b85c:	1064      	asrs	r4, r4, #1
 800b85e:	f106 0608 	add.w	r6, r6, #8
 800b862:	d1f4      	bne.n	800b84e <_strtod_l+0x5b6>
 800b864:	b10b      	cbz	r3, 800b86a <_strtod_l+0x5d2>
 800b866:	4682      	mov	sl, r0
 800b868:	468b      	mov	fp, r1
 800b86a:	9b08      	ldr	r3, [sp, #32]
 800b86c:	b1b3      	cbz	r3, 800b89c <_strtod_l+0x604>
 800b86e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b872:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b876:	2b00      	cmp	r3, #0
 800b878:	4659      	mov	r1, fp
 800b87a:	dd0f      	ble.n	800b89c <_strtod_l+0x604>
 800b87c:	2b1f      	cmp	r3, #31
 800b87e:	dd56      	ble.n	800b92e <_strtod_l+0x696>
 800b880:	2b34      	cmp	r3, #52	@ 0x34
 800b882:	bfde      	ittt	le
 800b884:	f04f 33ff 	movle.w	r3, #4294967295
 800b888:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b88c:	4093      	lslle	r3, r2
 800b88e:	f04f 0a00 	mov.w	sl, #0
 800b892:	bfcc      	ite	gt
 800b894:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b898:	ea03 0b01 	andle.w	fp, r3, r1
 800b89c:	2200      	movs	r2, #0
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	f7f5 f928 	bl	8000af8 <__aeabi_dcmpeq>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d1a7      	bne.n	800b7fc <_strtod_l+0x564>
 800b8ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8b2:	9805      	ldr	r0, [sp, #20]
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	464a      	mov	r2, r9
 800b8b8:	f003 fe3a 	bl	800f530 <__s2b>
 800b8bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	f43f af09 	beq.w	800b6d6 <_strtod_l+0x43e>
 800b8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8c8:	2a00      	cmp	r2, #0
 800b8ca:	eba3 0308 	sub.w	r3, r3, r8
 800b8ce:	bfa8      	it	ge
 800b8d0:	2300      	movge	r3, #0
 800b8d2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8d4:	2400      	movs	r4, #0
 800b8d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8da:	9316      	str	r3, [sp, #88]	@ 0x58
 800b8dc:	46a0      	mov	r8, r4
 800b8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e0:	9805      	ldr	r0, [sp, #20]
 800b8e2:	6859      	ldr	r1, [r3, #4]
 800b8e4:	f003 fd7c 	bl	800f3e0 <_Balloc>
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	f43f aef7 	beq.w	800b6de <_strtod_l+0x446>
 800b8f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8f2:	691a      	ldr	r2, [r3, #16]
 800b8f4:	3202      	adds	r2, #2
 800b8f6:	f103 010c 	add.w	r1, r3, #12
 800b8fa:	0092      	lsls	r2, r2, #2
 800b8fc:	300c      	adds	r0, #12
 800b8fe:	f002 fa40 	bl	800dd82 <memcpy>
 800b902:	ec4b ab10 	vmov	d0, sl, fp
 800b906:	9805      	ldr	r0, [sp, #20]
 800b908:	aa1c      	add	r2, sp, #112	@ 0x70
 800b90a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b90c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b910:	f004 f942 	bl	800fb98 <__d2b>
 800b914:	901a      	str	r0, [sp, #104]	@ 0x68
 800b916:	2800      	cmp	r0, #0
 800b918:	f43f aee1 	beq.w	800b6de <_strtod_l+0x446>
 800b91c:	9805      	ldr	r0, [sp, #20]
 800b91e:	2101      	movs	r1, #1
 800b920:	f003 fe9c 	bl	800f65c <__i2b>
 800b924:	4680      	mov	r8, r0
 800b926:	b948      	cbnz	r0, 800b93c <_strtod_l+0x6a4>
 800b928:	f04f 0800 	mov.w	r8, #0
 800b92c:	e6d7      	b.n	800b6de <_strtod_l+0x446>
 800b92e:	f04f 32ff 	mov.w	r2, #4294967295
 800b932:	fa02 f303 	lsl.w	r3, r2, r3
 800b936:	ea03 0a0a 	and.w	sl, r3, sl
 800b93a:	e7af      	b.n	800b89c <_strtod_l+0x604>
 800b93c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b93e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b940:	2d00      	cmp	r5, #0
 800b942:	bfab      	itete	ge
 800b944:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b946:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b948:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b94a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b94c:	bfac      	ite	ge
 800b94e:	18ef      	addge	r7, r5, r3
 800b950:	1b5e      	sublt	r6, r3, r5
 800b952:	9b08      	ldr	r3, [sp, #32]
 800b954:	1aed      	subs	r5, r5, r3
 800b956:	4415      	add	r5, r2
 800b958:	4b65      	ldr	r3, [pc, #404]	@ (800baf0 <_strtod_l+0x858>)
 800b95a:	3d01      	subs	r5, #1
 800b95c:	429d      	cmp	r5, r3
 800b95e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b962:	da50      	bge.n	800ba06 <_strtod_l+0x76e>
 800b964:	1b5b      	subs	r3, r3, r5
 800b966:	2b1f      	cmp	r3, #31
 800b968:	eba2 0203 	sub.w	r2, r2, r3
 800b96c:	f04f 0101 	mov.w	r1, #1
 800b970:	dc3d      	bgt.n	800b9ee <_strtod_l+0x756>
 800b972:	fa01 f303 	lsl.w	r3, r1, r3
 800b976:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b978:	2300      	movs	r3, #0
 800b97a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b97c:	18bd      	adds	r5, r7, r2
 800b97e:	9b08      	ldr	r3, [sp, #32]
 800b980:	42af      	cmp	r7, r5
 800b982:	4416      	add	r6, r2
 800b984:	441e      	add	r6, r3
 800b986:	463b      	mov	r3, r7
 800b988:	bfa8      	it	ge
 800b98a:	462b      	movge	r3, r5
 800b98c:	42b3      	cmp	r3, r6
 800b98e:	bfa8      	it	ge
 800b990:	4633      	movge	r3, r6
 800b992:	2b00      	cmp	r3, #0
 800b994:	bfc2      	ittt	gt
 800b996:	1aed      	subgt	r5, r5, r3
 800b998:	1af6      	subgt	r6, r6, r3
 800b99a:	1aff      	subgt	r7, r7, r3
 800b99c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dd16      	ble.n	800b9d0 <_strtod_l+0x738>
 800b9a2:	4641      	mov	r1, r8
 800b9a4:	9805      	ldr	r0, [sp, #20]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f003 ff10 	bl	800f7cc <__pow5mult>
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d0ba      	beq.n	800b928 <_strtod_l+0x690>
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9b6:	9805      	ldr	r0, [sp, #20]
 800b9b8:	f003 fe66 	bl	800f688 <__multiply>
 800b9bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f43f ae8d 	beq.w	800b6de <_strtod_l+0x446>
 800b9c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9c6:	9805      	ldr	r0, [sp, #20]
 800b9c8:	f003 fd4a 	bl	800f460 <_Bfree>
 800b9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	dc1d      	bgt.n	800ba10 <_strtod_l+0x778>
 800b9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dd23      	ble.n	800ba22 <_strtod_l+0x78a>
 800b9da:	4649      	mov	r1, r9
 800b9dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f003 fef4 	bl	800f7cc <__pow5mult>
 800b9e4:	4681      	mov	r9, r0
 800b9e6:	b9e0      	cbnz	r0, 800ba22 <_strtod_l+0x78a>
 800b9e8:	f04f 0900 	mov.w	r9, #0
 800b9ec:	e677      	b.n	800b6de <_strtod_l+0x446>
 800b9ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b9f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b9f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b9fa:	35e2      	adds	r5, #226	@ 0xe2
 800b9fc:	fa01 f305 	lsl.w	r3, r1, r5
 800ba00:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba02:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba04:	e7ba      	b.n	800b97c <_strtod_l+0x6e4>
 800ba06:	2300      	movs	r3, #0
 800ba08:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba0e:	e7b5      	b.n	800b97c <_strtod_l+0x6e4>
 800ba10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba12:	9805      	ldr	r0, [sp, #20]
 800ba14:	462a      	mov	r2, r5
 800ba16:	f003 ff33 	bl	800f880 <__lshift>
 800ba1a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1d9      	bne.n	800b9d4 <_strtod_l+0x73c>
 800ba20:	e65d      	b.n	800b6de <_strtod_l+0x446>
 800ba22:	2e00      	cmp	r6, #0
 800ba24:	dd07      	ble.n	800ba36 <_strtod_l+0x79e>
 800ba26:	4649      	mov	r1, r9
 800ba28:	9805      	ldr	r0, [sp, #20]
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	f003 ff28 	bl	800f880 <__lshift>
 800ba30:	4681      	mov	r9, r0
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0d8      	beq.n	800b9e8 <_strtod_l+0x750>
 800ba36:	2f00      	cmp	r7, #0
 800ba38:	dd08      	ble.n	800ba4c <_strtod_l+0x7b4>
 800ba3a:	4641      	mov	r1, r8
 800ba3c:	9805      	ldr	r0, [sp, #20]
 800ba3e:	463a      	mov	r2, r7
 800ba40:	f003 ff1e 	bl	800f880 <__lshift>
 800ba44:	4680      	mov	r8, r0
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f43f ae49 	beq.w	800b6de <_strtod_l+0x446>
 800ba4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba4e:	9805      	ldr	r0, [sp, #20]
 800ba50:	464a      	mov	r2, r9
 800ba52:	f003 ff9d 	bl	800f990 <__mdiff>
 800ba56:	4604      	mov	r4, r0
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	f43f ae40 	beq.w	800b6de <_strtod_l+0x446>
 800ba5e:	68c3      	ldr	r3, [r0, #12]
 800ba60:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba62:	2300      	movs	r3, #0
 800ba64:	60c3      	str	r3, [r0, #12]
 800ba66:	4641      	mov	r1, r8
 800ba68:	f003 ff76 	bl	800f958 <__mcmp>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	da45      	bge.n	800bafc <_strtod_l+0x864>
 800ba70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba72:	ea53 030a 	orrs.w	r3, r3, sl
 800ba76:	d16b      	bne.n	800bb50 <_strtod_l+0x8b8>
 800ba78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d167      	bne.n	800bb50 <_strtod_l+0x8b8>
 800ba80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba84:	0d1b      	lsrs	r3, r3, #20
 800ba86:	051b      	lsls	r3, r3, #20
 800ba88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba8c:	d960      	bls.n	800bb50 <_strtod_l+0x8b8>
 800ba8e:	6963      	ldr	r3, [r4, #20]
 800ba90:	b913      	cbnz	r3, 800ba98 <_strtod_l+0x800>
 800ba92:	6923      	ldr	r3, [r4, #16]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	dd5b      	ble.n	800bb50 <_strtod_l+0x8b8>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	9805      	ldr	r0, [sp, #20]
 800ba9e:	f003 feef 	bl	800f880 <__lshift>
 800baa2:	4641      	mov	r1, r8
 800baa4:	4604      	mov	r4, r0
 800baa6:	f003 ff57 	bl	800f958 <__mcmp>
 800baaa:	2800      	cmp	r0, #0
 800baac:	dd50      	ble.n	800bb50 <_strtod_l+0x8b8>
 800baae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bab2:	9a08      	ldr	r2, [sp, #32]
 800bab4:	0d1b      	lsrs	r3, r3, #20
 800bab6:	051b      	lsls	r3, r3, #20
 800bab8:	2a00      	cmp	r2, #0
 800baba:	d06a      	beq.n	800bb92 <_strtod_l+0x8fa>
 800babc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bac0:	d867      	bhi.n	800bb92 <_strtod_l+0x8fa>
 800bac2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bac6:	f67f ae9d 	bls.w	800b804 <_strtod_l+0x56c>
 800baca:	4b0a      	ldr	r3, [pc, #40]	@ (800baf4 <_strtod_l+0x85c>)
 800bacc:	4650      	mov	r0, sl
 800bace:	4659      	mov	r1, fp
 800bad0:	2200      	movs	r2, #0
 800bad2:	f7f4 fda9 	bl	8000628 <__aeabi_dmul>
 800bad6:	4b08      	ldr	r3, [pc, #32]	@ (800baf8 <_strtod_l+0x860>)
 800bad8:	400b      	ands	r3, r1
 800bada:	4682      	mov	sl, r0
 800badc:	468b      	mov	fp, r1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f47f ae08 	bne.w	800b6f4 <_strtod_l+0x45c>
 800bae4:	9a05      	ldr	r2, [sp, #20]
 800bae6:	2322      	movs	r3, #34	@ 0x22
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	e603      	b.n	800b6f4 <_strtod_l+0x45c>
 800baec:	08011e48 	.word	0x08011e48
 800baf0:	fffffc02 	.word	0xfffffc02
 800baf4:	39500000 	.word	0x39500000
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bb00:	d165      	bne.n	800bbce <_strtod_l+0x936>
 800bb02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb08:	b35a      	cbz	r2, 800bb62 <_strtod_l+0x8ca>
 800bb0a:	4a9f      	ldr	r2, [pc, #636]	@ (800bd88 <_strtod_l+0xaf0>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d12b      	bne.n	800bb68 <_strtod_l+0x8d0>
 800bb10:	9b08      	ldr	r3, [sp, #32]
 800bb12:	4651      	mov	r1, sl
 800bb14:	b303      	cbz	r3, 800bb58 <_strtod_l+0x8c0>
 800bb16:	4b9d      	ldr	r3, [pc, #628]	@ (800bd8c <_strtod_l+0xaf4>)
 800bb18:	465a      	mov	r2, fp
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295
 800bb24:	d81b      	bhi.n	800bb5e <_strtod_l+0x8c6>
 800bb26:	0d1b      	lsrs	r3, r3, #20
 800bb28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb30:	4299      	cmp	r1, r3
 800bb32:	d119      	bne.n	800bb68 <_strtod_l+0x8d0>
 800bb34:	4b96      	ldr	r3, [pc, #600]	@ (800bd90 <_strtod_l+0xaf8>)
 800bb36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d102      	bne.n	800bb42 <_strtod_l+0x8aa>
 800bb3c:	3101      	adds	r1, #1
 800bb3e:	f43f adce 	beq.w	800b6de <_strtod_l+0x446>
 800bb42:	4b92      	ldr	r3, [pc, #584]	@ (800bd8c <_strtod_l+0xaf4>)
 800bb44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb46:	401a      	ands	r2, r3
 800bb48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb4c:	f04f 0a00 	mov.w	sl, #0
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1b9      	bne.n	800baca <_strtod_l+0x832>
 800bb56:	e5cd      	b.n	800b6f4 <_strtod_l+0x45c>
 800bb58:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5c:	e7e8      	b.n	800bb30 <_strtod_l+0x898>
 800bb5e:	4613      	mov	r3, r2
 800bb60:	e7e6      	b.n	800bb30 <_strtod_l+0x898>
 800bb62:	ea53 030a 	orrs.w	r3, r3, sl
 800bb66:	d0a2      	beq.n	800baae <_strtod_l+0x816>
 800bb68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb6a:	b1db      	cbz	r3, 800bba4 <_strtod_l+0x90c>
 800bb6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb6e:	4213      	tst	r3, r2
 800bb70:	d0ee      	beq.n	800bb50 <_strtod_l+0x8b8>
 800bb72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb74:	9a08      	ldr	r2, [sp, #32]
 800bb76:	4650      	mov	r0, sl
 800bb78:	4659      	mov	r1, fp
 800bb7a:	b1bb      	cbz	r3, 800bbac <_strtod_l+0x914>
 800bb7c:	f7ff fb6b 	bl	800b256 <sulp>
 800bb80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb84:	ec53 2b10 	vmov	r2, r3, d0
 800bb88:	f7f4 fb98 	bl	80002bc <__adddf3>
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	468b      	mov	fp, r1
 800bb90:	e7de      	b.n	800bb50 <_strtod_l+0x8b8>
 800bb92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bb96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb9e:	f04f 3aff 	mov.w	sl, #4294967295
 800bba2:	e7d5      	b.n	800bb50 <_strtod_l+0x8b8>
 800bba4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bba6:	ea13 0f0a 	tst.w	r3, sl
 800bbaa:	e7e1      	b.n	800bb70 <_strtod_l+0x8d8>
 800bbac:	f7ff fb53 	bl	800b256 <sulp>
 800bbb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbb4:	ec53 2b10 	vmov	r2, r3, d0
 800bbb8:	f7f4 fb7e 	bl	80002b8 <__aeabi_dsub>
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	468b      	mov	fp, r1
 800bbc4:	f7f4 ff98 	bl	8000af8 <__aeabi_dcmpeq>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d0c1      	beq.n	800bb50 <_strtod_l+0x8b8>
 800bbcc:	e61a      	b.n	800b804 <_strtod_l+0x56c>
 800bbce:	4641      	mov	r1, r8
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f004 f839 	bl	800fc48 <__ratio>
 800bbd6:	ec57 6b10 	vmov	r6, r7, d0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	f7f4 ff9c 	bl	8000b20 <__aeabi_dcmple>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d06f      	beq.n	800bccc <_strtod_l+0xa34>
 800bbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d17a      	bne.n	800bce8 <_strtod_l+0xa50>
 800bbf2:	f1ba 0f00 	cmp.w	sl, #0
 800bbf6:	d158      	bne.n	800bcaa <_strtod_l+0xa12>
 800bbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d15a      	bne.n	800bcb8 <_strtod_l+0xa20>
 800bc02:	4b64      	ldr	r3, [pc, #400]	@ (800bd94 <_strtod_l+0xafc>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	4630      	mov	r0, r6
 800bc08:	4639      	mov	r1, r7
 800bc0a:	f7f4 ff7f 	bl	8000b0c <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d159      	bne.n	800bcc6 <_strtod_l+0xa2e>
 800bc12:	4630      	mov	r0, r6
 800bc14:	4639      	mov	r1, r7
 800bc16:	4b60      	ldr	r3, [pc, #384]	@ (800bd98 <_strtod_l+0xb00>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f7f4 fd05 	bl	8000628 <__aeabi_dmul>
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bc26:	9606      	str	r6, [sp, #24]
 800bc28:	9307      	str	r3, [sp, #28]
 800bc2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc2e:	4d57      	ldr	r5, [pc, #348]	@ (800bd8c <_strtod_l+0xaf4>)
 800bc30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc36:	401d      	ands	r5, r3
 800bc38:	4b58      	ldr	r3, [pc, #352]	@ (800bd9c <_strtod_l+0xb04>)
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	f040 80b2 	bne.w	800bda4 <_strtod_l+0xb0c>
 800bc40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc46:	ec4b ab10 	vmov	d0, sl, fp
 800bc4a:	f003 ff35 	bl	800fab8 <__ulp>
 800bc4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc52:	ec51 0b10 	vmov	r0, r1, d0
 800bc56:	f7f4 fce7 	bl	8000628 <__aeabi_dmul>
 800bc5a:	4652      	mov	r2, sl
 800bc5c:	465b      	mov	r3, fp
 800bc5e:	f7f4 fb2d 	bl	80002bc <__adddf3>
 800bc62:	460b      	mov	r3, r1
 800bc64:	4949      	ldr	r1, [pc, #292]	@ (800bd8c <_strtod_l+0xaf4>)
 800bc66:	4a4e      	ldr	r2, [pc, #312]	@ (800bda0 <_strtod_l+0xb08>)
 800bc68:	4019      	ands	r1, r3
 800bc6a:	4291      	cmp	r1, r2
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	d942      	bls.n	800bcf6 <_strtod_l+0xa5e>
 800bc70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc72:	4b47      	ldr	r3, [pc, #284]	@ (800bd90 <_strtod_l+0xaf8>)
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d103      	bne.n	800bc80 <_strtod_l+0x9e8>
 800bc78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	f43f ad2f 	beq.w	800b6de <_strtod_l+0x446>
 800bc80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bd90 <_strtod_l+0xaf8>
 800bc84:	f04f 3aff 	mov.w	sl, #4294967295
 800bc88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc8a:	9805      	ldr	r0, [sp, #20]
 800bc8c:	f003 fbe8 	bl	800f460 <_Bfree>
 800bc90:	9805      	ldr	r0, [sp, #20]
 800bc92:	4649      	mov	r1, r9
 800bc94:	f003 fbe4 	bl	800f460 <_Bfree>
 800bc98:	9805      	ldr	r0, [sp, #20]
 800bc9a:	4641      	mov	r1, r8
 800bc9c:	f003 fbe0 	bl	800f460 <_Bfree>
 800bca0:	9805      	ldr	r0, [sp, #20]
 800bca2:	4621      	mov	r1, r4
 800bca4:	f003 fbdc 	bl	800f460 <_Bfree>
 800bca8:	e619      	b.n	800b8de <_strtod_l+0x646>
 800bcaa:	f1ba 0f01 	cmp.w	sl, #1
 800bcae:	d103      	bne.n	800bcb8 <_strtod_l+0xa20>
 800bcb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f43f ada6 	beq.w	800b804 <_strtod_l+0x56c>
 800bcb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bd68 <_strtod_l+0xad0>
 800bcbc:	4f35      	ldr	r7, [pc, #212]	@ (800bd94 <_strtod_l+0xafc>)
 800bcbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	e7b1      	b.n	800bc2a <_strtod_l+0x992>
 800bcc6:	4f34      	ldr	r7, [pc, #208]	@ (800bd98 <_strtod_l+0xb00>)
 800bcc8:	2600      	movs	r6, #0
 800bcca:	e7aa      	b.n	800bc22 <_strtod_l+0x98a>
 800bccc:	4b32      	ldr	r3, [pc, #200]	@ (800bd98 <_strtod_l+0xb00>)
 800bcce:	4630      	mov	r0, r6
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f7f4 fca8 	bl	8000628 <__aeabi_dmul>
 800bcd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460f      	mov	r7, r1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d09f      	beq.n	800bc22 <_strtod_l+0x98a>
 800bce2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bce6:	e7a0      	b.n	800bc2a <_strtod_l+0x992>
 800bce8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bd70 <_strtod_l+0xad8>
 800bcec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcf0:	ec57 6b17 	vmov	r6, r7, d7
 800bcf4:	e799      	b.n	800bc2a <_strtod_l+0x992>
 800bcf6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bcfa:	9b08      	ldr	r3, [sp, #32]
 800bcfc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1c1      	bne.n	800bc88 <_strtod_l+0x9f0>
 800bd04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd08:	0d1b      	lsrs	r3, r3, #20
 800bd0a:	051b      	lsls	r3, r3, #20
 800bd0c:	429d      	cmp	r5, r3
 800bd0e:	d1bb      	bne.n	800bc88 <_strtod_l+0x9f0>
 800bd10:	4630      	mov	r0, r6
 800bd12:	4639      	mov	r1, r7
 800bd14:	f7f5 f838 	bl	8000d88 <__aeabi_d2lz>
 800bd18:	f7f4 fc58 	bl	80005cc <__aeabi_l2d>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4630      	mov	r0, r6
 800bd22:	4639      	mov	r1, r7
 800bd24:	f7f4 fac8 	bl	80002b8 <__aeabi_dsub>
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd36:	ea46 060a 	orr.w	r6, r6, sl
 800bd3a:	431e      	orrs	r6, r3
 800bd3c:	d06f      	beq.n	800be1e <_strtod_l+0xb86>
 800bd3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bd78 <_strtod_l+0xae0>)
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	f7f4 fee2 	bl	8000b0c <__aeabi_dcmplt>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f47f acd3 	bne.w	800b6f4 <_strtod_l+0x45c>
 800bd4e:	a30c      	add	r3, pc, #48	@ (adr r3, 800bd80 <_strtod_l+0xae8>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd58:	f7f4 fef6 	bl	8000b48 <__aeabi_dcmpgt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d093      	beq.n	800bc88 <_strtod_l+0x9f0>
 800bd60:	e4c8      	b.n	800b6f4 <_strtod_l+0x45c>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	00000000 	.word	0x00000000
 800bd6c:	bff00000 	.word	0xbff00000
 800bd70:	00000000 	.word	0x00000000
 800bd74:	3ff00000 	.word	0x3ff00000
 800bd78:	94a03595 	.word	0x94a03595
 800bd7c:	3fdfffff 	.word	0x3fdfffff
 800bd80:	35afe535 	.word	0x35afe535
 800bd84:	3fe00000 	.word	0x3fe00000
 800bd88:	000fffff 	.word	0x000fffff
 800bd8c:	7ff00000 	.word	0x7ff00000
 800bd90:	7fefffff 	.word	0x7fefffff
 800bd94:	3ff00000 	.word	0x3ff00000
 800bd98:	3fe00000 	.word	0x3fe00000
 800bd9c:	7fe00000 	.word	0x7fe00000
 800bda0:	7c9fffff 	.word	0x7c9fffff
 800bda4:	9b08      	ldr	r3, [sp, #32]
 800bda6:	b323      	cbz	r3, 800bdf2 <_strtod_l+0xb5a>
 800bda8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bdac:	d821      	bhi.n	800bdf2 <_strtod_l+0xb5a>
 800bdae:	a328      	add	r3, pc, #160	@ (adr r3, 800be50 <_strtod_l+0xbb8>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	4639      	mov	r1, r7
 800bdb8:	f7f4 feb2 	bl	8000b20 <__aeabi_dcmple>
 800bdbc:	b1a0      	cbz	r0, 800bde8 <_strtod_l+0xb50>
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7f4 ff09 	bl	8000bd8 <__aeabi_d2uiz>
 800bdc6:	2801      	cmp	r0, #1
 800bdc8:	bf38      	it	cc
 800bdca:	2001      	movcc	r0, #1
 800bdcc:	f7f4 fbb2 	bl	8000534 <__aeabi_ui2d>
 800bdd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	b9fb      	cbnz	r3, 800be18 <_strtod_l+0xb80>
 800bdd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bddc:	9014      	str	r0, [sp, #80]	@ 0x50
 800bdde:	9315      	str	r3, [sp, #84]	@ 0x54
 800bde0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bde4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bde8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bdee:	1b5b      	subs	r3, r3, r5
 800bdf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bdf2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bdf6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bdfa:	f003 fe5d 	bl	800fab8 <__ulp>
 800bdfe:	4650      	mov	r0, sl
 800be00:	ec53 2b10 	vmov	r2, r3, d0
 800be04:	4659      	mov	r1, fp
 800be06:	f7f4 fc0f 	bl	8000628 <__aeabi_dmul>
 800be0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be0e:	f7f4 fa55 	bl	80002bc <__adddf3>
 800be12:	4682      	mov	sl, r0
 800be14:	468b      	mov	fp, r1
 800be16:	e770      	b.n	800bcfa <_strtod_l+0xa62>
 800be18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800be1c:	e7e0      	b.n	800bde0 <_strtod_l+0xb48>
 800be1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800be58 <_strtod_l+0xbc0>)
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	f7f4 fe72 	bl	8000b0c <__aeabi_dcmplt>
 800be28:	e798      	b.n	800bd5c <_strtod_l+0xac4>
 800be2a:	2300      	movs	r3, #0
 800be2c:	930e      	str	r3, [sp, #56]	@ 0x38
 800be2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	f7ff ba6d 	b.w	800b312 <_strtod_l+0x7a>
 800be38:	2a65      	cmp	r2, #101	@ 0x65
 800be3a:	f43f ab68 	beq.w	800b50e <_strtod_l+0x276>
 800be3e:	2a45      	cmp	r2, #69	@ 0x45
 800be40:	f43f ab65 	beq.w	800b50e <_strtod_l+0x276>
 800be44:	2301      	movs	r3, #1
 800be46:	f7ff bba0 	b.w	800b58a <_strtod_l+0x2f2>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	ffc00000 	.word	0xffc00000
 800be54:	41dfffff 	.word	0x41dfffff
 800be58:	94a03595 	.word	0x94a03595
 800be5c:	3fcfffff 	.word	0x3fcfffff

0800be60 <strtod>:
 800be60:	460a      	mov	r2, r1
 800be62:	4601      	mov	r1, r0
 800be64:	4802      	ldr	r0, [pc, #8]	@ (800be70 <strtod+0x10>)
 800be66:	4b03      	ldr	r3, [pc, #12]	@ (800be74 <strtod+0x14>)
 800be68:	6800      	ldr	r0, [r0, #0]
 800be6a:	f7ff ba15 	b.w	800b298 <_strtod_l>
 800be6e:	bf00      	nop
 800be70:	200001a4 	.word	0x200001a4
 800be74:	20000038 	.word	0x20000038

0800be78 <_strtol_l.isra.0>:
 800be78:	2b24      	cmp	r3, #36	@ 0x24
 800be7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be7e:	4686      	mov	lr, r0
 800be80:	4690      	mov	r8, r2
 800be82:	d801      	bhi.n	800be88 <_strtol_l.isra.0+0x10>
 800be84:	2b01      	cmp	r3, #1
 800be86:	d106      	bne.n	800be96 <_strtol_l.isra.0+0x1e>
 800be88:	f001 ff44 	bl	800dd14 <__errno>
 800be8c:	2316      	movs	r3, #22
 800be8e:	6003      	str	r3, [r0, #0]
 800be90:	2000      	movs	r0, #0
 800be92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be96:	4834      	ldr	r0, [pc, #208]	@ (800bf68 <_strtol_l.isra.0+0xf0>)
 800be98:	460d      	mov	r5, r1
 800be9a:	462a      	mov	r2, r5
 800be9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bea0:	5d06      	ldrb	r6, [r0, r4]
 800bea2:	f016 0608 	ands.w	r6, r6, #8
 800bea6:	d1f8      	bne.n	800be9a <_strtol_l.isra.0+0x22>
 800bea8:	2c2d      	cmp	r4, #45	@ 0x2d
 800beaa:	d110      	bne.n	800bece <_strtol_l.isra.0+0x56>
 800beac:	782c      	ldrb	r4, [r5, #0]
 800beae:	2601      	movs	r6, #1
 800beb0:	1c95      	adds	r5, r2, #2
 800beb2:	f033 0210 	bics.w	r2, r3, #16
 800beb6:	d115      	bne.n	800bee4 <_strtol_l.isra.0+0x6c>
 800beb8:	2c30      	cmp	r4, #48	@ 0x30
 800beba:	d10d      	bne.n	800bed8 <_strtol_l.isra.0+0x60>
 800bebc:	782a      	ldrb	r2, [r5, #0]
 800bebe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bec2:	2a58      	cmp	r2, #88	@ 0x58
 800bec4:	d108      	bne.n	800bed8 <_strtol_l.isra.0+0x60>
 800bec6:	786c      	ldrb	r4, [r5, #1]
 800bec8:	3502      	adds	r5, #2
 800beca:	2310      	movs	r3, #16
 800becc:	e00a      	b.n	800bee4 <_strtol_l.isra.0+0x6c>
 800bece:	2c2b      	cmp	r4, #43	@ 0x2b
 800bed0:	bf04      	itt	eq
 800bed2:	782c      	ldrbeq	r4, [r5, #0]
 800bed4:	1c95      	addeq	r5, r2, #2
 800bed6:	e7ec      	b.n	800beb2 <_strtol_l.isra.0+0x3a>
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f6      	bne.n	800beca <_strtol_l.isra.0+0x52>
 800bedc:	2c30      	cmp	r4, #48	@ 0x30
 800bede:	bf14      	ite	ne
 800bee0:	230a      	movne	r3, #10
 800bee2:	2308      	moveq	r3, #8
 800bee4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bee8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800beec:	2200      	movs	r2, #0
 800beee:	fbbc f9f3 	udiv	r9, ip, r3
 800bef2:	4610      	mov	r0, r2
 800bef4:	fb03 ca19 	mls	sl, r3, r9, ip
 800bef8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800befc:	2f09      	cmp	r7, #9
 800befe:	d80f      	bhi.n	800bf20 <_strtol_l.isra.0+0xa8>
 800bf00:	463c      	mov	r4, r7
 800bf02:	42a3      	cmp	r3, r4
 800bf04:	dd1b      	ble.n	800bf3e <_strtol_l.isra.0+0xc6>
 800bf06:	1c57      	adds	r7, r2, #1
 800bf08:	d007      	beq.n	800bf1a <_strtol_l.isra.0+0xa2>
 800bf0a:	4581      	cmp	r9, r0
 800bf0c:	d314      	bcc.n	800bf38 <_strtol_l.isra.0+0xc0>
 800bf0e:	d101      	bne.n	800bf14 <_strtol_l.isra.0+0x9c>
 800bf10:	45a2      	cmp	sl, r4
 800bf12:	db11      	blt.n	800bf38 <_strtol_l.isra.0+0xc0>
 800bf14:	fb00 4003 	mla	r0, r0, r3, r4
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf1e:	e7eb      	b.n	800bef8 <_strtol_l.isra.0+0x80>
 800bf20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf24:	2f19      	cmp	r7, #25
 800bf26:	d801      	bhi.n	800bf2c <_strtol_l.isra.0+0xb4>
 800bf28:	3c37      	subs	r4, #55	@ 0x37
 800bf2a:	e7ea      	b.n	800bf02 <_strtol_l.isra.0+0x8a>
 800bf2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf30:	2f19      	cmp	r7, #25
 800bf32:	d804      	bhi.n	800bf3e <_strtol_l.isra.0+0xc6>
 800bf34:	3c57      	subs	r4, #87	@ 0x57
 800bf36:	e7e4      	b.n	800bf02 <_strtol_l.isra.0+0x8a>
 800bf38:	f04f 32ff 	mov.w	r2, #4294967295
 800bf3c:	e7ed      	b.n	800bf1a <_strtol_l.isra.0+0xa2>
 800bf3e:	1c53      	adds	r3, r2, #1
 800bf40:	d108      	bne.n	800bf54 <_strtol_l.isra.0+0xdc>
 800bf42:	2322      	movs	r3, #34	@ 0x22
 800bf44:	f8ce 3000 	str.w	r3, [lr]
 800bf48:	4660      	mov	r0, ip
 800bf4a:	f1b8 0f00 	cmp.w	r8, #0
 800bf4e:	d0a0      	beq.n	800be92 <_strtol_l.isra.0+0x1a>
 800bf50:	1e69      	subs	r1, r5, #1
 800bf52:	e006      	b.n	800bf62 <_strtol_l.isra.0+0xea>
 800bf54:	b106      	cbz	r6, 800bf58 <_strtol_l.isra.0+0xe0>
 800bf56:	4240      	negs	r0, r0
 800bf58:	f1b8 0f00 	cmp.w	r8, #0
 800bf5c:	d099      	beq.n	800be92 <_strtol_l.isra.0+0x1a>
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	d1f6      	bne.n	800bf50 <_strtol_l.isra.0+0xd8>
 800bf62:	f8c8 1000 	str.w	r1, [r8]
 800bf66:	e794      	b.n	800be92 <_strtol_l.isra.0+0x1a>
 800bf68:	08011e71 	.word	0x08011e71

0800bf6c <_strtol_r>:
 800bf6c:	f7ff bf84 	b.w	800be78 <_strtol_l.isra.0>

0800bf70 <strtol>:
 800bf70:	4613      	mov	r3, r2
 800bf72:	460a      	mov	r2, r1
 800bf74:	4601      	mov	r1, r0
 800bf76:	4802      	ldr	r0, [pc, #8]	@ (800bf80 <strtol+0x10>)
 800bf78:	6800      	ldr	r0, [r0, #0]
 800bf7a:	f7ff bf7d 	b.w	800be78 <_strtol_l.isra.0>
 800bf7e:	bf00      	nop
 800bf80:	200001a4 	.word	0x200001a4

0800bf84 <__cvt>:
 800bf84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf88:	ec57 6b10 	vmov	r6, r7, d0
 800bf8c:	2f00      	cmp	r7, #0
 800bf8e:	460c      	mov	r4, r1
 800bf90:	4619      	mov	r1, r3
 800bf92:	463b      	mov	r3, r7
 800bf94:	bfbb      	ittet	lt
 800bf96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bf9a:	461f      	movlt	r7, r3
 800bf9c:	2300      	movge	r3, #0
 800bf9e:	232d      	movlt	r3, #45	@ 0x2d
 800bfa0:	700b      	strb	r3, [r1, #0]
 800bfa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfa4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bfa8:	4691      	mov	r9, r2
 800bfaa:	f023 0820 	bic.w	r8, r3, #32
 800bfae:	bfbc      	itt	lt
 800bfb0:	4632      	movlt	r2, r6
 800bfb2:	4616      	movlt	r6, r2
 800bfb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfb8:	d005      	beq.n	800bfc6 <__cvt+0x42>
 800bfba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bfbe:	d100      	bne.n	800bfc2 <__cvt+0x3e>
 800bfc0:	3401      	adds	r4, #1
 800bfc2:	2102      	movs	r1, #2
 800bfc4:	e000      	b.n	800bfc8 <__cvt+0x44>
 800bfc6:	2103      	movs	r1, #3
 800bfc8:	ab03      	add	r3, sp, #12
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	ab02      	add	r3, sp, #8
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	ec47 6b10 	vmov	d0, r6, r7
 800bfd4:	4653      	mov	r3, sl
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	f001 ff9a 	bl	800df10 <_dtoa_r>
 800bfdc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	d119      	bne.n	800c018 <__cvt+0x94>
 800bfe4:	f019 0f01 	tst.w	r9, #1
 800bfe8:	d00e      	beq.n	800c008 <__cvt+0x84>
 800bfea:	eb00 0904 	add.w	r9, r0, r4
 800bfee:	2200      	movs	r2, #0
 800bff0:	2300      	movs	r3, #0
 800bff2:	4630      	mov	r0, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	f7f4 fd7f 	bl	8000af8 <__aeabi_dcmpeq>
 800bffa:	b108      	cbz	r0, 800c000 <__cvt+0x7c>
 800bffc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c000:	2230      	movs	r2, #48	@ 0x30
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	454b      	cmp	r3, r9
 800c006:	d31e      	bcc.n	800c046 <__cvt+0xc2>
 800c008:	9b03      	ldr	r3, [sp, #12]
 800c00a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c00c:	1b5b      	subs	r3, r3, r5
 800c00e:	4628      	mov	r0, r5
 800c010:	6013      	str	r3, [r2, #0]
 800c012:	b004      	add	sp, #16
 800c014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c01c:	eb00 0904 	add.w	r9, r0, r4
 800c020:	d1e5      	bne.n	800bfee <__cvt+0x6a>
 800c022:	7803      	ldrb	r3, [r0, #0]
 800c024:	2b30      	cmp	r3, #48	@ 0x30
 800c026:	d10a      	bne.n	800c03e <__cvt+0xba>
 800c028:	2200      	movs	r2, #0
 800c02a:	2300      	movs	r3, #0
 800c02c:	4630      	mov	r0, r6
 800c02e:	4639      	mov	r1, r7
 800c030:	f7f4 fd62 	bl	8000af8 <__aeabi_dcmpeq>
 800c034:	b918      	cbnz	r0, 800c03e <__cvt+0xba>
 800c036:	f1c4 0401 	rsb	r4, r4, #1
 800c03a:	f8ca 4000 	str.w	r4, [sl]
 800c03e:	f8da 3000 	ldr.w	r3, [sl]
 800c042:	4499      	add	r9, r3
 800c044:	e7d3      	b.n	800bfee <__cvt+0x6a>
 800c046:	1c59      	adds	r1, r3, #1
 800c048:	9103      	str	r1, [sp, #12]
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	e7d9      	b.n	800c002 <__cvt+0x7e>

0800c04e <__exponent>:
 800c04e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c050:	2900      	cmp	r1, #0
 800c052:	bfba      	itte	lt
 800c054:	4249      	neglt	r1, r1
 800c056:	232d      	movlt	r3, #45	@ 0x2d
 800c058:	232b      	movge	r3, #43	@ 0x2b
 800c05a:	2909      	cmp	r1, #9
 800c05c:	7002      	strb	r2, [r0, #0]
 800c05e:	7043      	strb	r3, [r0, #1]
 800c060:	dd29      	ble.n	800c0b6 <__exponent+0x68>
 800c062:	f10d 0307 	add.w	r3, sp, #7
 800c066:	461d      	mov	r5, r3
 800c068:	270a      	movs	r7, #10
 800c06a:	461a      	mov	r2, r3
 800c06c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c070:	fb07 1416 	mls	r4, r7, r6, r1
 800c074:	3430      	adds	r4, #48	@ 0x30
 800c076:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c07a:	460c      	mov	r4, r1
 800c07c:	2c63      	cmp	r4, #99	@ 0x63
 800c07e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c082:	4631      	mov	r1, r6
 800c084:	dcf1      	bgt.n	800c06a <__exponent+0x1c>
 800c086:	3130      	adds	r1, #48	@ 0x30
 800c088:	1e94      	subs	r4, r2, #2
 800c08a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c08e:	1c41      	adds	r1, r0, #1
 800c090:	4623      	mov	r3, r4
 800c092:	42ab      	cmp	r3, r5
 800c094:	d30a      	bcc.n	800c0ac <__exponent+0x5e>
 800c096:	f10d 0309 	add.w	r3, sp, #9
 800c09a:	1a9b      	subs	r3, r3, r2
 800c09c:	42ac      	cmp	r4, r5
 800c09e:	bf88      	it	hi
 800c0a0:	2300      	movhi	r3, #0
 800c0a2:	3302      	adds	r3, #2
 800c0a4:	4403      	add	r3, r0
 800c0a6:	1a18      	subs	r0, r3, r0
 800c0a8:	b003      	add	sp, #12
 800c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c0b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c0b4:	e7ed      	b.n	800c092 <__exponent+0x44>
 800c0b6:	2330      	movs	r3, #48	@ 0x30
 800c0b8:	3130      	adds	r1, #48	@ 0x30
 800c0ba:	7083      	strb	r3, [r0, #2]
 800c0bc:	70c1      	strb	r1, [r0, #3]
 800c0be:	1d03      	adds	r3, r0, #4
 800c0c0:	e7f1      	b.n	800c0a6 <__exponent+0x58>
	...

0800c0c4 <_printf_float>:
 800c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	b08d      	sub	sp, #52	@ 0x34
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c0d0:	4616      	mov	r6, r2
 800c0d2:	461f      	mov	r7, r3
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	f001 fdc1 	bl	800dc5c <_localeconv_r>
 800c0da:	6803      	ldr	r3, [r0, #0]
 800c0dc:	9304      	str	r3, [sp, #16]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7f4 f8de 	bl	80002a0 <strlen>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ec:	9005      	str	r0, [sp, #20]
 800c0ee:	3307      	adds	r3, #7
 800c0f0:	f023 0307 	bic.w	r3, r3, #7
 800c0f4:	f103 0208 	add.w	r2, r3, #8
 800c0f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c0fc:	f8d4 b000 	ldr.w	fp, [r4]
 800c100:	f8c8 2000 	str.w	r2, [r8]
 800c104:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c108:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c10c:	9307      	str	r3, [sp, #28]
 800c10e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c112:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c11a:	4b9c      	ldr	r3, [pc, #624]	@ (800c38c <_printf_float+0x2c8>)
 800c11c:	f04f 32ff 	mov.w	r2, #4294967295
 800c120:	f7f4 fd1c 	bl	8000b5c <__aeabi_dcmpun>
 800c124:	bb70      	cbnz	r0, 800c184 <_printf_float+0xc0>
 800c126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c12a:	4b98      	ldr	r3, [pc, #608]	@ (800c38c <_printf_float+0x2c8>)
 800c12c:	f04f 32ff 	mov.w	r2, #4294967295
 800c130:	f7f4 fcf6 	bl	8000b20 <__aeabi_dcmple>
 800c134:	bb30      	cbnz	r0, 800c184 <_printf_float+0xc0>
 800c136:	2200      	movs	r2, #0
 800c138:	2300      	movs	r3, #0
 800c13a:	4640      	mov	r0, r8
 800c13c:	4649      	mov	r1, r9
 800c13e:	f7f4 fce5 	bl	8000b0c <__aeabi_dcmplt>
 800c142:	b110      	cbz	r0, 800c14a <_printf_float+0x86>
 800c144:	232d      	movs	r3, #45	@ 0x2d
 800c146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c14a:	4a91      	ldr	r2, [pc, #580]	@ (800c390 <_printf_float+0x2cc>)
 800c14c:	4b91      	ldr	r3, [pc, #580]	@ (800c394 <_printf_float+0x2d0>)
 800c14e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c152:	bf8c      	ite	hi
 800c154:	4690      	movhi	r8, r2
 800c156:	4698      	movls	r8, r3
 800c158:	2303      	movs	r3, #3
 800c15a:	6123      	str	r3, [r4, #16]
 800c15c:	f02b 0304 	bic.w	r3, fp, #4
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	f04f 0900 	mov.w	r9, #0
 800c166:	9700      	str	r7, [sp, #0]
 800c168:	4633      	mov	r3, r6
 800c16a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c16c:	4621      	mov	r1, r4
 800c16e:	4628      	mov	r0, r5
 800c170:	f000 f9d2 	bl	800c518 <_printf_common>
 800c174:	3001      	adds	r0, #1
 800c176:	f040 808d 	bne.w	800c294 <_printf_float+0x1d0>
 800c17a:	f04f 30ff 	mov.w	r0, #4294967295
 800c17e:	b00d      	add	sp, #52	@ 0x34
 800c180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c184:	4642      	mov	r2, r8
 800c186:	464b      	mov	r3, r9
 800c188:	4640      	mov	r0, r8
 800c18a:	4649      	mov	r1, r9
 800c18c:	f7f4 fce6 	bl	8000b5c <__aeabi_dcmpun>
 800c190:	b140      	cbz	r0, 800c1a4 <_printf_float+0xe0>
 800c192:	464b      	mov	r3, r9
 800c194:	2b00      	cmp	r3, #0
 800c196:	bfbc      	itt	lt
 800c198:	232d      	movlt	r3, #45	@ 0x2d
 800c19a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c19e:	4a7e      	ldr	r2, [pc, #504]	@ (800c398 <_printf_float+0x2d4>)
 800c1a0:	4b7e      	ldr	r3, [pc, #504]	@ (800c39c <_printf_float+0x2d8>)
 800c1a2:	e7d4      	b.n	800c14e <_printf_float+0x8a>
 800c1a4:	6863      	ldr	r3, [r4, #4]
 800c1a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c1aa:	9206      	str	r2, [sp, #24]
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	d13b      	bne.n	800c228 <_printf_float+0x164>
 800c1b0:	2306      	movs	r3, #6
 800c1b2:	6063      	str	r3, [r4, #4]
 800c1b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	6022      	str	r2, [r4, #0]
 800c1bc:	9303      	str	r3, [sp, #12]
 800c1be:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c1c4:	ab09      	add	r3, sp, #36	@ 0x24
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	6861      	ldr	r1, [r4, #4]
 800c1ca:	ec49 8b10 	vmov	d0, r8, r9
 800c1ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f7ff fed6 	bl	800bf84 <__cvt>
 800c1d8:	9b06      	ldr	r3, [sp, #24]
 800c1da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1dc:	2b47      	cmp	r3, #71	@ 0x47
 800c1de:	4680      	mov	r8, r0
 800c1e0:	d129      	bne.n	800c236 <_printf_float+0x172>
 800c1e2:	1cc8      	adds	r0, r1, #3
 800c1e4:	db02      	blt.n	800c1ec <_printf_float+0x128>
 800c1e6:	6863      	ldr	r3, [r4, #4]
 800c1e8:	4299      	cmp	r1, r3
 800c1ea:	dd41      	ble.n	800c270 <_printf_float+0x1ac>
 800c1ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800c1f0:	fa5f fa8a 	uxtb.w	sl, sl
 800c1f4:	3901      	subs	r1, #1
 800c1f6:	4652      	mov	r2, sl
 800c1f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c1fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1fe:	f7ff ff26 	bl	800c04e <__exponent>
 800c202:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c204:	1813      	adds	r3, r2, r0
 800c206:	2a01      	cmp	r2, #1
 800c208:	4681      	mov	r9, r0
 800c20a:	6123      	str	r3, [r4, #16]
 800c20c:	dc02      	bgt.n	800c214 <_printf_float+0x150>
 800c20e:	6822      	ldr	r2, [r4, #0]
 800c210:	07d2      	lsls	r2, r2, #31
 800c212:	d501      	bpl.n	800c218 <_printf_float+0x154>
 800c214:	3301      	adds	r3, #1
 800c216:	6123      	str	r3, [r4, #16]
 800c218:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d0a2      	beq.n	800c166 <_printf_float+0xa2>
 800c220:	232d      	movs	r3, #45	@ 0x2d
 800c222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c226:	e79e      	b.n	800c166 <_printf_float+0xa2>
 800c228:	9a06      	ldr	r2, [sp, #24]
 800c22a:	2a47      	cmp	r2, #71	@ 0x47
 800c22c:	d1c2      	bne.n	800c1b4 <_printf_float+0xf0>
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1c0      	bne.n	800c1b4 <_printf_float+0xf0>
 800c232:	2301      	movs	r3, #1
 800c234:	e7bd      	b.n	800c1b2 <_printf_float+0xee>
 800c236:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c23a:	d9db      	bls.n	800c1f4 <_printf_float+0x130>
 800c23c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c240:	d118      	bne.n	800c274 <_printf_float+0x1b0>
 800c242:	2900      	cmp	r1, #0
 800c244:	6863      	ldr	r3, [r4, #4]
 800c246:	dd0b      	ble.n	800c260 <_printf_float+0x19c>
 800c248:	6121      	str	r1, [r4, #16]
 800c24a:	b913      	cbnz	r3, 800c252 <_printf_float+0x18e>
 800c24c:	6822      	ldr	r2, [r4, #0]
 800c24e:	07d0      	lsls	r0, r2, #31
 800c250:	d502      	bpl.n	800c258 <_printf_float+0x194>
 800c252:	3301      	adds	r3, #1
 800c254:	440b      	add	r3, r1
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c25a:	f04f 0900 	mov.w	r9, #0
 800c25e:	e7db      	b.n	800c218 <_printf_float+0x154>
 800c260:	b913      	cbnz	r3, 800c268 <_printf_float+0x1a4>
 800c262:	6822      	ldr	r2, [r4, #0]
 800c264:	07d2      	lsls	r2, r2, #31
 800c266:	d501      	bpl.n	800c26c <_printf_float+0x1a8>
 800c268:	3302      	adds	r3, #2
 800c26a:	e7f4      	b.n	800c256 <_printf_float+0x192>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e7f2      	b.n	800c256 <_printf_float+0x192>
 800c270:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c276:	4299      	cmp	r1, r3
 800c278:	db05      	blt.n	800c286 <_printf_float+0x1c2>
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	6121      	str	r1, [r4, #16]
 800c27e:	07d8      	lsls	r0, r3, #31
 800c280:	d5ea      	bpl.n	800c258 <_printf_float+0x194>
 800c282:	1c4b      	adds	r3, r1, #1
 800c284:	e7e7      	b.n	800c256 <_printf_float+0x192>
 800c286:	2900      	cmp	r1, #0
 800c288:	bfd4      	ite	le
 800c28a:	f1c1 0202 	rsble	r2, r1, #2
 800c28e:	2201      	movgt	r2, #1
 800c290:	4413      	add	r3, r2
 800c292:	e7e0      	b.n	800c256 <_printf_float+0x192>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	055a      	lsls	r2, r3, #21
 800c298:	d407      	bmi.n	800c2aa <_printf_float+0x1e6>
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	4642      	mov	r2, r8
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	47b8      	blx	r7
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d12b      	bne.n	800c300 <_printf_float+0x23c>
 800c2a8:	e767      	b.n	800c17a <_printf_float+0xb6>
 800c2aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c2ae:	f240 80dd 	bls.w	800c46c <_printf_float+0x3a8>
 800c2b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f7f4 fc1d 	bl	8000af8 <__aeabi_dcmpeq>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d033      	beq.n	800c32a <_printf_float+0x266>
 800c2c2:	4a37      	ldr	r2, [pc, #220]	@ (800c3a0 <_printf_float+0x2dc>)
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	47b8      	blx	r7
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	f43f af54 	beq.w	800c17a <_printf_float+0xb6>
 800c2d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c2d6:	4543      	cmp	r3, r8
 800c2d8:	db02      	blt.n	800c2e0 <_printf_float+0x21c>
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	07d8      	lsls	r0, r3, #31
 800c2de:	d50f      	bpl.n	800c300 <_printf_float+0x23c>
 800c2e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f43f af45 	beq.w	800c17a <_printf_float+0xb6>
 800c2f0:	f04f 0900 	mov.w	r9, #0
 800c2f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2f8:	f104 0a1a 	add.w	sl, r4, #26
 800c2fc:	45c8      	cmp	r8, r9
 800c2fe:	dc09      	bgt.n	800c314 <_printf_float+0x250>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	079b      	lsls	r3, r3, #30
 800c304:	f100 8103 	bmi.w	800c50e <_printf_float+0x44a>
 800c308:	68e0      	ldr	r0, [r4, #12]
 800c30a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c30c:	4298      	cmp	r0, r3
 800c30e:	bfb8      	it	lt
 800c310:	4618      	movlt	r0, r3
 800c312:	e734      	b.n	800c17e <_printf_float+0xba>
 800c314:	2301      	movs	r3, #1
 800c316:	4652      	mov	r2, sl
 800c318:	4631      	mov	r1, r6
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b8      	blx	r7
 800c31e:	3001      	adds	r0, #1
 800c320:	f43f af2b 	beq.w	800c17a <_printf_float+0xb6>
 800c324:	f109 0901 	add.w	r9, r9, #1
 800c328:	e7e8      	b.n	800c2fc <_printf_float+0x238>
 800c32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dc39      	bgt.n	800c3a4 <_printf_float+0x2e0>
 800c330:	4a1b      	ldr	r2, [pc, #108]	@ (800c3a0 <_printf_float+0x2dc>)
 800c332:	2301      	movs	r3, #1
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f af1d 	beq.w	800c17a <_printf_float+0xb6>
 800c340:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c344:	ea59 0303 	orrs.w	r3, r9, r3
 800c348:	d102      	bne.n	800c350 <_printf_float+0x28c>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	07d9      	lsls	r1, r3, #31
 800c34e:	d5d7      	bpl.n	800c300 <_printf_float+0x23c>
 800c350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c354:	4631      	mov	r1, r6
 800c356:	4628      	mov	r0, r5
 800c358:	47b8      	blx	r7
 800c35a:	3001      	adds	r0, #1
 800c35c:	f43f af0d 	beq.w	800c17a <_printf_float+0xb6>
 800c360:	f04f 0a00 	mov.w	sl, #0
 800c364:	f104 0b1a 	add.w	fp, r4, #26
 800c368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36a:	425b      	negs	r3, r3
 800c36c:	4553      	cmp	r3, sl
 800c36e:	dc01      	bgt.n	800c374 <_printf_float+0x2b0>
 800c370:	464b      	mov	r3, r9
 800c372:	e793      	b.n	800c29c <_printf_float+0x1d8>
 800c374:	2301      	movs	r3, #1
 800c376:	465a      	mov	r2, fp
 800c378:	4631      	mov	r1, r6
 800c37a:	4628      	mov	r0, r5
 800c37c:	47b8      	blx	r7
 800c37e:	3001      	adds	r0, #1
 800c380:	f43f aefb 	beq.w	800c17a <_printf_float+0xb6>
 800c384:	f10a 0a01 	add.w	sl, sl, #1
 800c388:	e7ee      	b.n	800c368 <_printf_float+0x2a4>
 800c38a:	bf00      	nop
 800c38c:	7fefffff 	.word	0x7fefffff
 800c390:	08011abe 	.word	0x08011abe
 800c394:	08011aba 	.word	0x08011aba
 800c398:	08011ac6 	.word	0x08011ac6
 800c39c:	08011ac2 	.word	0x08011ac2
 800c3a0:	08011d9e 	.word	0x08011d9e
 800c3a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c3a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c3aa:	4553      	cmp	r3, sl
 800c3ac:	bfa8      	it	ge
 800c3ae:	4653      	movge	r3, sl
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	4699      	mov	r9, r3
 800c3b4:	dc36      	bgt.n	800c424 <_printf_float+0x360>
 800c3b6:	f04f 0b00 	mov.w	fp, #0
 800c3ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3be:	f104 021a 	add.w	r2, r4, #26
 800c3c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c3c4:	9306      	str	r3, [sp, #24]
 800c3c6:	eba3 0309 	sub.w	r3, r3, r9
 800c3ca:	455b      	cmp	r3, fp
 800c3cc:	dc31      	bgt.n	800c432 <_printf_float+0x36e>
 800c3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d0:	459a      	cmp	sl, r3
 800c3d2:	dc3a      	bgt.n	800c44a <_printf_float+0x386>
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	07da      	lsls	r2, r3, #31
 800c3d8:	d437      	bmi.n	800c44a <_printf_float+0x386>
 800c3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3dc:	ebaa 0903 	sub.w	r9, sl, r3
 800c3e0:	9b06      	ldr	r3, [sp, #24]
 800c3e2:	ebaa 0303 	sub.w	r3, sl, r3
 800c3e6:	4599      	cmp	r9, r3
 800c3e8:	bfa8      	it	ge
 800c3ea:	4699      	movge	r9, r3
 800c3ec:	f1b9 0f00 	cmp.w	r9, #0
 800c3f0:	dc33      	bgt.n	800c45a <_printf_float+0x396>
 800c3f2:	f04f 0800 	mov.w	r8, #0
 800c3f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3fa:	f104 0b1a 	add.w	fp, r4, #26
 800c3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c400:	ebaa 0303 	sub.w	r3, sl, r3
 800c404:	eba3 0309 	sub.w	r3, r3, r9
 800c408:	4543      	cmp	r3, r8
 800c40a:	f77f af79 	ble.w	800c300 <_printf_float+0x23c>
 800c40e:	2301      	movs	r3, #1
 800c410:	465a      	mov	r2, fp
 800c412:	4631      	mov	r1, r6
 800c414:	4628      	mov	r0, r5
 800c416:	47b8      	blx	r7
 800c418:	3001      	adds	r0, #1
 800c41a:	f43f aeae 	beq.w	800c17a <_printf_float+0xb6>
 800c41e:	f108 0801 	add.w	r8, r8, #1
 800c422:	e7ec      	b.n	800c3fe <_printf_float+0x33a>
 800c424:	4642      	mov	r2, r8
 800c426:	4631      	mov	r1, r6
 800c428:	4628      	mov	r0, r5
 800c42a:	47b8      	blx	r7
 800c42c:	3001      	adds	r0, #1
 800c42e:	d1c2      	bne.n	800c3b6 <_printf_float+0x2f2>
 800c430:	e6a3      	b.n	800c17a <_printf_float+0xb6>
 800c432:	2301      	movs	r3, #1
 800c434:	4631      	mov	r1, r6
 800c436:	4628      	mov	r0, r5
 800c438:	9206      	str	r2, [sp, #24]
 800c43a:	47b8      	blx	r7
 800c43c:	3001      	adds	r0, #1
 800c43e:	f43f ae9c 	beq.w	800c17a <_printf_float+0xb6>
 800c442:	9a06      	ldr	r2, [sp, #24]
 800c444:	f10b 0b01 	add.w	fp, fp, #1
 800c448:	e7bb      	b.n	800c3c2 <_printf_float+0x2fe>
 800c44a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c44e:	4631      	mov	r1, r6
 800c450:	4628      	mov	r0, r5
 800c452:	47b8      	blx	r7
 800c454:	3001      	adds	r0, #1
 800c456:	d1c0      	bne.n	800c3da <_printf_float+0x316>
 800c458:	e68f      	b.n	800c17a <_printf_float+0xb6>
 800c45a:	9a06      	ldr	r2, [sp, #24]
 800c45c:	464b      	mov	r3, r9
 800c45e:	4442      	add	r2, r8
 800c460:	4631      	mov	r1, r6
 800c462:	4628      	mov	r0, r5
 800c464:	47b8      	blx	r7
 800c466:	3001      	adds	r0, #1
 800c468:	d1c3      	bne.n	800c3f2 <_printf_float+0x32e>
 800c46a:	e686      	b.n	800c17a <_printf_float+0xb6>
 800c46c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c470:	f1ba 0f01 	cmp.w	sl, #1
 800c474:	dc01      	bgt.n	800c47a <_printf_float+0x3b6>
 800c476:	07db      	lsls	r3, r3, #31
 800c478:	d536      	bpl.n	800c4e8 <_printf_float+0x424>
 800c47a:	2301      	movs	r3, #1
 800c47c:	4642      	mov	r2, r8
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f ae78 	beq.w	800c17a <_printf_float+0xb6>
 800c48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c48e:	4631      	mov	r1, r6
 800c490:	4628      	mov	r0, r5
 800c492:	47b8      	blx	r7
 800c494:	3001      	adds	r0, #1
 800c496:	f43f ae70 	beq.w	800c17a <_printf_float+0xb6>
 800c49a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4a6:	f7f4 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 800c4aa:	b9c0      	cbnz	r0, 800c4de <_printf_float+0x41a>
 800c4ac:	4653      	mov	r3, sl
 800c4ae:	f108 0201 	add.w	r2, r8, #1
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	47b8      	blx	r7
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d10c      	bne.n	800c4d6 <_printf_float+0x412>
 800c4bc:	e65d      	b.n	800c17a <_printf_float+0xb6>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	465a      	mov	r2, fp
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	47b8      	blx	r7
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	f43f ae56 	beq.w	800c17a <_printf_float+0xb6>
 800c4ce:	f108 0801 	add.w	r8, r8, #1
 800c4d2:	45d0      	cmp	r8, sl
 800c4d4:	dbf3      	blt.n	800c4be <_printf_float+0x3fa>
 800c4d6:	464b      	mov	r3, r9
 800c4d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c4dc:	e6df      	b.n	800c29e <_printf_float+0x1da>
 800c4de:	f04f 0800 	mov.w	r8, #0
 800c4e2:	f104 0b1a 	add.w	fp, r4, #26
 800c4e6:	e7f4      	b.n	800c4d2 <_printf_float+0x40e>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	4642      	mov	r2, r8
 800c4ec:	e7e1      	b.n	800c4b2 <_printf_float+0x3ee>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	464a      	mov	r2, r9
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	47b8      	blx	r7
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	f43f ae3e 	beq.w	800c17a <_printf_float+0xb6>
 800c4fe:	f108 0801 	add.w	r8, r8, #1
 800c502:	68e3      	ldr	r3, [r4, #12]
 800c504:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c506:	1a5b      	subs	r3, r3, r1
 800c508:	4543      	cmp	r3, r8
 800c50a:	dcf0      	bgt.n	800c4ee <_printf_float+0x42a>
 800c50c:	e6fc      	b.n	800c308 <_printf_float+0x244>
 800c50e:	f04f 0800 	mov.w	r8, #0
 800c512:	f104 0919 	add.w	r9, r4, #25
 800c516:	e7f4      	b.n	800c502 <_printf_float+0x43e>

0800c518 <_printf_common>:
 800c518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c51c:	4616      	mov	r6, r2
 800c51e:	4698      	mov	r8, r3
 800c520:	688a      	ldr	r2, [r1, #8]
 800c522:	690b      	ldr	r3, [r1, #16]
 800c524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c528:	4293      	cmp	r3, r2
 800c52a:	bfb8      	it	lt
 800c52c:	4613      	movlt	r3, r2
 800c52e:	6033      	str	r3, [r6, #0]
 800c530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c534:	4607      	mov	r7, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b10a      	cbz	r2, 800c53e <_printf_common+0x26>
 800c53a:	3301      	adds	r3, #1
 800c53c:	6033      	str	r3, [r6, #0]
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	0699      	lsls	r1, r3, #26
 800c542:	bf42      	ittt	mi
 800c544:	6833      	ldrmi	r3, [r6, #0]
 800c546:	3302      	addmi	r3, #2
 800c548:	6033      	strmi	r3, [r6, #0]
 800c54a:	6825      	ldr	r5, [r4, #0]
 800c54c:	f015 0506 	ands.w	r5, r5, #6
 800c550:	d106      	bne.n	800c560 <_printf_common+0x48>
 800c552:	f104 0a19 	add.w	sl, r4, #25
 800c556:	68e3      	ldr	r3, [r4, #12]
 800c558:	6832      	ldr	r2, [r6, #0]
 800c55a:	1a9b      	subs	r3, r3, r2
 800c55c:	42ab      	cmp	r3, r5
 800c55e:	dc26      	bgt.n	800c5ae <_printf_common+0x96>
 800c560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c564:	6822      	ldr	r2, [r4, #0]
 800c566:	3b00      	subs	r3, #0
 800c568:	bf18      	it	ne
 800c56a:	2301      	movne	r3, #1
 800c56c:	0692      	lsls	r2, r2, #26
 800c56e:	d42b      	bmi.n	800c5c8 <_printf_common+0xb0>
 800c570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c574:	4641      	mov	r1, r8
 800c576:	4638      	mov	r0, r7
 800c578:	47c8      	blx	r9
 800c57a:	3001      	adds	r0, #1
 800c57c:	d01e      	beq.n	800c5bc <_printf_common+0xa4>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	6922      	ldr	r2, [r4, #16]
 800c582:	f003 0306 	and.w	r3, r3, #6
 800c586:	2b04      	cmp	r3, #4
 800c588:	bf02      	ittt	eq
 800c58a:	68e5      	ldreq	r5, [r4, #12]
 800c58c:	6833      	ldreq	r3, [r6, #0]
 800c58e:	1aed      	subeq	r5, r5, r3
 800c590:	68a3      	ldr	r3, [r4, #8]
 800c592:	bf0c      	ite	eq
 800c594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c598:	2500      	movne	r5, #0
 800c59a:	4293      	cmp	r3, r2
 800c59c:	bfc4      	itt	gt
 800c59e:	1a9b      	subgt	r3, r3, r2
 800c5a0:	18ed      	addgt	r5, r5, r3
 800c5a2:	2600      	movs	r6, #0
 800c5a4:	341a      	adds	r4, #26
 800c5a6:	42b5      	cmp	r5, r6
 800c5a8:	d11a      	bne.n	800c5e0 <_printf_common+0xc8>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e008      	b.n	800c5c0 <_printf_common+0xa8>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	4641      	mov	r1, r8
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	47c8      	blx	r9
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d103      	bne.n	800c5c4 <_printf_common+0xac>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c4:	3501      	adds	r5, #1
 800c5c6:	e7c6      	b.n	800c556 <_printf_common+0x3e>
 800c5c8:	18e1      	adds	r1, r4, r3
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	2030      	movs	r0, #48	@ 0x30
 800c5ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5d2:	4422      	add	r2, r4
 800c5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5dc:	3302      	adds	r3, #2
 800c5de:	e7c7      	b.n	800c570 <_printf_common+0x58>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	4622      	mov	r2, r4
 800c5e4:	4641      	mov	r1, r8
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	47c8      	blx	r9
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	d0e6      	beq.n	800c5bc <_printf_common+0xa4>
 800c5ee:	3601      	adds	r6, #1
 800c5f0:	e7d9      	b.n	800c5a6 <_printf_common+0x8e>
	...

0800c5f4 <_printf_i>:
 800c5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f8:	7e0f      	ldrb	r7, [r1, #24]
 800c5fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5fc:	2f78      	cmp	r7, #120	@ 0x78
 800c5fe:	4691      	mov	r9, r2
 800c600:	4680      	mov	r8, r0
 800c602:	460c      	mov	r4, r1
 800c604:	469a      	mov	sl, r3
 800c606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c60a:	d807      	bhi.n	800c61c <_printf_i+0x28>
 800c60c:	2f62      	cmp	r7, #98	@ 0x62
 800c60e:	d80a      	bhi.n	800c626 <_printf_i+0x32>
 800c610:	2f00      	cmp	r7, #0
 800c612:	f000 80d1 	beq.w	800c7b8 <_printf_i+0x1c4>
 800c616:	2f58      	cmp	r7, #88	@ 0x58
 800c618:	f000 80b8 	beq.w	800c78c <_printf_i+0x198>
 800c61c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c624:	e03a      	b.n	800c69c <_printf_i+0xa8>
 800c626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c62a:	2b15      	cmp	r3, #21
 800c62c:	d8f6      	bhi.n	800c61c <_printf_i+0x28>
 800c62e:	a101      	add	r1, pc, #4	@ (adr r1, 800c634 <_printf_i+0x40>)
 800c630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c634:	0800c68d 	.word	0x0800c68d
 800c638:	0800c6a1 	.word	0x0800c6a1
 800c63c:	0800c61d 	.word	0x0800c61d
 800c640:	0800c61d 	.word	0x0800c61d
 800c644:	0800c61d 	.word	0x0800c61d
 800c648:	0800c61d 	.word	0x0800c61d
 800c64c:	0800c6a1 	.word	0x0800c6a1
 800c650:	0800c61d 	.word	0x0800c61d
 800c654:	0800c61d 	.word	0x0800c61d
 800c658:	0800c61d 	.word	0x0800c61d
 800c65c:	0800c61d 	.word	0x0800c61d
 800c660:	0800c79f 	.word	0x0800c79f
 800c664:	0800c6cb 	.word	0x0800c6cb
 800c668:	0800c759 	.word	0x0800c759
 800c66c:	0800c61d 	.word	0x0800c61d
 800c670:	0800c61d 	.word	0x0800c61d
 800c674:	0800c7c1 	.word	0x0800c7c1
 800c678:	0800c61d 	.word	0x0800c61d
 800c67c:	0800c6cb 	.word	0x0800c6cb
 800c680:	0800c61d 	.word	0x0800c61d
 800c684:	0800c61d 	.word	0x0800c61d
 800c688:	0800c761 	.word	0x0800c761
 800c68c:	6833      	ldr	r3, [r6, #0]
 800c68e:	1d1a      	adds	r2, r3, #4
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6032      	str	r2, [r6, #0]
 800c694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c69c:	2301      	movs	r3, #1
 800c69e:	e09c      	b.n	800c7da <_printf_i+0x1e6>
 800c6a0:	6833      	ldr	r3, [r6, #0]
 800c6a2:	6820      	ldr	r0, [r4, #0]
 800c6a4:	1d19      	adds	r1, r3, #4
 800c6a6:	6031      	str	r1, [r6, #0]
 800c6a8:	0606      	lsls	r6, r0, #24
 800c6aa:	d501      	bpl.n	800c6b0 <_printf_i+0xbc>
 800c6ac:	681d      	ldr	r5, [r3, #0]
 800c6ae:	e003      	b.n	800c6b8 <_printf_i+0xc4>
 800c6b0:	0645      	lsls	r5, r0, #25
 800c6b2:	d5fb      	bpl.n	800c6ac <_printf_i+0xb8>
 800c6b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	da03      	bge.n	800c6c4 <_printf_i+0xd0>
 800c6bc:	232d      	movs	r3, #45	@ 0x2d
 800c6be:	426d      	negs	r5, r5
 800c6c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6c4:	4858      	ldr	r0, [pc, #352]	@ (800c828 <_printf_i+0x234>)
 800c6c6:	230a      	movs	r3, #10
 800c6c8:	e011      	b.n	800c6ee <_printf_i+0xfa>
 800c6ca:	6821      	ldr	r1, [r4, #0]
 800c6cc:	6833      	ldr	r3, [r6, #0]
 800c6ce:	0608      	lsls	r0, r1, #24
 800c6d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6d4:	d402      	bmi.n	800c6dc <_printf_i+0xe8>
 800c6d6:	0649      	lsls	r1, r1, #25
 800c6d8:	bf48      	it	mi
 800c6da:	b2ad      	uxthmi	r5, r5
 800c6dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6de:	4852      	ldr	r0, [pc, #328]	@ (800c828 <_printf_i+0x234>)
 800c6e0:	6033      	str	r3, [r6, #0]
 800c6e2:	bf14      	ite	ne
 800c6e4:	230a      	movne	r3, #10
 800c6e6:	2308      	moveq	r3, #8
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6ee:	6866      	ldr	r6, [r4, #4]
 800c6f0:	60a6      	str	r6, [r4, #8]
 800c6f2:	2e00      	cmp	r6, #0
 800c6f4:	db05      	blt.n	800c702 <_printf_i+0x10e>
 800c6f6:	6821      	ldr	r1, [r4, #0]
 800c6f8:	432e      	orrs	r6, r5
 800c6fa:	f021 0104 	bic.w	r1, r1, #4
 800c6fe:	6021      	str	r1, [r4, #0]
 800c700:	d04b      	beq.n	800c79a <_printf_i+0x1a6>
 800c702:	4616      	mov	r6, r2
 800c704:	fbb5 f1f3 	udiv	r1, r5, r3
 800c708:	fb03 5711 	mls	r7, r3, r1, r5
 800c70c:	5dc7      	ldrb	r7, [r0, r7]
 800c70e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c712:	462f      	mov	r7, r5
 800c714:	42bb      	cmp	r3, r7
 800c716:	460d      	mov	r5, r1
 800c718:	d9f4      	bls.n	800c704 <_printf_i+0x110>
 800c71a:	2b08      	cmp	r3, #8
 800c71c:	d10b      	bne.n	800c736 <_printf_i+0x142>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	07df      	lsls	r7, r3, #31
 800c722:	d508      	bpl.n	800c736 <_printf_i+0x142>
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	6861      	ldr	r1, [r4, #4]
 800c728:	4299      	cmp	r1, r3
 800c72a:	bfde      	ittt	le
 800c72c:	2330      	movle	r3, #48	@ 0x30
 800c72e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c732:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c736:	1b92      	subs	r2, r2, r6
 800c738:	6122      	str	r2, [r4, #16]
 800c73a:	f8cd a000 	str.w	sl, [sp]
 800c73e:	464b      	mov	r3, r9
 800c740:	aa03      	add	r2, sp, #12
 800c742:	4621      	mov	r1, r4
 800c744:	4640      	mov	r0, r8
 800c746:	f7ff fee7 	bl	800c518 <_printf_common>
 800c74a:	3001      	adds	r0, #1
 800c74c:	d14a      	bne.n	800c7e4 <_printf_i+0x1f0>
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295
 800c752:	b004      	add	sp, #16
 800c754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	f043 0320 	orr.w	r3, r3, #32
 800c75e:	6023      	str	r3, [r4, #0]
 800c760:	4832      	ldr	r0, [pc, #200]	@ (800c82c <_printf_i+0x238>)
 800c762:	2778      	movs	r7, #120	@ 0x78
 800c764:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	6831      	ldr	r1, [r6, #0]
 800c76c:	061f      	lsls	r7, r3, #24
 800c76e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c772:	d402      	bmi.n	800c77a <_printf_i+0x186>
 800c774:	065f      	lsls	r7, r3, #25
 800c776:	bf48      	it	mi
 800c778:	b2ad      	uxthmi	r5, r5
 800c77a:	6031      	str	r1, [r6, #0]
 800c77c:	07d9      	lsls	r1, r3, #31
 800c77e:	bf44      	itt	mi
 800c780:	f043 0320 	orrmi.w	r3, r3, #32
 800c784:	6023      	strmi	r3, [r4, #0]
 800c786:	b11d      	cbz	r5, 800c790 <_printf_i+0x19c>
 800c788:	2310      	movs	r3, #16
 800c78a:	e7ad      	b.n	800c6e8 <_printf_i+0xf4>
 800c78c:	4826      	ldr	r0, [pc, #152]	@ (800c828 <_printf_i+0x234>)
 800c78e:	e7e9      	b.n	800c764 <_printf_i+0x170>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	f023 0320 	bic.w	r3, r3, #32
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	e7f6      	b.n	800c788 <_printf_i+0x194>
 800c79a:	4616      	mov	r6, r2
 800c79c:	e7bd      	b.n	800c71a <_printf_i+0x126>
 800c79e:	6833      	ldr	r3, [r6, #0]
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	6961      	ldr	r1, [r4, #20]
 800c7a4:	1d18      	adds	r0, r3, #4
 800c7a6:	6030      	str	r0, [r6, #0]
 800c7a8:	062e      	lsls	r6, r5, #24
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	d501      	bpl.n	800c7b2 <_printf_i+0x1be>
 800c7ae:	6019      	str	r1, [r3, #0]
 800c7b0:	e002      	b.n	800c7b8 <_printf_i+0x1c4>
 800c7b2:	0668      	lsls	r0, r5, #25
 800c7b4:	d5fb      	bpl.n	800c7ae <_printf_i+0x1ba>
 800c7b6:	8019      	strh	r1, [r3, #0]
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6123      	str	r3, [r4, #16]
 800c7bc:	4616      	mov	r6, r2
 800c7be:	e7bc      	b.n	800c73a <_printf_i+0x146>
 800c7c0:	6833      	ldr	r3, [r6, #0]
 800c7c2:	1d1a      	adds	r2, r3, #4
 800c7c4:	6032      	str	r2, [r6, #0]
 800c7c6:	681e      	ldr	r6, [r3, #0]
 800c7c8:	6862      	ldr	r2, [r4, #4]
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f7f3 fd17 	bl	8000200 <memchr>
 800c7d2:	b108      	cbz	r0, 800c7d8 <_printf_i+0x1e4>
 800c7d4:	1b80      	subs	r0, r0, r6
 800c7d6:	6060      	str	r0, [r4, #4]
 800c7d8:	6863      	ldr	r3, [r4, #4]
 800c7da:	6123      	str	r3, [r4, #16]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7e2:	e7aa      	b.n	800c73a <_printf_i+0x146>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	47d0      	blx	sl
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d0ad      	beq.n	800c74e <_printf_i+0x15a>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	079b      	lsls	r3, r3, #30
 800c7f6:	d413      	bmi.n	800c820 <_printf_i+0x22c>
 800c7f8:	68e0      	ldr	r0, [r4, #12]
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	4298      	cmp	r0, r3
 800c7fe:	bfb8      	it	lt
 800c800:	4618      	movlt	r0, r3
 800c802:	e7a6      	b.n	800c752 <_printf_i+0x15e>
 800c804:	2301      	movs	r3, #1
 800c806:	4632      	mov	r2, r6
 800c808:	4649      	mov	r1, r9
 800c80a:	4640      	mov	r0, r8
 800c80c:	47d0      	blx	sl
 800c80e:	3001      	adds	r0, #1
 800c810:	d09d      	beq.n	800c74e <_printf_i+0x15a>
 800c812:	3501      	adds	r5, #1
 800c814:	68e3      	ldr	r3, [r4, #12]
 800c816:	9903      	ldr	r1, [sp, #12]
 800c818:	1a5b      	subs	r3, r3, r1
 800c81a:	42ab      	cmp	r3, r5
 800c81c:	dcf2      	bgt.n	800c804 <_printf_i+0x210>
 800c81e:	e7eb      	b.n	800c7f8 <_printf_i+0x204>
 800c820:	2500      	movs	r5, #0
 800c822:	f104 0619 	add.w	r6, r4, #25
 800c826:	e7f5      	b.n	800c814 <_printf_i+0x220>
 800c828:	08011aca 	.word	0x08011aca
 800c82c:	08011adb 	.word	0x08011adb

0800c830 <std>:
 800c830:	2300      	movs	r3, #0
 800c832:	b510      	push	{r4, lr}
 800c834:	4604      	mov	r4, r0
 800c836:	e9c0 3300 	strd	r3, r3, [r0]
 800c83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c83e:	6083      	str	r3, [r0, #8]
 800c840:	8181      	strh	r1, [r0, #12]
 800c842:	6643      	str	r3, [r0, #100]	@ 0x64
 800c844:	81c2      	strh	r2, [r0, #14]
 800c846:	6183      	str	r3, [r0, #24]
 800c848:	4619      	mov	r1, r3
 800c84a:	2208      	movs	r2, #8
 800c84c:	305c      	adds	r0, #92	@ 0x5c
 800c84e:	f000 faa1 	bl	800cd94 <memset>
 800c852:	4b0d      	ldr	r3, [pc, #52]	@ (800c888 <std+0x58>)
 800c854:	6263      	str	r3, [r4, #36]	@ 0x24
 800c856:	4b0d      	ldr	r3, [pc, #52]	@ (800c88c <std+0x5c>)
 800c858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c85a:	4b0d      	ldr	r3, [pc, #52]	@ (800c890 <std+0x60>)
 800c85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c85e:	4b0d      	ldr	r3, [pc, #52]	@ (800c894 <std+0x64>)
 800c860:	6323      	str	r3, [r4, #48]	@ 0x30
 800c862:	4b0d      	ldr	r3, [pc, #52]	@ (800c898 <std+0x68>)
 800c864:	6224      	str	r4, [r4, #32]
 800c866:	429c      	cmp	r4, r3
 800c868:	d006      	beq.n	800c878 <std+0x48>
 800c86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c86e:	4294      	cmp	r4, r2
 800c870:	d002      	beq.n	800c878 <std+0x48>
 800c872:	33d0      	adds	r3, #208	@ 0xd0
 800c874:	429c      	cmp	r4, r3
 800c876:	d105      	bne.n	800c884 <std+0x54>
 800c878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c880:	f001 ba72 	b.w	800dd68 <__retarget_lock_init_recursive>
 800c884:	bd10      	pop	{r4, pc}
 800c886:	bf00      	nop
 800c888:	0800cbad 	.word	0x0800cbad
 800c88c:	0800cbd3 	.word	0x0800cbd3
 800c890:	0800cc0b 	.word	0x0800cc0b
 800c894:	0800cc2f 	.word	0x0800cc2f
 800c898:	20006da0 	.word	0x20006da0

0800c89c <stdio_exit_handler>:
 800c89c:	4a02      	ldr	r2, [pc, #8]	@ (800c8a8 <stdio_exit_handler+0xc>)
 800c89e:	4903      	ldr	r1, [pc, #12]	@ (800c8ac <stdio_exit_handler+0x10>)
 800c8a0:	4803      	ldr	r0, [pc, #12]	@ (800c8b0 <stdio_exit_handler+0x14>)
 800c8a2:	f000 b869 	b.w	800c978 <_fwalk_sglue>
 800c8a6:	bf00      	nop
 800c8a8:	20000024 	.word	0x20000024
 800c8ac:	08010ab9 	.word	0x08010ab9
 800c8b0:	200001a8 	.word	0x200001a8

0800c8b4 <cleanup_stdio>:
 800c8b4:	6841      	ldr	r1, [r0, #4]
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c8e8 <cleanup_stdio+0x34>)
 800c8b8:	4299      	cmp	r1, r3
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	4604      	mov	r4, r0
 800c8be:	d001      	beq.n	800c8c4 <cleanup_stdio+0x10>
 800c8c0:	f004 f8fa 	bl	8010ab8 <_fflush_r>
 800c8c4:	68a1      	ldr	r1, [r4, #8]
 800c8c6:	4b09      	ldr	r3, [pc, #36]	@ (800c8ec <cleanup_stdio+0x38>)
 800c8c8:	4299      	cmp	r1, r3
 800c8ca:	d002      	beq.n	800c8d2 <cleanup_stdio+0x1e>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f004 f8f3 	bl	8010ab8 <_fflush_r>
 800c8d2:	68e1      	ldr	r1, [r4, #12]
 800c8d4:	4b06      	ldr	r3, [pc, #24]	@ (800c8f0 <cleanup_stdio+0x3c>)
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d004      	beq.n	800c8e4 <cleanup_stdio+0x30>
 800c8da:	4620      	mov	r0, r4
 800c8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e0:	f004 b8ea 	b.w	8010ab8 <_fflush_r>
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20006da0 	.word	0x20006da0
 800c8ec:	20006e08 	.word	0x20006e08
 800c8f0:	20006e70 	.word	0x20006e70

0800c8f4 <global_stdio_init.part.0>:
 800c8f4:	b510      	push	{r4, lr}
 800c8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <global_stdio_init.part.0+0x30>)
 800c8f8:	4c0b      	ldr	r4, [pc, #44]	@ (800c928 <global_stdio_init.part.0+0x34>)
 800c8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c92c <global_stdio_init.part.0+0x38>)
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	4620      	mov	r0, r4
 800c900:	2200      	movs	r2, #0
 800c902:	2104      	movs	r1, #4
 800c904:	f7ff ff94 	bl	800c830 <std>
 800c908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c90c:	2201      	movs	r2, #1
 800c90e:	2109      	movs	r1, #9
 800c910:	f7ff ff8e 	bl	800c830 <std>
 800c914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c918:	2202      	movs	r2, #2
 800c91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c91e:	2112      	movs	r1, #18
 800c920:	f7ff bf86 	b.w	800c830 <std>
 800c924:	20006ed8 	.word	0x20006ed8
 800c928:	20006da0 	.word	0x20006da0
 800c92c:	0800c89d 	.word	0x0800c89d

0800c930 <__sfp_lock_acquire>:
 800c930:	4801      	ldr	r0, [pc, #4]	@ (800c938 <__sfp_lock_acquire+0x8>)
 800c932:	f001 ba1b 	b.w	800dd6c <__retarget_lock_acquire_recursive>
 800c936:	bf00      	nop
 800c938:	20006f07 	.word	0x20006f07

0800c93c <__sfp_lock_release>:
 800c93c:	4801      	ldr	r0, [pc, #4]	@ (800c944 <__sfp_lock_release+0x8>)
 800c93e:	f001 ba17 	b.w	800dd70 <__retarget_lock_release_recursive>
 800c942:	bf00      	nop
 800c944:	20006f07 	.word	0x20006f07

0800c948 <__sinit>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	4604      	mov	r4, r0
 800c94c:	f7ff fff0 	bl	800c930 <__sfp_lock_acquire>
 800c950:	6a23      	ldr	r3, [r4, #32]
 800c952:	b11b      	cbz	r3, 800c95c <__sinit+0x14>
 800c954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c958:	f7ff bff0 	b.w	800c93c <__sfp_lock_release>
 800c95c:	4b04      	ldr	r3, [pc, #16]	@ (800c970 <__sinit+0x28>)
 800c95e:	6223      	str	r3, [r4, #32]
 800c960:	4b04      	ldr	r3, [pc, #16]	@ (800c974 <__sinit+0x2c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1f5      	bne.n	800c954 <__sinit+0xc>
 800c968:	f7ff ffc4 	bl	800c8f4 <global_stdio_init.part.0>
 800c96c:	e7f2      	b.n	800c954 <__sinit+0xc>
 800c96e:	bf00      	nop
 800c970:	0800c8b5 	.word	0x0800c8b5
 800c974:	20006ed8 	.word	0x20006ed8

0800c978 <_fwalk_sglue>:
 800c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c97c:	4607      	mov	r7, r0
 800c97e:	4688      	mov	r8, r1
 800c980:	4614      	mov	r4, r2
 800c982:	2600      	movs	r6, #0
 800c984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c988:	f1b9 0901 	subs.w	r9, r9, #1
 800c98c:	d505      	bpl.n	800c99a <_fwalk_sglue+0x22>
 800c98e:	6824      	ldr	r4, [r4, #0]
 800c990:	2c00      	cmp	r4, #0
 800c992:	d1f7      	bne.n	800c984 <_fwalk_sglue+0xc>
 800c994:	4630      	mov	r0, r6
 800c996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c99a:	89ab      	ldrh	r3, [r5, #12]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d907      	bls.n	800c9b0 <_fwalk_sglue+0x38>
 800c9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	d003      	beq.n	800c9b0 <_fwalk_sglue+0x38>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	47c0      	blx	r8
 800c9ae:	4306      	orrs	r6, r0
 800c9b0:	3568      	adds	r5, #104	@ 0x68
 800c9b2:	e7e9      	b.n	800c988 <_fwalk_sglue+0x10>

0800c9b4 <iprintf>:
 800c9b4:	b40f      	push	{r0, r1, r2, r3}
 800c9b6:	b507      	push	{r0, r1, r2, lr}
 800c9b8:	4906      	ldr	r1, [pc, #24]	@ (800c9d4 <iprintf+0x20>)
 800c9ba:	ab04      	add	r3, sp, #16
 800c9bc:	6808      	ldr	r0, [r1, #0]
 800c9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c2:	6881      	ldr	r1, [r0, #8]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	f003 fd8d 	bl	80104e4 <_vfiprintf_r>
 800c9ca:	b003      	add	sp, #12
 800c9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9d0:	b004      	add	sp, #16
 800c9d2:	4770      	bx	lr
 800c9d4:	200001a4 	.word	0x200001a4

0800c9d8 <putchar>:
 800c9d8:	4b02      	ldr	r3, [pc, #8]	@ (800c9e4 <putchar+0xc>)
 800c9da:	4601      	mov	r1, r0
 800c9dc:	6818      	ldr	r0, [r3, #0]
 800c9de:	6882      	ldr	r2, [r0, #8]
 800c9e0:	f004 b906 	b.w	8010bf0 <_putc_r>
 800c9e4:	200001a4 	.word	0x200001a4

0800c9e8 <_puts_r>:
 800c9e8:	6a03      	ldr	r3, [r0, #32]
 800c9ea:	b570      	push	{r4, r5, r6, lr}
 800c9ec:	6884      	ldr	r4, [r0, #8]
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	460e      	mov	r6, r1
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <_puts_r+0x10>
 800c9f4:	f7ff ffa8 	bl	800c948 <__sinit>
 800c9f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9fa:	07db      	lsls	r3, r3, #31
 800c9fc:	d405      	bmi.n	800ca0a <_puts_r+0x22>
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	0598      	lsls	r0, r3, #22
 800ca02:	d402      	bmi.n	800ca0a <_puts_r+0x22>
 800ca04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca06:	f001 f9b1 	bl	800dd6c <__retarget_lock_acquire_recursive>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	0719      	lsls	r1, r3, #28
 800ca0e:	d502      	bpl.n	800ca16 <_puts_r+0x2e>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d135      	bne.n	800ca82 <_puts_r+0x9a>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f000 f94b 	bl	800ccb4 <__swsetup_r>
 800ca1e:	b380      	cbz	r0, 800ca82 <_puts_r+0x9a>
 800ca20:	f04f 35ff 	mov.w	r5, #4294967295
 800ca24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca26:	07da      	lsls	r2, r3, #31
 800ca28:	d405      	bmi.n	800ca36 <_puts_r+0x4e>
 800ca2a:	89a3      	ldrh	r3, [r4, #12]
 800ca2c:	059b      	lsls	r3, r3, #22
 800ca2e:	d402      	bmi.n	800ca36 <_puts_r+0x4e>
 800ca30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca32:	f001 f99d 	bl	800dd70 <__retarget_lock_release_recursive>
 800ca36:	4628      	mov	r0, r5
 800ca38:	bd70      	pop	{r4, r5, r6, pc}
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	da04      	bge.n	800ca48 <_puts_r+0x60>
 800ca3e:	69a2      	ldr	r2, [r4, #24]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	dc17      	bgt.n	800ca74 <_puts_r+0x8c>
 800ca44:	290a      	cmp	r1, #10
 800ca46:	d015      	beq.n	800ca74 <_puts_r+0x8c>
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	7019      	strb	r1, [r3, #0]
 800ca50:	68a3      	ldr	r3, [r4, #8]
 800ca52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca56:	3b01      	subs	r3, #1
 800ca58:	60a3      	str	r3, [r4, #8]
 800ca5a:	2900      	cmp	r1, #0
 800ca5c:	d1ed      	bne.n	800ca3a <_puts_r+0x52>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	da11      	bge.n	800ca86 <_puts_r+0x9e>
 800ca62:	4622      	mov	r2, r4
 800ca64:	210a      	movs	r1, #10
 800ca66:	4628      	mov	r0, r5
 800ca68:	f000 f8e5 	bl	800cc36 <__swbuf_r>
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d0d7      	beq.n	800ca20 <_puts_r+0x38>
 800ca70:	250a      	movs	r5, #10
 800ca72:	e7d7      	b.n	800ca24 <_puts_r+0x3c>
 800ca74:	4622      	mov	r2, r4
 800ca76:	4628      	mov	r0, r5
 800ca78:	f000 f8dd 	bl	800cc36 <__swbuf_r>
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d1e7      	bne.n	800ca50 <_puts_r+0x68>
 800ca80:	e7ce      	b.n	800ca20 <_puts_r+0x38>
 800ca82:	3e01      	subs	r6, #1
 800ca84:	e7e4      	b.n	800ca50 <_puts_r+0x68>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	6022      	str	r2, [r4, #0]
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	e7ee      	b.n	800ca70 <_puts_r+0x88>
	...

0800ca94 <puts>:
 800ca94:	4b02      	ldr	r3, [pc, #8]	@ (800caa0 <puts+0xc>)
 800ca96:	4601      	mov	r1, r0
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	f7ff bfa5 	b.w	800c9e8 <_puts_r>
 800ca9e:	bf00      	nop
 800caa0:	200001a4 	.word	0x200001a4

0800caa4 <sniprintf>:
 800caa4:	b40c      	push	{r2, r3}
 800caa6:	b530      	push	{r4, r5, lr}
 800caa8:	4b18      	ldr	r3, [pc, #96]	@ (800cb0c <sniprintf+0x68>)
 800caaa:	1e0c      	subs	r4, r1, #0
 800caac:	681d      	ldr	r5, [r3, #0]
 800caae:	b09d      	sub	sp, #116	@ 0x74
 800cab0:	da08      	bge.n	800cac4 <sniprintf+0x20>
 800cab2:	238b      	movs	r3, #139	@ 0x8b
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f04f 30ff 	mov.w	r0, #4294967295
 800caba:	b01d      	add	sp, #116	@ 0x74
 800cabc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cac0:	b002      	add	sp, #8
 800cac2:	4770      	bx	lr
 800cac4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cac8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cad2:	bf14      	ite	ne
 800cad4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cad8:	4623      	moveq	r3, r4
 800cada:	9304      	str	r3, [sp, #16]
 800cadc:	9307      	str	r3, [sp, #28]
 800cade:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cae2:	9002      	str	r0, [sp, #8]
 800cae4:	9006      	str	r0, [sp, #24]
 800cae6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800caea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800caec:	ab21      	add	r3, sp, #132	@ 0x84
 800caee:	a902      	add	r1, sp, #8
 800caf0:	4628      	mov	r0, r5
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	f003 fa00 	bl	800fef8 <_svfiprintf_r>
 800caf8:	1c43      	adds	r3, r0, #1
 800cafa:	bfbc      	itt	lt
 800cafc:	238b      	movlt	r3, #139	@ 0x8b
 800cafe:	602b      	strlt	r3, [r5, #0]
 800cb00:	2c00      	cmp	r4, #0
 800cb02:	d0da      	beq.n	800caba <sniprintf+0x16>
 800cb04:	9b02      	ldr	r3, [sp, #8]
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	e7d6      	b.n	800caba <sniprintf+0x16>
 800cb0c:	200001a4 	.word	0x200001a4

0800cb10 <siprintf>:
 800cb10:	b40e      	push	{r1, r2, r3}
 800cb12:	b510      	push	{r4, lr}
 800cb14:	b09d      	sub	sp, #116	@ 0x74
 800cb16:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cb18:	9002      	str	r0, [sp, #8]
 800cb1a:	9006      	str	r0, [sp, #24]
 800cb1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb20:	480a      	ldr	r0, [pc, #40]	@ (800cb4c <siprintf+0x3c>)
 800cb22:	9107      	str	r1, [sp, #28]
 800cb24:	9104      	str	r1, [sp, #16]
 800cb26:	490a      	ldr	r1, [pc, #40]	@ (800cb50 <siprintf+0x40>)
 800cb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb2c:	9105      	str	r1, [sp, #20]
 800cb2e:	2400      	movs	r4, #0
 800cb30:	a902      	add	r1, sp, #8
 800cb32:	6800      	ldr	r0, [r0, #0]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb38:	f003 f9de 	bl	800fef8 <_svfiprintf_r>
 800cb3c:	9b02      	ldr	r3, [sp, #8]
 800cb3e:	701c      	strb	r4, [r3, #0]
 800cb40:	b01d      	add	sp, #116	@ 0x74
 800cb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb46:	b003      	add	sp, #12
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	200001a4 	.word	0x200001a4
 800cb50:	ffff0208 	.word	0xffff0208

0800cb54 <siscanf>:
 800cb54:	b40e      	push	{r1, r2, r3}
 800cb56:	b570      	push	{r4, r5, r6, lr}
 800cb58:	b09d      	sub	sp, #116	@ 0x74
 800cb5a:	ac21      	add	r4, sp, #132	@ 0x84
 800cb5c:	2500      	movs	r5, #0
 800cb5e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800cb62:	f854 6b04 	ldr.w	r6, [r4], #4
 800cb66:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cb6a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800cb6c:	9002      	str	r0, [sp, #8]
 800cb6e:	9006      	str	r0, [sp, #24]
 800cb70:	f7f3 fb96 	bl	80002a0 <strlen>
 800cb74:	4b0b      	ldr	r3, [pc, #44]	@ (800cba4 <siscanf+0x50>)
 800cb76:	9003      	str	r0, [sp, #12]
 800cb78:	9007      	str	r0, [sp, #28]
 800cb7a:	480b      	ldr	r0, [pc, #44]	@ (800cba8 <siscanf+0x54>)
 800cb7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb82:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb86:	4632      	mov	r2, r6
 800cb88:	4623      	mov	r3, r4
 800cb8a:	a902      	add	r1, sp, #8
 800cb8c:	6800      	ldr	r0, [r0, #0]
 800cb8e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800cb90:	9514      	str	r5, [sp, #80]	@ 0x50
 800cb92:	9401      	str	r4, [sp, #4]
 800cb94:	f003 fb06 	bl	80101a4 <__ssvfiscanf_r>
 800cb98:	b01d      	add	sp, #116	@ 0x74
 800cb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb9e:	b003      	add	sp, #12
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	0800cbcf 	.word	0x0800cbcf
 800cba8:	200001a4 	.word	0x200001a4

0800cbac <__sread>:
 800cbac:	b510      	push	{r4, lr}
 800cbae:	460c      	mov	r4, r1
 800cbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb4:	f001 f88a 	bl	800dccc <_read_r>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	bfab      	itete	ge
 800cbbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800cbc0:	181b      	addge	r3, r3, r0
 800cbc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbc6:	bfac      	ite	ge
 800cbc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbca:	81a3      	strhlt	r3, [r4, #12]
 800cbcc:	bd10      	pop	{r4, pc}

0800cbce <__seofread>:
 800cbce:	2000      	movs	r0, #0
 800cbd0:	4770      	bx	lr

0800cbd2 <__swrite>:
 800cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	461f      	mov	r7, r3
 800cbd8:	898b      	ldrh	r3, [r1, #12]
 800cbda:	05db      	lsls	r3, r3, #23
 800cbdc:	4605      	mov	r5, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	d505      	bpl.n	800cbf0 <__swrite+0x1e>
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2302      	movs	r3, #2
 800cbea:	2200      	movs	r2, #0
 800cbec:	f001 f85c 	bl	800dca8 <_lseek_r>
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbfa:	81a3      	strh	r3, [r4, #12]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	4628      	mov	r0, r5
 800cc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc06:	f001 b873 	b.w	800dcf0 <_write_r>

0800cc0a <__sseek>:
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc12:	f001 f849 	bl	800dca8 <_lseek_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	bf15      	itete	ne
 800cc1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc26:	81a3      	strheq	r3, [r4, #12]
 800cc28:	bf18      	it	ne
 800cc2a:	81a3      	strhne	r3, [r4, #12]
 800cc2c:	bd10      	pop	{r4, pc}

0800cc2e <__sclose>:
 800cc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc32:	f001 b817 	b.w	800dc64 <_close_r>

0800cc36 <__swbuf_r>:
 800cc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc38:	460e      	mov	r6, r1
 800cc3a:	4614      	mov	r4, r2
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	b118      	cbz	r0, 800cc48 <__swbuf_r+0x12>
 800cc40:	6a03      	ldr	r3, [r0, #32]
 800cc42:	b90b      	cbnz	r3, 800cc48 <__swbuf_r+0x12>
 800cc44:	f7ff fe80 	bl	800c948 <__sinit>
 800cc48:	69a3      	ldr	r3, [r4, #24]
 800cc4a:	60a3      	str	r3, [r4, #8]
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	071a      	lsls	r2, r3, #28
 800cc50:	d501      	bpl.n	800cc56 <__swbuf_r+0x20>
 800cc52:	6923      	ldr	r3, [r4, #16]
 800cc54:	b943      	cbnz	r3, 800cc68 <__swbuf_r+0x32>
 800cc56:	4621      	mov	r1, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	f000 f82b 	bl	800ccb4 <__swsetup_r>
 800cc5e:	b118      	cbz	r0, 800cc68 <__swbuf_r+0x32>
 800cc60:	f04f 37ff 	mov.w	r7, #4294967295
 800cc64:	4638      	mov	r0, r7
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	6922      	ldr	r2, [r4, #16]
 800cc6c:	1a98      	subs	r0, r3, r2
 800cc6e:	6963      	ldr	r3, [r4, #20]
 800cc70:	b2f6      	uxtb	r6, r6
 800cc72:	4283      	cmp	r3, r0
 800cc74:	4637      	mov	r7, r6
 800cc76:	dc05      	bgt.n	800cc84 <__swbuf_r+0x4e>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	f003 ff1c 	bl	8010ab8 <_fflush_r>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d1ed      	bne.n	800cc60 <__swbuf_r+0x2a>
 800cc84:	68a3      	ldr	r3, [r4, #8]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	60a3      	str	r3, [r4, #8]
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	701e      	strb	r6, [r3, #0]
 800cc92:	6962      	ldr	r2, [r4, #20]
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d004      	beq.n	800cca4 <__swbuf_r+0x6e>
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	07db      	lsls	r3, r3, #31
 800cc9e:	d5e1      	bpl.n	800cc64 <__swbuf_r+0x2e>
 800cca0:	2e0a      	cmp	r6, #10
 800cca2:	d1df      	bne.n	800cc64 <__swbuf_r+0x2e>
 800cca4:	4621      	mov	r1, r4
 800cca6:	4628      	mov	r0, r5
 800cca8:	f003 ff06 	bl	8010ab8 <_fflush_r>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0d9      	beq.n	800cc64 <__swbuf_r+0x2e>
 800ccb0:	e7d6      	b.n	800cc60 <__swbuf_r+0x2a>
	...

0800ccb4 <__swsetup_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4b29      	ldr	r3, [pc, #164]	@ (800cd5c <__swsetup_r+0xa8>)
 800ccb8:	4605      	mov	r5, r0
 800ccba:	6818      	ldr	r0, [r3, #0]
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	b118      	cbz	r0, 800ccc8 <__swsetup_r+0x14>
 800ccc0:	6a03      	ldr	r3, [r0, #32]
 800ccc2:	b90b      	cbnz	r3, 800ccc8 <__swsetup_r+0x14>
 800ccc4:	f7ff fe40 	bl	800c948 <__sinit>
 800ccc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cccc:	0719      	lsls	r1, r3, #28
 800ccce:	d422      	bmi.n	800cd16 <__swsetup_r+0x62>
 800ccd0:	06da      	lsls	r2, r3, #27
 800ccd2:	d407      	bmi.n	800cce4 <__swsetup_r+0x30>
 800ccd4:	2209      	movs	r2, #9
 800ccd6:	602a      	str	r2, [r5, #0]
 800ccd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccdc:	81a3      	strh	r3, [r4, #12]
 800ccde:	f04f 30ff 	mov.w	r0, #4294967295
 800cce2:	e033      	b.n	800cd4c <__swsetup_r+0x98>
 800cce4:	0758      	lsls	r0, r3, #29
 800cce6:	d512      	bpl.n	800cd0e <__swsetup_r+0x5a>
 800cce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccea:	b141      	cbz	r1, 800ccfe <__swsetup_r+0x4a>
 800ccec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccf0:	4299      	cmp	r1, r3
 800ccf2:	d002      	beq.n	800ccfa <__swsetup_r+0x46>
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f001 fedb 	bl	800eab0 <_free_r>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd04:	81a3      	strh	r3, [r4, #12]
 800cd06:	2300      	movs	r3, #0
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f043 0308 	orr.w	r3, r3, #8
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	6923      	ldr	r3, [r4, #16]
 800cd18:	b94b      	cbnz	r3, 800cd2e <__swsetup_r+0x7a>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd24:	d003      	beq.n	800cd2e <__swsetup_r+0x7a>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4628      	mov	r0, r5
 800cd2a:	f003 ff25 	bl	8010b78 <__smakebuf_r>
 800cd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd32:	f013 0201 	ands.w	r2, r3, #1
 800cd36:	d00a      	beq.n	800cd4e <__swsetup_r+0x9a>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	60a2      	str	r2, [r4, #8]
 800cd3c:	6962      	ldr	r2, [r4, #20]
 800cd3e:	4252      	negs	r2, r2
 800cd40:	61a2      	str	r2, [r4, #24]
 800cd42:	6922      	ldr	r2, [r4, #16]
 800cd44:	b942      	cbnz	r2, 800cd58 <__swsetup_r+0xa4>
 800cd46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd4a:	d1c5      	bne.n	800ccd8 <__swsetup_r+0x24>
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	0799      	lsls	r1, r3, #30
 800cd50:	bf58      	it	pl
 800cd52:	6962      	ldrpl	r2, [r4, #20]
 800cd54:	60a2      	str	r2, [r4, #8]
 800cd56:	e7f4      	b.n	800cd42 <__swsetup_r+0x8e>
 800cd58:	2000      	movs	r0, #0
 800cd5a:	e7f7      	b.n	800cd4c <__swsetup_r+0x98>
 800cd5c:	200001a4 	.word	0x200001a4

0800cd60 <memmove>:
 800cd60:	4288      	cmp	r0, r1
 800cd62:	b510      	push	{r4, lr}
 800cd64:	eb01 0402 	add.w	r4, r1, r2
 800cd68:	d902      	bls.n	800cd70 <memmove+0x10>
 800cd6a:	4284      	cmp	r4, r0
 800cd6c:	4623      	mov	r3, r4
 800cd6e:	d807      	bhi.n	800cd80 <memmove+0x20>
 800cd70:	1e43      	subs	r3, r0, #1
 800cd72:	42a1      	cmp	r1, r4
 800cd74:	d008      	beq.n	800cd88 <memmove+0x28>
 800cd76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd7e:	e7f8      	b.n	800cd72 <memmove+0x12>
 800cd80:	4402      	add	r2, r0
 800cd82:	4601      	mov	r1, r0
 800cd84:	428a      	cmp	r2, r1
 800cd86:	d100      	bne.n	800cd8a <memmove+0x2a>
 800cd88:	bd10      	pop	{r4, pc}
 800cd8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd92:	e7f7      	b.n	800cd84 <memmove+0x24>

0800cd94 <memset>:
 800cd94:	4402      	add	r2, r0
 800cd96:	4603      	mov	r3, r0
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d100      	bne.n	800cd9e <memset+0xa>
 800cd9c:	4770      	bx	lr
 800cd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cda2:	e7f9      	b.n	800cd98 <memset+0x4>

0800cda4 <strchr>:
 800cda4:	b2c9      	uxtb	r1, r1
 800cda6:	4603      	mov	r3, r0
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdae:	b112      	cbz	r2, 800cdb6 <strchr+0x12>
 800cdb0:	428a      	cmp	r2, r1
 800cdb2:	d1f9      	bne.n	800cda8 <strchr+0x4>
 800cdb4:	4770      	bx	lr
 800cdb6:	2900      	cmp	r1, #0
 800cdb8:	bf18      	it	ne
 800cdba:	2000      	movne	r0, #0
 800cdbc:	4770      	bx	lr

0800cdbe <strcspn>:
 800cdbe:	b570      	push	{r4, r5, r6, lr}
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	461e      	mov	r6, r3
 800cdc4:	f813 4b01 	ldrb.w	r4, [r3], #1
 800cdc8:	b144      	cbz	r4, 800cddc <strcspn+0x1e>
 800cdca:	1e4a      	subs	r2, r1, #1
 800cdcc:	e001      	b.n	800cdd2 <strcspn+0x14>
 800cdce:	42a5      	cmp	r5, r4
 800cdd0:	d004      	beq.n	800cddc <strcspn+0x1e>
 800cdd2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	d1f9      	bne.n	800cdce <strcspn+0x10>
 800cdda:	e7f2      	b.n	800cdc2 <strcspn+0x4>
 800cddc:	1a30      	subs	r0, r6, r0
 800cdde:	bd70      	pop	{r4, r5, r6, pc}

0800cde0 <strncmp>:
 800cde0:	b510      	push	{r4, lr}
 800cde2:	b16a      	cbz	r2, 800ce00 <strncmp+0x20>
 800cde4:	3901      	subs	r1, #1
 800cde6:	1884      	adds	r4, r0, r2
 800cde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d103      	bne.n	800cdfc <strncmp+0x1c>
 800cdf4:	42a0      	cmp	r0, r4
 800cdf6:	d001      	beq.n	800cdfc <strncmp+0x1c>
 800cdf8:	2a00      	cmp	r2, #0
 800cdfa:	d1f5      	bne.n	800cde8 <strncmp+0x8>
 800cdfc:	1ad0      	subs	r0, r2, r3
 800cdfe:	bd10      	pop	{r4, pc}
 800ce00:	4610      	mov	r0, r2
 800ce02:	e7fc      	b.n	800cdfe <strncmp+0x1e>

0800ce04 <strncpy>:
 800ce04:	b510      	push	{r4, lr}
 800ce06:	3901      	subs	r1, #1
 800ce08:	4603      	mov	r3, r0
 800ce0a:	b132      	cbz	r2, 800ce1a <strncpy+0x16>
 800ce0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce10:	f803 4b01 	strb.w	r4, [r3], #1
 800ce14:	3a01      	subs	r2, #1
 800ce16:	2c00      	cmp	r4, #0
 800ce18:	d1f7      	bne.n	800ce0a <strncpy+0x6>
 800ce1a:	441a      	add	r2, r3
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d100      	bne.n	800ce24 <strncpy+0x20>
 800ce22:	bd10      	pop	{r4, pc}
 800ce24:	f803 1b01 	strb.w	r1, [r3], #1
 800ce28:	e7f9      	b.n	800ce1e <strncpy+0x1a>
	...

0800ce2c <strtok>:
 800ce2c:	4b16      	ldr	r3, [pc, #88]	@ (800ce88 <strtok+0x5c>)
 800ce2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce32:	681f      	ldr	r7, [r3, #0]
 800ce34:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ce36:	4605      	mov	r5, r0
 800ce38:	460e      	mov	r6, r1
 800ce3a:	b9ec      	cbnz	r4, 800ce78 <strtok+0x4c>
 800ce3c:	2050      	movs	r0, #80	@ 0x50
 800ce3e:	f002 f9ff 	bl	800f240 <malloc>
 800ce42:	4602      	mov	r2, r0
 800ce44:	6478      	str	r0, [r7, #68]	@ 0x44
 800ce46:	b920      	cbnz	r0, 800ce52 <strtok+0x26>
 800ce48:	4b10      	ldr	r3, [pc, #64]	@ (800ce8c <strtok+0x60>)
 800ce4a:	4811      	ldr	r0, [pc, #68]	@ (800ce90 <strtok+0x64>)
 800ce4c:	215b      	movs	r1, #91	@ 0x5b
 800ce4e:	f000 ffaf 	bl	800ddb0 <__assert_func>
 800ce52:	e9c0 4400 	strd	r4, r4, [r0]
 800ce56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ce5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ce5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ce62:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ce66:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ce6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ce6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ce72:	6184      	str	r4, [r0, #24]
 800ce74:	7704      	strb	r4, [r0, #28]
 800ce76:	6244      	str	r4, [r0, #36]	@ 0x24
 800ce78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce84:	f000 b806 	b.w	800ce94 <__strtok_r>
 800ce88:	200001a4 	.word	0x200001a4
 800ce8c:	08011aec 	.word	0x08011aec
 800ce90:	08011b03 	.word	0x08011b03

0800ce94 <__strtok_r>:
 800ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce96:	4604      	mov	r4, r0
 800ce98:	b908      	cbnz	r0, 800ce9e <__strtok_r+0xa>
 800ce9a:	6814      	ldr	r4, [r2, #0]
 800ce9c:	b144      	cbz	r4, 800ceb0 <__strtok_r+0x1c>
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cea4:	460f      	mov	r7, r1
 800cea6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ceaa:	b91e      	cbnz	r6, 800ceb4 <__strtok_r+0x20>
 800ceac:	b965      	cbnz	r5, 800cec8 <__strtok_r+0x34>
 800ceae:	6015      	str	r5, [r2, #0]
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e005      	b.n	800cec0 <__strtok_r+0x2c>
 800ceb4:	42b5      	cmp	r5, r6
 800ceb6:	d1f6      	bne.n	800cea6 <__strtok_r+0x12>
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1f0      	bne.n	800ce9e <__strtok_r+0xa>
 800cebc:	6014      	str	r4, [r2, #0]
 800cebe:	7003      	strb	r3, [r0, #0]
 800cec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec2:	461c      	mov	r4, r3
 800cec4:	e00c      	b.n	800cee0 <__strtok_r+0x4c>
 800cec6:	b91d      	cbnz	r5, 800ced0 <__strtok_r+0x3c>
 800cec8:	4627      	mov	r7, r4
 800ceca:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cece:	460e      	mov	r6, r1
 800ced0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ced4:	42ab      	cmp	r3, r5
 800ced6:	d1f6      	bne.n	800cec6 <__strtok_r+0x32>
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d0f2      	beq.n	800cec2 <__strtok_r+0x2e>
 800cedc:	2300      	movs	r3, #0
 800cede:	703b      	strb	r3, [r7, #0]
 800cee0:	6014      	str	r4, [r2, #0]
 800cee2:	e7ed      	b.n	800cec0 <__strtok_r+0x2c>

0800cee4 <strstr>:
 800cee4:	780a      	ldrb	r2, [r1, #0]
 800cee6:	b570      	push	{r4, r5, r6, lr}
 800cee8:	b96a      	cbnz	r2, 800cf06 <strstr+0x22>
 800ceea:	bd70      	pop	{r4, r5, r6, pc}
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d109      	bne.n	800cf04 <strstr+0x20>
 800cef0:	460c      	mov	r4, r1
 800cef2:	4605      	mov	r5, r0
 800cef4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0f6      	beq.n	800ceea <strstr+0x6>
 800cefc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cf00:	429e      	cmp	r6, r3
 800cf02:	d0f7      	beq.n	800cef4 <strstr+0x10>
 800cf04:	3001      	adds	r0, #1
 800cf06:	7803      	ldrb	r3, [r0, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1ef      	bne.n	800ceec <strstr+0x8>
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	e7ec      	b.n	800ceea <strstr+0x6>

0800cf10 <ctime>:
 800cf10:	b508      	push	{r3, lr}
 800cf12:	f000 f805 	bl	800cf20 <localtime>
 800cf16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf1a:	f003 bf11 	b.w	8010d40 <asctime>
	...

0800cf20 <localtime>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4b0b      	ldr	r3, [pc, #44]	@ (800cf50 <localtime+0x30>)
 800cf24:	681d      	ldr	r5, [r3, #0]
 800cf26:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800cf28:	4604      	mov	r4, r0
 800cf2a:	b953      	cbnz	r3, 800cf42 <localtime+0x22>
 800cf2c:	2024      	movs	r0, #36	@ 0x24
 800cf2e:	f002 f987 	bl	800f240 <malloc>
 800cf32:	4602      	mov	r2, r0
 800cf34:	6368      	str	r0, [r5, #52]	@ 0x34
 800cf36:	b920      	cbnz	r0, 800cf42 <localtime+0x22>
 800cf38:	4b06      	ldr	r3, [pc, #24]	@ (800cf54 <localtime+0x34>)
 800cf3a:	4807      	ldr	r0, [pc, #28]	@ (800cf58 <localtime+0x38>)
 800cf3c:	2132      	movs	r1, #50	@ 0x32
 800cf3e:	f000 ff37 	bl	800ddb0 <__assert_func>
 800cf42:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800cf44:	4620      	mov	r0, r4
 800cf46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf4a:	f000 b807 	b.w	800cf5c <localtime_r>
 800cf4e:	bf00      	nop
 800cf50:	200001a4 	.word	0x200001a4
 800cf54:	08011aec 	.word	0x08011aec
 800cf58:	08011b5d 	.word	0x08011b5d

0800cf5c <localtime_r>:
 800cf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf60:	460c      	mov	r4, r1
 800cf62:	4607      	mov	r7, r0
 800cf64:	f003 ff34 	bl	8010dd0 <__gettzinfo>
 800cf68:	4621      	mov	r1, r4
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f003 ff33 	bl	8010dd8 <gmtime_r>
 800cf72:	6943      	ldr	r3, [r0, #20]
 800cf74:	0799      	lsls	r1, r3, #30
 800cf76:	4604      	mov	r4, r0
 800cf78:	f203 786c 	addw	r8, r3, #1900	@ 0x76c
 800cf7c:	d106      	bne.n	800cf8c <localtime_r+0x30>
 800cf7e:	2264      	movs	r2, #100	@ 0x64
 800cf80:	fb98 f3f2 	sdiv	r3, r8, r2
 800cf84:	fb02 8313 	mls	r3, r2, r3, r8
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d171      	bne.n	800d070 <localtime_r+0x114>
 800cf8c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800cf90:	fb98 f3f2 	sdiv	r3, r8, r2
 800cf94:	fb02 8313 	mls	r3, r2, r3, r8
 800cf98:	fab3 f383 	clz	r3, r3
 800cf9c:	095b      	lsrs	r3, r3, #5
 800cf9e:	425e      	negs	r6, r3
 800cfa0:	4b64      	ldr	r3, [pc, #400]	@ (800d134 <localtime_r+0x1d8>)
 800cfa2:	f006 0630 	and.w	r6, r6, #48	@ 0x30
 800cfa6:	441e      	add	r6, r3
 800cfa8:	f000 fc24 	bl	800d7f4 <__tz_lock>
 800cfac:	f000 fc2e 	bl	800d80c <_tzset_unlocked>
 800cfb0:	4b61      	ldr	r3, [pc, #388]	@ (800d138 <localtime_r+0x1dc>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d06a      	beq.n	800d08e <localtime_r+0x132>
 800cfb8:	686b      	ldr	r3, [r5, #4]
 800cfba:	4543      	cmp	r3, r8
 800cfbc:	d15a      	bne.n	800d074 <localtime_r+0x118>
 800cfbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfc2:	682f      	ldr	r7, [r5, #0]
 800cfc4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800cfc8:	2f00      	cmp	r7, #0
 800cfca:	d15b      	bne.n	800d084 <localtime_r+0x128>
 800cfcc:	4282      	cmp	r2, r0
 800cfce:	eb73 0101 	sbcs.w	r1, r3, r1
 800cfd2:	db5e      	blt.n	800d092 <localtime_r+0x136>
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	6223      	str	r3, [r4, #32]
 800cfd8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cfda:	6861      	ldr	r1, [r4, #4]
 800cfdc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800cfe0:	fb93 f0f2 	sdiv	r0, r3, r2
 800cfe4:	fb02 3310 	mls	r3, r2, r0, r3
 800cfe8:	223c      	movs	r2, #60	@ 0x3c
 800cfea:	fb93 f5f2 	sdiv	r5, r3, r2
 800cfee:	fb02 3215 	mls	r2, r2, r5, r3
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	1a9b      	subs	r3, r3, r2
 800cff6:	68a2      	ldr	r2, [r4, #8]
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	1b49      	subs	r1, r1, r5
 800cffc:	1a12      	subs	r2, r2, r0
 800cffe:	2b3b      	cmp	r3, #59	@ 0x3b
 800d000:	6061      	str	r1, [r4, #4]
 800d002:	60a2      	str	r2, [r4, #8]
 800d004:	dd51      	ble.n	800d0aa <localtime_r+0x14e>
 800d006:	3101      	adds	r1, #1
 800d008:	6061      	str	r1, [r4, #4]
 800d00a:	3b3c      	subs	r3, #60	@ 0x3c
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	6863      	ldr	r3, [r4, #4]
 800d010:	2b3b      	cmp	r3, #59	@ 0x3b
 800d012:	dd50      	ble.n	800d0b6 <localtime_r+0x15a>
 800d014:	3201      	adds	r2, #1
 800d016:	60a2      	str	r2, [r4, #8]
 800d018:	3b3c      	subs	r3, #60	@ 0x3c
 800d01a:	6063      	str	r3, [r4, #4]
 800d01c:	68a3      	ldr	r3, [r4, #8]
 800d01e:	2b17      	cmp	r3, #23
 800d020:	dd4f      	ble.n	800d0c2 <localtime_r+0x166>
 800d022:	69e2      	ldr	r2, [r4, #28]
 800d024:	3201      	adds	r2, #1
 800d026:	61e2      	str	r2, [r4, #28]
 800d028:	69a2      	ldr	r2, [r4, #24]
 800d02a:	3201      	adds	r2, #1
 800d02c:	2a07      	cmp	r2, #7
 800d02e:	bfa8      	it	ge
 800d030:	2200      	movge	r2, #0
 800d032:	61a2      	str	r2, [r4, #24]
 800d034:	68e2      	ldr	r2, [r4, #12]
 800d036:	3b18      	subs	r3, #24
 800d038:	3201      	adds	r2, #1
 800d03a:	60a3      	str	r3, [r4, #8]
 800d03c:	6923      	ldr	r3, [r4, #16]
 800d03e:	60e2      	str	r2, [r4, #12]
 800d040:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800d044:	428a      	cmp	r2, r1
 800d046:	dd0e      	ble.n	800d066 <localtime_r+0x10a>
 800d048:	2b0b      	cmp	r3, #11
 800d04a:	eba2 0201 	sub.w	r2, r2, r1
 800d04e:	60e2      	str	r2, [r4, #12]
 800d050:	f103 0201 	add.w	r2, r3, #1
 800d054:	bf09      	itett	eq
 800d056:	6963      	ldreq	r3, [r4, #20]
 800d058:	6122      	strne	r2, [r4, #16]
 800d05a:	2200      	moveq	r2, #0
 800d05c:	3301      	addeq	r3, #1
 800d05e:	bf02      	ittt	eq
 800d060:	6122      	streq	r2, [r4, #16]
 800d062:	6163      	streq	r3, [r4, #20]
 800d064:	61e2      	streq	r2, [r4, #28]
 800d066:	f000 fbcb 	bl	800d800 <__tz_unlock>
 800d06a:	4620      	mov	r0, r4
 800d06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d070:	2301      	movs	r3, #1
 800d072:	e794      	b.n	800cf9e <localtime_r+0x42>
 800d074:	4640      	mov	r0, r8
 800d076:	f000 fb09 	bl	800d68c <__tzcalc_limits>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d19f      	bne.n	800cfbe <localtime_r+0x62>
 800d07e:	f04f 33ff 	mov.w	r3, #4294967295
 800d082:	e004      	b.n	800d08e <localtime_r+0x132>
 800d084:	4282      	cmp	r2, r0
 800d086:	eb73 0101 	sbcs.w	r1, r3, r1
 800d08a:	da02      	bge.n	800d092 <localtime_r+0x136>
 800d08c:	2300      	movs	r3, #0
 800d08e:	6223      	str	r3, [r4, #32]
 800d090:	e009      	b.n	800d0a6 <localtime_r+0x14a>
 800d092:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800d096:	4282      	cmp	r2, r0
 800d098:	418b      	sbcs	r3, r1
 800d09a:	bfb4      	ite	lt
 800d09c:	2301      	movlt	r3, #1
 800d09e:	2300      	movge	r3, #0
 800d0a0:	6223      	str	r3, [r4, #32]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d198      	bne.n	800cfd8 <localtime_r+0x7c>
 800d0a6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d0a8:	e797      	b.n	800cfda <localtime_r+0x7e>
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	daaf      	bge.n	800d00e <localtime_r+0xb2>
 800d0ae:	3901      	subs	r1, #1
 800d0b0:	6061      	str	r1, [r4, #4]
 800d0b2:	333c      	adds	r3, #60	@ 0x3c
 800d0b4:	e7aa      	b.n	800d00c <localtime_r+0xb0>
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	dab0      	bge.n	800d01c <localtime_r+0xc0>
 800d0ba:	3a01      	subs	r2, #1
 800d0bc:	60a2      	str	r2, [r4, #8]
 800d0be:	333c      	adds	r3, #60	@ 0x3c
 800d0c0:	e7ab      	b.n	800d01a <localtime_r+0xbe>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dacf      	bge.n	800d066 <localtime_r+0x10a>
 800d0c6:	69e2      	ldr	r2, [r4, #28]
 800d0c8:	3a01      	subs	r2, #1
 800d0ca:	61e2      	str	r2, [r4, #28]
 800d0cc:	69a2      	ldr	r2, [r4, #24]
 800d0ce:	3a01      	subs	r2, #1
 800d0d0:	bf48      	it	mi
 800d0d2:	2206      	movmi	r2, #6
 800d0d4:	61a2      	str	r2, [r4, #24]
 800d0d6:	68e2      	ldr	r2, [r4, #12]
 800d0d8:	3318      	adds	r3, #24
 800d0da:	3a01      	subs	r2, #1
 800d0dc:	60e2      	str	r2, [r4, #12]
 800d0de:	60a3      	str	r3, [r4, #8]
 800d0e0:	2a00      	cmp	r2, #0
 800d0e2:	d1c0      	bne.n	800d066 <localtime_r+0x10a>
 800d0e4:	6923      	ldr	r3, [r4, #16]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	d405      	bmi.n	800d0f6 <localtime_r+0x19a>
 800d0ea:	6123      	str	r3, [r4, #16]
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800d0f2:	60e3      	str	r3, [r4, #12]
 800d0f4:	e7b7      	b.n	800d066 <localtime_r+0x10a>
 800d0f6:	230b      	movs	r3, #11
 800d0f8:	6123      	str	r3, [r4, #16]
 800d0fa:	6963      	ldr	r3, [r4, #20]
 800d0fc:	1e5a      	subs	r2, r3, #1
 800d0fe:	6162      	str	r2, [r4, #20]
 800d100:	0792      	lsls	r2, r2, #30
 800d102:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800d106:	d105      	bne.n	800d114 <localtime_r+0x1b8>
 800d108:	2164      	movs	r1, #100	@ 0x64
 800d10a:	fb93 f2f1 	sdiv	r2, r3, r1
 800d10e:	fb01 3212 	mls	r2, r1, r2, r3
 800d112:	b962      	cbnz	r2, 800d12e <localtime_r+0x1d2>
 800d114:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d118:	fb93 f1f2 	sdiv	r1, r3, r2
 800d11c:	fb02 3311 	mls	r3, r2, r1, r3
 800d120:	fab3 f383 	clz	r3, r3
 800d124:	095b      	lsrs	r3, r3, #5
 800d126:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800d12a:	61e3      	str	r3, [r4, #28]
 800d12c:	e7de      	b.n	800d0ec <localtime_r+0x190>
 800d12e:	2301      	movs	r3, #1
 800d130:	e7f9      	b.n	800d126 <localtime_r+0x1ca>
 800d132:	bf00      	nop
 800d134:	08011fd4 	.word	0x08011fd4
 800d138:	20006efc 	.word	0x20006efc

0800d13c <validate_structure>:
 800d13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13e:	6801      	ldr	r1, [r0, #0]
 800d140:	293b      	cmp	r1, #59	@ 0x3b
 800d142:	4604      	mov	r4, r0
 800d144:	d911      	bls.n	800d16a <validate_structure+0x2e>
 800d146:	223c      	movs	r2, #60	@ 0x3c
 800d148:	4668      	mov	r0, sp
 800d14a:	f000 fe4f 	bl	800ddec <div>
 800d14e:	9a01      	ldr	r2, [sp, #4]
 800d150:	6863      	ldr	r3, [r4, #4]
 800d152:	9900      	ldr	r1, [sp, #0]
 800d154:	2a00      	cmp	r2, #0
 800d156:	440b      	add	r3, r1
 800d158:	6063      	str	r3, [r4, #4]
 800d15a:	bfbb      	ittet	lt
 800d15c:	323c      	addlt	r2, #60	@ 0x3c
 800d15e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d162:	6022      	strge	r2, [r4, #0]
 800d164:	6022      	strlt	r2, [r4, #0]
 800d166:	bfb8      	it	lt
 800d168:	6063      	strlt	r3, [r4, #4]
 800d16a:	6861      	ldr	r1, [r4, #4]
 800d16c:	293b      	cmp	r1, #59	@ 0x3b
 800d16e:	d911      	bls.n	800d194 <validate_structure+0x58>
 800d170:	223c      	movs	r2, #60	@ 0x3c
 800d172:	4668      	mov	r0, sp
 800d174:	f000 fe3a 	bl	800ddec <div>
 800d178:	9a01      	ldr	r2, [sp, #4]
 800d17a:	68a3      	ldr	r3, [r4, #8]
 800d17c:	9900      	ldr	r1, [sp, #0]
 800d17e:	2a00      	cmp	r2, #0
 800d180:	440b      	add	r3, r1
 800d182:	60a3      	str	r3, [r4, #8]
 800d184:	bfbb      	ittet	lt
 800d186:	323c      	addlt	r2, #60	@ 0x3c
 800d188:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d18c:	6062      	strge	r2, [r4, #4]
 800d18e:	6062      	strlt	r2, [r4, #4]
 800d190:	bfb8      	it	lt
 800d192:	60a3      	strlt	r3, [r4, #8]
 800d194:	68a1      	ldr	r1, [r4, #8]
 800d196:	2917      	cmp	r1, #23
 800d198:	d911      	bls.n	800d1be <validate_structure+0x82>
 800d19a:	2218      	movs	r2, #24
 800d19c:	4668      	mov	r0, sp
 800d19e:	f000 fe25 	bl	800ddec <div>
 800d1a2:	9a01      	ldr	r2, [sp, #4]
 800d1a4:	68e3      	ldr	r3, [r4, #12]
 800d1a6:	9900      	ldr	r1, [sp, #0]
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	440b      	add	r3, r1
 800d1ac:	60e3      	str	r3, [r4, #12]
 800d1ae:	bfbb      	ittet	lt
 800d1b0:	3218      	addlt	r2, #24
 800d1b2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d1b6:	60a2      	strge	r2, [r4, #8]
 800d1b8:	60a2      	strlt	r2, [r4, #8]
 800d1ba:	bfb8      	it	lt
 800d1bc:	60e3      	strlt	r3, [r4, #12]
 800d1be:	6921      	ldr	r1, [r4, #16]
 800d1c0:	290b      	cmp	r1, #11
 800d1c2:	d911      	bls.n	800d1e8 <validate_structure+0xac>
 800d1c4:	220c      	movs	r2, #12
 800d1c6:	4668      	mov	r0, sp
 800d1c8:	f000 fe10 	bl	800ddec <div>
 800d1cc:	9a01      	ldr	r2, [sp, #4]
 800d1ce:	6963      	ldr	r3, [r4, #20]
 800d1d0:	9900      	ldr	r1, [sp, #0]
 800d1d2:	2a00      	cmp	r2, #0
 800d1d4:	440b      	add	r3, r1
 800d1d6:	6163      	str	r3, [r4, #20]
 800d1d8:	bfbb      	ittet	lt
 800d1da:	320c      	addlt	r2, #12
 800d1dc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800d1e0:	6122      	strge	r2, [r4, #16]
 800d1e2:	6122      	strlt	r2, [r4, #16]
 800d1e4:	bfb8      	it	lt
 800d1e6:	6163      	strlt	r3, [r4, #20]
 800d1e8:	6963      	ldr	r3, [r4, #20]
 800d1ea:	079a      	lsls	r2, r3, #30
 800d1ec:	d11c      	bne.n	800d228 <validate_structure+0xec>
 800d1ee:	2164      	movs	r1, #100	@ 0x64
 800d1f0:	fb93 f2f1 	sdiv	r2, r3, r1
 800d1f4:	fb01 3212 	mls	r2, r1, r2, r3
 800d1f8:	b9c2      	cbnz	r2, 800d22c <validate_structure+0xf0>
 800d1fa:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800d1fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d202:	fb93 f1f2 	sdiv	r1, r3, r2
 800d206:	fb02 3311 	mls	r3, r2, r1, r3
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	bf0c      	ite	eq
 800d20e:	231d      	moveq	r3, #29
 800d210:	231c      	movne	r3, #28
 800d212:	68e2      	ldr	r2, [r4, #12]
 800d214:	2a00      	cmp	r2, #0
 800d216:	dc0b      	bgt.n	800d230 <validate_structure+0xf4>
 800d218:	4d31      	ldr	r5, [pc, #196]	@ (800d2e0 <validate_structure+0x1a4>)
 800d21a:	200b      	movs	r0, #11
 800d21c:	2164      	movs	r1, #100	@ 0x64
 800d21e:	68e6      	ldr	r6, [r4, #12]
 800d220:	2e00      	cmp	r6, #0
 800d222:	dd30      	ble.n	800d286 <validate_structure+0x14a>
 800d224:	b003      	add	sp, #12
 800d226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d228:	231c      	movs	r3, #28
 800d22a:	e7f2      	b.n	800d212 <validate_structure+0xd6>
 800d22c:	231d      	movs	r3, #29
 800d22e:	e7f0      	b.n	800d212 <validate_structure+0xd6>
 800d230:	4d2b      	ldr	r5, [pc, #172]	@ (800d2e0 <validate_structure+0x1a4>)
 800d232:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800d236:	2a01      	cmp	r2, #1
 800d238:	bf14      	ite	ne
 800d23a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800d23e:	4618      	moveq	r0, r3
 800d240:	4281      	cmp	r1, r0
 800d242:	ddef      	ble.n	800d224 <validate_structure+0xe8>
 800d244:	3201      	adds	r2, #1
 800d246:	1a09      	subs	r1, r1, r0
 800d248:	2a0c      	cmp	r2, #12
 800d24a:	60e1      	str	r1, [r4, #12]
 800d24c:	6122      	str	r2, [r4, #16]
 800d24e:	d1f0      	bne.n	800d232 <validate_structure+0xf6>
 800d250:	6963      	ldr	r3, [r4, #20]
 800d252:	2100      	movs	r1, #0
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	6121      	str	r1, [r4, #16]
 800d258:	0791      	lsls	r1, r2, #30
 800d25a:	6162      	str	r2, [r4, #20]
 800d25c:	d13c      	bne.n	800d2d8 <validate_structure+0x19c>
 800d25e:	2164      	movs	r1, #100	@ 0x64
 800d260:	fb92 f0f1 	sdiv	r0, r2, r1
 800d264:	fb01 2210 	mls	r2, r1, r0, r2
 800d268:	2a00      	cmp	r2, #0
 800d26a:	d137      	bne.n	800d2dc <validate_structure+0x1a0>
 800d26c:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800d270:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d274:	fb93 f1f2 	sdiv	r1, r3, r2
 800d278:	fb02 3311 	mls	r3, r2, r1, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	bf0c      	ite	eq
 800d280:	231d      	moveq	r3, #29
 800d282:	231c      	movne	r3, #28
 800d284:	e7d5      	b.n	800d232 <validate_structure+0xf6>
 800d286:	6922      	ldr	r2, [r4, #16]
 800d288:	3a01      	subs	r2, #1
 800d28a:	6122      	str	r2, [r4, #16]
 800d28c:	3201      	adds	r2, #1
 800d28e:	d116      	bne.n	800d2be <validate_structure+0x182>
 800d290:	6963      	ldr	r3, [r4, #20]
 800d292:	1e5a      	subs	r2, r3, #1
 800d294:	0797      	lsls	r7, r2, #30
 800d296:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800d29a:	d119      	bne.n	800d2d0 <validate_structure+0x194>
 800d29c:	fb92 f7f1 	sdiv	r7, r2, r1
 800d2a0:	fb01 2217 	mls	r2, r1, r7, r2
 800d2a4:	b9b2      	cbnz	r2, 800d2d4 <validate_structure+0x198>
 800d2a6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800d2aa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d2ae:	fb93 f7f2 	sdiv	r7, r3, r2
 800d2b2:	fb02 3317 	mls	r3, r2, r7, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bf0c      	ite	eq
 800d2ba:	231d      	moveq	r3, #29
 800d2bc:	231c      	movne	r3, #28
 800d2be:	6922      	ldr	r2, [r4, #16]
 800d2c0:	2a01      	cmp	r2, #1
 800d2c2:	bf14      	ite	ne
 800d2c4:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800d2c8:	461a      	moveq	r2, r3
 800d2ca:	4432      	add	r2, r6
 800d2cc:	60e2      	str	r2, [r4, #12]
 800d2ce:	e7a6      	b.n	800d21e <validate_structure+0xe2>
 800d2d0:	231c      	movs	r3, #28
 800d2d2:	e7f4      	b.n	800d2be <validate_structure+0x182>
 800d2d4:	231d      	movs	r3, #29
 800d2d6:	e7f2      	b.n	800d2be <validate_structure+0x182>
 800d2d8:	231c      	movs	r3, #28
 800d2da:	e7aa      	b.n	800d232 <validate_structure+0xf6>
 800d2dc:	231d      	movs	r3, #29
 800d2de:	e7a8      	b.n	800d232 <validate_structure+0xf6>
 800d2e0:	08011fa4 	.word	0x08011fa4

0800d2e4 <mktime>:
 800d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	b085      	sub	sp, #20
 800d2ea:	4607      	mov	r7, r0
 800d2ec:	f003 fd70 	bl	8010dd0 <__gettzinfo>
 800d2f0:	4681      	mov	r9, r0
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	f7ff ff22 	bl	800d13c <validate_structure>
 800d2f8:	e9d7 4300 	ldrd	r4, r3, [r7]
 800d2fc:	223c      	movs	r2, #60	@ 0x3c
 800d2fe:	fb02 4403 	mla	r4, r2, r3, r4
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	697d      	ldr	r5, [r7, #20]
 800d306:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800d30a:	fb02 4403 	mla	r4, r2, r3, r4
 800d30e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800d312:	4ac3      	ldr	r2, [pc, #780]	@ (800d620 <mktime+0x33c>)
 800d314:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d318:	3e01      	subs	r6, #1
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	4416      	add	r6, r2
 800d31e:	dd11      	ble.n	800d344 <mktime+0x60>
 800d320:	07a9      	lsls	r1, r5, #30
 800d322:	d10f      	bne.n	800d344 <mktime+0x60>
 800d324:	2264      	movs	r2, #100	@ 0x64
 800d326:	fb95 f3f2 	sdiv	r3, r5, r2
 800d32a:	fb02 5313 	mls	r3, r2, r3, r5
 800d32e:	b943      	cbnz	r3, 800d342 <mktime+0x5e>
 800d330:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800d334:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d338:	fb93 f1f2 	sdiv	r1, r3, r2
 800d33c:	fb02 3311 	mls	r3, r2, r1, r3
 800d340:	b903      	cbnz	r3, 800d344 <mktime+0x60>
 800d342:	3601      	adds	r6, #1
 800d344:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800d348:	3310      	adds	r3, #16
 800d34a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800d34e:	4293      	cmp	r3, r2
 800d350:	61fe      	str	r6, [r7, #28]
 800d352:	f200 8170 	bhi.w	800d636 <mktime+0x352>
 800d356:	2d46      	cmp	r5, #70	@ 0x46
 800d358:	f340 80b6 	ble.w	800d4c8 <mktime+0x1e4>
 800d35c:	2346      	movs	r3, #70	@ 0x46
 800d35e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800d362:	2164      	movs	r1, #100	@ 0x64
 800d364:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800d368:	079a      	lsls	r2, r3, #30
 800d36a:	f040 80a7 	bne.w	800d4bc <mktime+0x1d8>
 800d36e:	fb93 f2f1 	sdiv	r2, r3, r1
 800d372:	fb01 3212 	mls	r2, r1, r2, r3
 800d376:	2a00      	cmp	r2, #0
 800d378:	f040 80a3 	bne.w	800d4c2 <mktime+0x1de>
 800d37c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800d380:	fb92 fef0 	sdiv	lr, r2, r0
 800d384:	fb00 221e 	mls	r2, r0, lr, r2
 800d388:	2a00      	cmp	r2, #0
 800d38a:	bf0c      	ite	eq
 800d38c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800d390:	4662      	movne	r2, ip
 800d392:	3301      	adds	r3, #1
 800d394:	429d      	cmp	r5, r3
 800d396:	4416      	add	r6, r2
 800d398:	d1e6      	bne.n	800d368 <mktime+0x84>
 800d39a:	4ba2      	ldr	r3, [pc, #648]	@ (800d624 <mktime+0x340>)
 800d39c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800d3a0:	fbc6 4803 	smlal	r4, r8, r6, r3
 800d3a4:	f000 fa26 	bl	800d7f4 <__tz_lock>
 800d3a8:	f000 fa30 	bl	800d80c <_tzset_unlocked>
 800d3ac:	4b9e      	ldr	r3, [pc, #632]	@ (800d628 <mktime+0x344>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 8147 	beq.w	800d644 <mktime+0x360>
 800d3b6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800d3ba:	6978      	ldr	r0, [r7, #20]
 800d3bc:	4653      	mov	r3, sl
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	bfa8      	it	ge
 800d3c2:	2301      	movge	r3, #1
 800d3c4:	9301      	str	r3, [sp, #4]
 800d3c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d3ca:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800d3ce:	4283      	cmp	r3, r0
 800d3d0:	f040 80bd 	bne.w	800d54e <mktime+0x26a>
 800d3d4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800d3d8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800d3dc:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800d3e0:	1a13      	subs	r3, r2, r0
 800d3e2:	9303      	str	r3, [sp, #12]
 800d3e4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800d3e8:	9302      	str	r3, [sp, #8]
 800d3ea:	9a02      	ldr	r2, [sp, #8]
 800d3ec:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800d3f0:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800d3f4:	ebb2 0e03 	subs.w	lr, r2, r3
 800d3f8:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800d3fc:	4574      	cmp	r4, lr
 800d3fe:	eb78 0201 	sbcs.w	r2, r8, r1
 800d402:	f280 80c7 	bge.w	800d594 <mktime+0x2b0>
 800d406:	f8d9 2000 	ldr.w	r2, [r9]
 800d40a:	2a00      	cmp	r2, #0
 800d40c:	f000 80d0 	beq.w	800d5b0 <mktime+0x2cc>
 800d410:	9a03      	ldr	r2, [sp, #12]
 800d412:	4294      	cmp	r4, r2
 800d414:	eb78 020b 	sbcs.w	r2, r8, fp
 800d418:	f2c0 8111 	blt.w	800d63e <mktime+0x35a>
 800d41c:	4574      	cmp	r4, lr
 800d41e:	eb78 0101 	sbcs.w	r1, r8, r1
 800d422:	bfb4      	ite	lt
 800d424:	f04f 0b01 	movlt.w	fp, #1
 800d428:	f04f 0b00 	movge.w	fp, #0
 800d42c:	f1ba 0f00 	cmp.w	sl, #0
 800d430:	f2c0 8094 	blt.w	800d55c <mktime+0x278>
 800d434:	9a01      	ldr	r2, [sp, #4]
 800d436:	ea82 0a0b 	eor.w	sl, r2, fp
 800d43a:	f1ba 0f01 	cmp.w	sl, #1
 800d43e:	f040 808d 	bne.w	800d55c <mktime+0x278>
 800d442:	f1bb 0f00 	cmp.w	fp, #0
 800d446:	f000 80c2 	beq.w	800d5ce <mktime+0x2ea>
 800d44a:	1a1b      	subs	r3, r3, r0
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	441a      	add	r2, r3
 800d450:	191c      	adds	r4, r3, r4
 800d452:	603a      	str	r2, [r7, #0]
 800d454:	4638      	mov	r0, r7
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	9201      	str	r2, [sp, #4]
 800d45a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800d45e:	f7ff fe6d 	bl	800d13c <validate_structure>
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	9a01      	ldr	r2, [sp, #4]
 800d466:	1a9b      	subs	r3, r3, r2
 800d468:	d078      	beq.n	800d55c <mktime+0x278>
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	f300 80b1 	bgt.w	800d5d2 <mktime+0x2ee>
 800d470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d474:	bfa8      	it	ge
 800d476:	469a      	movge	sl, r3
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	eb1a 0303 	adds.w	r3, sl, r3
 800d47e:	4456      	add	r6, sl
 800d480:	f140 80b0 	bpl.w	800d5e4 <mktime+0x300>
 800d484:	1e6b      	subs	r3, r5, #1
 800d486:	0799      	lsls	r1, r3, #30
 800d488:	f040 80a6 	bne.w	800d5d8 <mktime+0x2f4>
 800d48c:	2264      	movs	r2, #100	@ 0x64
 800d48e:	fb93 f1f2 	sdiv	r1, r3, r2
 800d492:	fb02 3311 	mls	r3, r2, r1, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	f040 80a1 	bne.w	800d5de <mktime+0x2fa>
 800d49c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d4a0:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800d4a4:	fb95 f2f3 	sdiv	r2, r5, r3
 800d4a8:	fb03 5512 	mls	r5, r3, r2, r5
 800d4ac:	2d00      	cmp	r5, #0
 800d4ae:	f240 136d 	movw	r3, #365	@ 0x16d
 800d4b2:	bf18      	it	ne
 800d4b4:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800d4b8:	61fb      	str	r3, [r7, #28]
 800d4ba:	e04f      	b.n	800d55c <mktime+0x278>
 800d4bc:	f240 126d 	movw	r2, #365	@ 0x16d
 800d4c0:	e767      	b.n	800d392 <mktime+0xae>
 800d4c2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800d4c6:	e764      	b.n	800d392 <mktime+0xae>
 800d4c8:	f43f af67 	beq.w	800d39a <mktime+0xb6>
 800d4cc:	2345      	movs	r3, #69	@ 0x45
 800d4ce:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800d4d2:	2164      	movs	r1, #100	@ 0x64
 800d4d4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800d4d8:	e012      	b.n	800d500 <mktime+0x21c>
 800d4da:	bb62      	cbnz	r2, 800d536 <mktime+0x252>
 800d4dc:	fb93 f2f1 	sdiv	r2, r3, r1
 800d4e0:	fb01 3212 	mls	r2, r1, r2, r3
 800d4e4:	bb52      	cbnz	r2, 800d53c <mktime+0x258>
 800d4e6:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800d4ea:	fb92 fef0 	sdiv	lr, r2, r0
 800d4ee:	fb00 221e 	mls	r2, r0, lr, r2
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	bf0c      	ite	eq
 800d4f6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800d4fa:	4662      	movne	r2, ip
 800d4fc:	1ab6      	subs	r6, r6, r2
 800d4fe:	3b01      	subs	r3, #1
 800d500:	429d      	cmp	r5, r3
 800d502:	f003 0203 	and.w	r2, r3, #3
 800d506:	dbe8      	blt.n	800d4da <mktime+0x1f6>
 800d508:	b9da      	cbnz	r2, 800d542 <mktime+0x25e>
 800d50a:	2264      	movs	r2, #100	@ 0x64
 800d50c:	fb95 f3f2 	sdiv	r3, r5, r2
 800d510:	fb02 5313 	mls	r3, r2, r3, r5
 800d514:	b9c3      	cbnz	r3, 800d548 <mktime+0x264>
 800d516:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800d51a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d51e:	fb93 f1f2 	sdiv	r1, r3, r2
 800d522:	fb02 3311 	mls	r3, r2, r1, r3
 800d526:	2b00      	cmp	r3, #0
 800d528:	f240 136d 	movw	r3, #365	@ 0x16d
 800d52c:	bf08      	it	eq
 800d52e:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800d532:	1af6      	subs	r6, r6, r3
 800d534:	e731      	b.n	800d39a <mktime+0xb6>
 800d536:	f240 126d 	movw	r2, #365	@ 0x16d
 800d53a:	e7df      	b.n	800d4fc <mktime+0x218>
 800d53c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800d540:	e7dc      	b.n	800d4fc <mktime+0x218>
 800d542:	f240 136d 	movw	r3, #365	@ 0x16d
 800d546:	e7f4      	b.n	800d532 <mktime+0x24e>
 800d548:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800d54c:	e7f1      	b.n	800d532 <mktime+0x24e>
 800d54e:	f000 f89d 	bl	800d68c <__tzcalc_limits>
 800d552:	2800      	cmp	r0, #0
 800d554:	f47f af3e 	bne.w	800d3d4 <mktime+0xf0>
 800d558:	f8dd b004 	ldr.w	fp, [sp, #4]
 800d55c:	f1bb 0f01 	cmp.w	fp, #1
 800d560:	d172      	bne.n	800d648 <mktime+0x364>
 800d562:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800d566:	191c      	adds	r4, r3, r4
 800d568:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800d56c:	f04f 0b01 	mov.w	fp, #1
 800d570:	f000 f946 	bl	800d800 <__tz_unlock>
 800d574:	3604      	adds	r6, #4
 800d576:	2307      	movs	r3, #7
 800d578:	fb96 f3f3 	sdiv	r3, r6, r3
 800d57c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d580:	1af6      	subs	r6, r6, r3
 800d582:	d456      	bmi.n	800d632 <mktime+0x34e>
 800d584:	f8c7 b020 	str.w	fp, [r7, #32]
 800d588:	61be      	str	r6, [r7, #24]
 800d58a:	4620      	mov	r0, r4
 800d58c:	4641      	mov	r1, r8
 800d58e:	b005      	add	sp, #20
 800d590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d594:	9a02      	ldr	r2, [sp, #8]
 800d596:	1a12      	subs	r2, r2, r0
 800d598:	9202      	str	r2, [sp, #8]
 800d59a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800d59e:	eb6c 0c02 	sbc.w	ip, ip, r2
 800d5a2:	9a02      	ldr	r2, [sp, #8]
 800d5a4:	4294      	cmp	r4, r2
 800d5a6:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800d5aa:	f6bf af2c 	bge.w	800d406 <mktime+0x122>
 800d5ae:	e7d3      	b.n	800d558 <mktime+0x274>
 800d5b0:	9a03      	ldr	r2, [sp, #12]
 800d5b2:	4294      	cmp	r4, r2
 800d5b4:	eb78 020b 	sbcs.w	r2, r8, fp
 800d5b8:	f6ff af30 	blt.w	800d41c <mktime+0x138>
 800d5bc:	f1ba 0f00 	cmp.w	sl, #0
 800d5c0:	dbcf      	blt.n	800d562 <mktime+0x27e>
 800d5c2:	f04f 0b01 	mov.w	fp, #1
 800d5c6:	e735      	b.n	800d434 <mktime+0x150>
 800d5c8:	f04f 0b00 	mov.w	fp, #0
 800d5cc:	e732      	b.n	800d434 <mktime+0x150>
 800d5ce:	1ac3      	subs	r3, r0, r3
 800d5d0:	e73c      	b.n	800d44c <mktime+0x168>
 800d5d2:	f04f 3aff 	mov.w	sl, #4294967295
 800d5d6:	e74f      	b.n	800d478 <mktime+0x194>
 800d5d8:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800d5dc:	e76c      	b.n	800d4b8 <mktime+0x1d4>
 800d5de:	f240 136d 	movw	r3, #365	@ 0x16d
 800d5e2:	e769      	b.n	800d4b8 <mktime+0x1d4>
 800d5e4:	07aa      	lsls	r2, r5, #30
 800d5e6:	d117      	bne.n	800d618 <mktime+0x334>
 800d5e8:	2164      	movs	r1, #100	@ 0x64
 800d5ea:	fb95 f2f1 	sdiv	r2, r5, r1
 800d5ee:	fb01 5212 	mls	r2, r1, r2, r5
 800d5f2:	b9da      	cbnz	r2, 800d62c <mktime+0x348>
 800d5f4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d5f8:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800d5fc:	fb95 f1f2 	sdiv	r1, r5, r2
 800d600:	fb02 5511 	mls	r5, r2, r1, r5
 800d604:	2d00      	cmp	r5, #0
 800d606:	f240 126d 	movw	r2, #365	@ 0x16d
 800d60a:	bf08      	it	eq
 800d60c:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800d610:	4293      	cmp	r3, r2
 800d612:	bfa8      	it	ge
 800d614:	1a9b      	subge	r3, r3, r2
 800d616:	e74f      	b.n	800d4b8 <mktime+0x1d4>
 800d618:	f240 126d 	movw	r2, #365	@ 0x16d
 800d61c:	e7f8      	b.n	800d610 <mktime+0x32c>
 800d61e:	bf00      	nop
 800d620:	08011f74 	.word	0x08011f74
 800d624:	00015180 	.word	0x00015180
 800d628:	20006efc 	.word	0x20006efc
 800d62c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800d630:	e7ee      	b.n	800d610 <mktime+0x32c>
 800d632:	3607      	adds	r6, #7
 800d634:	e7a6      	b.n	800d584 <mktime+0x2a0>
 800d636:	f04f 34ff 	mov.w	r4, #4294967295
 800d63a:	46a0      	mov	r8, r4
 800d63c:	e7a5      	b.n	800d58a <mktime+0x2a6>
 800d63e:	f1ba 0f00 	cmp.w	sl, #0
 800d642:	dac1      	bge.n	800d5c8 <mktime+0x2e4>
 800d644:	f04f 0b00 	mov.w	fp, #0
 800d648:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800d64c:	191c      	adds	r4, r3, r4
 800d64e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800d652:	e78d      	b.n	800d570 <mktime+0x28c>

0800d654 <time>:
 800d654:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800d656:	4b0c      	ldr	r3, [pc, #48]	@ (800d688 <time+0x34>)
 800d658:	f04f 36ff 	mov.w	r6, #4294967295
 800d65c:	f04f 37ff 	mov.w	r7, #4294967295
 800d660:	4669      	mov	r1, sp
 800d662:	4604      	mov	r4, r0
 800d664:	2200      	movs	r2, #0
 800d666:	6818      	ldr	r0, [r3, #0]
 800d668:	e9cd 6700 	strd	r6, r7, [sp]
 800d66c:	f000 fb0a 	bl	800dc84 <_gettimeofday_r>
 800d670:	2800      	cmp	r0, #0
 800d672:	bfb8      	it	lt
 800d674:	e9cd 6700 	strdlt	r6, r7, [sp]
 800d678:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d67c:	b10c      	cbz	r4, 800d682 <time+0x2e>
 800d67e:	e9c4 0100 	strd	r0, r1, [r4]
 800d682:	b004      	add	sp, #16
 800d684:	bdd0      	pop	{r4, r6, r7, pc}
 800d686:	bf00      	nop
 800d688:	200001a4 	.word	0x200001a4

0800d68c <__tzcalc_limits>:
 800d68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d690:	4604      	mov	r4, r0
 800d692:	f003 fb9d 	bl	8010dd0 <__gettzinfo>
 800d696:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800d69a:	429c      	cmp	r4, r3
 800d69c:	f340 80a3 	ble.w	800d7e6 <__tzcalc_limits+0x15a>
 800d6a0:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800d6a4:	1865      	adds	r5, r4, r1
 800d6a6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800d6aa:	f240 126d 	movw	r2, #365	@ 0x16d
 800d6ae:	10ad      	asrs	r5, r5, #2
 800d6b0:	fb02 5503 	mla	r5, r2, r3, r5
 800d6b4:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800d6b8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800d6bc:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800d6c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6c4:	441d      	add	r5, r3
 800d6c6:	19a3      	adds	r3, r4, r6
 800d6c8:	4e48      	ldr	r6, [pc, #288]	@ (800d7ec <__tzcalc_limits+0x160>)
 800d6ca:	6044      	str	r4, [r0, #4]
 800d6cc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d6d0:	4601      	mov	r1, r0
 800d6d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6d6:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800d6da:	441d      	add	r5, r3
 800d6dc:	7a0b      	ldrb	r3, [r1, #8]
 800d6de:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800d6e2:	2b4a      	cmp	r3, #74	@ 0x4a
 800d6e4:	d138      	bne.n	800d758 <__tzcalc_limits+0xcc>
 800d6e6:	07a2      	lsls	r2, r4, #30
 800d6e8:	eb05 030c 	add.w	r3, r5, ip
 800d6ec:	d106      	bne.n	800d6fc <__tzcalc_limits+0x70>
 800d6ee:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800d6f2:	fb94 f2fe 	sdiv	r2, r4, lr
 800d6f6:	fb0e 4212 	mls	r2, lr, r2, r4
 800d6fa:	b932      	cbnz	r2, 800d70a <__tzcalc_limits+0x7e>
 800d6fc:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800d700:	fb94 f2fe 	sdiv	r2, r4, lr
 800d704:	fb0e 4212 	mls	r2, lr, r2, r4
 800d708:	bb1a      	cbnz	r2, 800d752 <__tzcalc_limits+0xc6>
 800d70a:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800d70e:	bfd4      	ite	le
 800d710:	f04f 0c00 	movle.w	ip, #0
 800d714:	f04f 0c01 	movgt.w	ip, #1
 800d718:	4463      	add	r3, ip
 800d71a:	3b01      	subs	r3, #1
 800d71c:	698a      	ldr	r2, [r1, #24]
 800d71e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800d722:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800d726:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800d728:	18d2      	adds	r2, r2, r3
 800d72a:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800d72e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800d732:	3128      	adds	r1, #40	@ 0x28
 800d734:	428f      	cmp	r7, r1
 800d736:	d1d1      	bne.n	800d6dc <__tzcalc_limits+0x50>
 800d738:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800d73c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800d740:	428c      	cmp	r4, r1
 800d742:	4193      	sbcs	r3, r2
 800d744:	bfb4      	ite	lt
 800d746:	2301      	movlt	r3, #1
 800d748:	2300      	movge	r3, #0
 800d74a:	6003      	str	r3, [r0, #0]
 800d74c:	2001      	movs	r0, #1
 800d74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d752:	f04f 0c00 	mov.w	ip, #0
 800d756:	e7df      	b.n	800d718 <__tzcalc_limits+0x8c>
 800d758:	2b44      	cmp	r3, #68	@ 0x44
 800d75a:	d102      	bne.n	800d762 <__tzcalc_limits+0xd6>
 800d75c:	eb05 030c 	add.w	r3, r5, ip
 800d760:	e7dc      	b.n	800d71c <__tzcalc_limits+0x90>
 800d762:	07a3      	lsls	r3, r4, #30
 800d764:	d105      	bne.n	800d772 <__tzcalc_limits+0xe6>
 800d766:	2264      	movs	r2, #100	@ 0x64
 800d768:	fb94 f3f2 	sdiv	r3, r4, r2
 800d76c:	fb02 4313 	mls	r3, r2, r3, r4
 800d770:	bb93      	cbnz	r3, 800d7d8 <__tzcalc_limits+0x14c>
 800d772:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800d776:	fb94 f3f2 	sdiv	r3, r4, r2
 800d77a:	fb02 4313 	mls	r3, r2, r3, r4
 800d77e:	fab3 f383 	clz	r3, r3
 800d782:	095b      	lsrs	r3, r3, #5
 800d784:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800d7f0 <__tzcalc_limits+0x164>
 800d788:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800d78c:	425b      	negs	r3, r3
 800d78e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d792:	462a      	mov	r2, r5
 800d794:	f04f 0800 	mov.w	r8, #0
 800d798:	4473      	add	r3, lr
 800d79a:	f108 0801 	add.w	r8, r8, #1
 800d79e:	45c1      	cmp	r9, r8
 800d7a0:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800d7a4:	dc1a      	bgt.n	800d7dc <__tzcalc_limits+0x150>
 800d7a6:	f102 0804 	add.w	r8, r2, #4
 800d7aa:	2307      	movs	r3, #7
 800d7ac:	fb98 f3f3 	sdiv	r3, r8, r3
 800d7b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d7b4:	eba8 0303 	sub.w	r3, r8, r3
 800d7b8:	ebbc 0c03 	subs.w	ip, ip, r3
 800d7bc:	690b      	ldr	r3, [r1, #16]
 800d7be:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7c2:	bf48      	it	mi
 800d7c4:	f10c 0c07 	addmi.w	ip, ip, #7
 800d7c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d7cc:	449c      	add	ip, r3
 800d7ce:	45f4      	cmp	ip, lr
 800d7d0:	da06      	bge.n	800d7e0 <__tzcalc_limits+0x154>
 800d7d2:	eb02 030c 	add.w	r3, r2, ip
 800d7d6:	e7a1      	b.n	800d71c <__tzcalc_limits+0x90>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e7d3      	b.n	800d784 <__tzcalc_limits+0xf8>
 800d7dc:	4472      	add	r2, lr
 800d7de:	e7dc      	b.n	800d79a <__tzcalc_limits+0x10e>
 800d7e0:	f1ac 0c07 	sub.w	ip, ip, #7
 800d7e4:	e7f3      	b.n	800d7ce <__tzcalc_limits+0x142>
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	e7b1      	b.n	800d74e <__tzcalc_limits+0xc2>
 800d7ea:	bf00      	nop
 800d7ec:	00015180 	.word	0x00015180
 800d7f0:	08011fd0 	.word	0x08011fd0

0800d7f4 <__tz_lock>:
 800d7f4:	4801      	ldr	r0, [pc, #4]	@ (800d7fc <__tz_lock+0x8>)
 800d7f6:	f000 bab8 	b.w	800dd6a <__retarget_lock_acquire>
 800d7fa:	bf00      	nop
 800d7fc:	20006f04 	.word	0x20006f04

0800d800 <__tz_unlock>:
 800d800:	4801      	ldr	r0, [pc, #4]	@ (800d808 <__tz_unlock+0x8>)
 800d802:	f000 bab4 	b.w	800dd6e <__retarget_lock_release>
 800d806:	bf00      	nop
 800d808:	20006f04 	.word	0x20006f04

0800d80c <_tzset_unlocked>:
 800d80c:	4b01      	ldr	r3, [pc, #4]	@ (800d814 <_tzset_unlocked+0x8>)
 800d80e:	6818      	ldr	r0, [r3, #0]
 800d810:	f000 b802 	b.w	800d818 <_tzset_unlocked_r>
 800d814:	200001a4 	.word	0x200001a4

0800d818 <_tzset_unlocked_r>:
 800d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	b08d      	sub	sp, #52	@ 0x34
 800d81e:	4607      	mov	r7, r0
 800d820:	f003 fad6 	bl	8010dd0 <__gettzinfo>
 800d824:	49bc      	ldr	r1, [pc, #752]	@ (800db18 <_tzset_unlocked_r+0x300>)
 800d826:	4dbd      	ldr	r5, [pc, #756]	@ (800db1c <_tzset_unlocked_r+0x304>)
 800d828:	4604      	mov	r4, r0
 800d82a:	4638      	mov	r0, r7
 800d82c:	f001 fd00 	bl	800f230 <_getenv_r>
 800d830:	4606      	mov	r6, r0
 800d832:	bb10      	cbnz	r0, 800d87a <_tzset_unlocked_r+0x62>
 800d834:	4bba      	ldr	r3, [pc, #744]	@ (800db20 <_tzset_unlocked_r+0x308>)
 800d836:	4abb      	ldr	r2, [pc, #748]	@ (800db24 <_tzset_unlocked_r+0x30c>)
 800d838:	6018      	str	r0, [r3, #0]
 800d83a:	4bbb      	ldr	r3, [pc, #748]	@ (800db28 <_tzset_unlocked_r+0x310>)
 800d83c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800d83e:	6018      	str	r0, [r3, #0]
 800d840:	4bba      	ldr	r3, [pc, #744]	@ (800db2c <_tzset_unlocked_r+0x314>)
 800d842:	6520      	str	r0, [r4, #80]	@ 0x50
 800d844:	e9c3 2200 	strd	r2, r2, [r3]
 800d848:	214a      	movs	r1, #74	@ 0x4a
 800d84a:	2200      	movs	r2, #0
 800d84c:	2300      	movs	r3, #0
 800d84e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800d852:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800d856:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800d85a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800d85e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d862:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800d866:	6828      	ldr	r0, [r5, #0]
 800d868:	7221      	strb	r1, [r4, #8]
 800d86a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800d86e:	f001 fcef 	bl	800f250 <free>
 800d872:	602e      	str	r6, [r5, #0]
 800d874:	b00d      	add	sp, #52	@ 0x34
 800d876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d87a:	6829      	ldr	r1, [r5, #0]
 800d87c:	2900      	cmp	r1, #0
 800d87e:	f040 808e 	bne.w	800d99e <_tzset_unlocked_r+0x186>
 800d882:	6828      	ldr	r0, [r5, #0]
 800d884:	f001 fce4 	bl	800f250 <free>
 800d888:	4630      	mov	r0, r6
 800d88a:	f7f2 fd09 	bl	80002a0 <strlen>
 800d88e:	1c41      	adds	r1, r0, #1
 800d890:	4638      	mov	r0, r7
 800d892:	f001 fd07 	bl	800f2a4 <_malloc_r>
 800d896:	6028      	str	r0, [r5, #0]
 800d898:	2800      	cmp	r0, #0
 800d89a:	f040 8086 	bne.w	800d9aa <_tzset_unlocked_r+0x192>
 800d89e:	4aa2      	ldr	r2, [pc, #648]	@ (800db28 <_tzset_unlocked_r+0x310>)
 800d8a0:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800db2c <_tzset_unlocked_r+0x314>
 800d8a4:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800db20 <_tzset_unlocked_r+0x308>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	4aa0      	ldr	r2, [pc, #640]	@ (800db30 <_tzset_unlocked_r+0x318>)
 800d8ae:	f8ca 3000 	str.w	r3, [sl]
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	e9c8 2200 	strd	r2, r2, [r8]
 800d8ba:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800d8be:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800d8c2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800d8c6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800d8ca:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800d8ce:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800d8d2:	224a      	movs	r2, #74	@ 0x4a
 800d8d4:	7222      	strb	r2, [r4, #8]
 800d8d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8d8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800d8dc:	6523      	str	r3, [r4, #80]	@ 0x50
 800d8de:	7833      	ldrb	r3, [r6, #0]
 800d8e0:	2b3a      	cmp	r3, #58	@ 0x3a
 800d8e2:	bf08      	it	eq
 800d8e4:	3601      	addeq	r6, #1
 800d8e6:	7833      	ldrb	r3, [r6, #0]
 800d8e8:	2b3c      	cmp	r3, #60	@ 0x3c
 800d8ea:	d162      	bne.n	800d9b2 <_tzset_unlocked_r+0x19a>
 800d8ec:	1c75      	adds	r5, r6, #1
 800d8ee:	4a91      	ldr	r2, [pc, #580]	@ (800db34 <_tzset_unlocked_r+0x31c>)
 800d8f0:	4991      	ldr	r1, [pc, #580]	@ (800db38 <_tzset_unlocked_r+0x320>)
 800d8f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	f7ff f92d 	bl	800cb54 <siscanf>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	ddba      	ble.n	800d874 <_tzset_unlocked_r+0x5c>
 800d8fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d900:	1eda      	subs	r2, r3, #3
 800d902:	2a07      	cmp	r2, #7
 800d904:	d8b6      	bhi.n	800d874 <_tzset_unlocked_r+0x5c>
 800d906:	5ceb      	ldrb	r3, [r5, r3]
 800d908:	2b3e      	cmp	r3, #62	@ 0x3e
 800d90a:	d1b3      	bne.n	800d874 <_tzset_unlocked_r+0x5c>
 800d90c:	3602      	adds	r6, #2
 800d90e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d910:	18f5      	adds	r5, r6, r3
 800d912:	5cf3      	ldrb	r3, [r6, r3]
 800d914:	2b2d      	cmp	r3, #45	@ 0x2d
 800d916:	d15a      	bne.n	800d9ce <_tzset_unlocked_r+0x1b6>
 800d918:	3501      	adds	r5, #1
 800d91a:	f04f 39ff 	mov.w	r9, #4294967295
 800d91e:	2300      	movs	r3, #0
 800d920:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d924:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d928:	af08      	add	r7, sp, #32
 800d92a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d92c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d930:	9303      	str	r3, [sp, #12]
 800d932:	f10d 031e 	add.w	r3, sp, #30
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	4980      	ldr	r1, [pc, #512]	@ (800db3c <_tzset_unlocked_r+0x324>)
 800d93a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d93c:	aa07      	add	r2, sp, #28
 800d93e:	4628      	mov	r0, r5
 800d940:	f7ff f908 	bl	800cb54 <siscanf>
 800d944:	2800      	cmp	r0, #0
 800d946:	dd95      	ble.n	800d874 <_tzset_unlocked_r+0x5c>
 800d948:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d94c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800d950:	223c      	movs	r2, #60	@ 0x3c
 800d952:	fb02 6603 	mla	r6, r2, r3, r6
 800d956:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d95a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800d95e:	fb02 6603 	mla	r6, r2, r3, r6
 800d962:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d964:	fb09 f606 	mul.w	r6, r9, r6
 800d968:	eb05 0903 	add.w	r9, r5, r3
 800d96c:	5ceb      	ldrb	r3, [r5, r3]
 800d96e:	2b3c      	cmp	r3, #60	@ 0x3c
 800d970:	f040 80ee 	bne.w	800db50 <_tzset_unlocked_r+0x338>
 800d974:	f109 0501 	add.w	r5, r9, #1
 800d978:	4a71      	ldr	r2, [pc, #452]	@ (800db40 <_tzset_unlocked_r+0x328>)
 800d97a:	496f      	ldr	r1, [pc, #444]	@ (800db38 <_tzset_unlocked_r+0x320>)
 800d97c:	ab0a      	add	r3, sp, #40	@ 0x28
 800d97e:	4628      	mov	r0, r5
 800d980:	f7ff f8e8 	bl	800cb54 <siscanf>
 800d984:	2800      	cmp	r0, #0
 800d986:	dc28      	bgt.n	800d9da <_tzset_unlocked_r+0x1c2>
 800d988:	f899 3001 	ldrb.w	r3, [r9, #1]
 800d98c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d98e:	d124      	bne.n	800d9da <_tzset_unlocked_r+0x1c2>
 800d990:	4b68      	ldr	r3, [pc, #416]	@ (800db34 <_tzset_unlocked_r+0x31c>)
 800d992:	62a6      	str	r6, [r4, #40]	@ 0x28
 800d994:	e9c8 3300 	strd	r3, r3, [r8]
 800d998:	f8ca 6000 	str.w	r6, [sl]
 800d99c:	e76a      	b.n	800d874 <_tzset_unlocked_r+0x5c>
 800d99e:	f7f2 fc1f 	bl	80001e0 <strcmp>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	f47f af6d 	bne.w	800d882 <_tzset_unlocked_r+0x6a>
 800d9a8:	e764      	b.n	800d874 <_tzset_unlocked_r+0x5c>
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	f000 f9e1 	bl	800dd72 <strcpy>
 800d9b0:	e775      	b.n	800d89e <_tzset_unlocked_r+0x86>
 800d9b2:	4a60      	ldr	r2, [pc, #384]	@ (800db34 <_tzset_unlocked_r+0x31c>)
 800d9b4:	4963      	ldr	r1, [pc, #396]	@ (800db44 <_tzset_unlocked_r+0x32c>)
 800d9b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7ff f8cb 	bl	800cb54 <siscanf>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f77f af58 	ble.w	800d874 <_tzset_unlocked_r+0x5c>
 800d9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9c6:	3b03      	subs	r3, #3
 800d9c8:	2b07      	cmp	r3, #7
 800d9ca:	d9a0      	bls.n	800d90e <_tzset_unlocked_r+0xf6>
 800d9cc:	e752      	b.n	800d874 <_tzset_unlocked_r+0x5c>
 800d9ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800d9d0:	bf08      	it	eq
 800d9d2:	3501      	addeq	r5, #1
 800d9d4:	f04f 0901 	mov.w	r9, #1
 800d9d8:	e7a1      	b.n	800d91e <_tzset_unlocked_r+0x106>
 800d9da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9dc:	1eda      	subs	r2, r3, #3
 800d9de:	2a07      	cmp	r2, #7
 800d9e0:	f63f af48 	bhi.w	800d874 <_tzset_unlocked_r+0x5c>
 800d9e4:	5ceb      	ldrb	r3, [r5, r3]
 800d9e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9e8:	f47f af44 	bne.w	800d874 <_tzset_unlocked_r+0x5c>
 800d9ec:	f109 0902 	add.w	r9, r9, #2
 800d9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9f2:	eb09 0503 	add.w	r5, r9, r3
 800d9f6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d9fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800d9fc:	f040 80b7 	bne.w	800db6e <_tzset_unlocked_r+0x356>
 800da00:	3501      	adds	r5, #1
 800da02:	f04f 39ff 	mov.w	r9, #4294967295
 800da06:	2300      	movs	r3, #0
 800da08:	f8ad 301c 	strh.w	r3, [sp, #28]
 800da0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800da10:	f8ad 3020 	strh.w	r3, [sp, #32]
 800da14:	930a      	str	r3, [sp, #40]	@ 0x28
 800da16:	ab0a      	add	r3, sp, #40	@ 0x28
 800da18:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	f10d 031e 	add.w	r3, sp, #30
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	4945      	ldr	r1, [pc, #276]	@ (800db3c <_tzset_unlocked_r+0x324>)
 800da26:	ab0a      	add	r3, sp, #40	@ 0x28
 800da28:	aa07      	add	r2, sp, #28
 800da2a:	4628      	mov	r0, r5
 800da2c:	f7ff f892 	bl	800cb54 <siscanf>
 800da30:	2800      	cmp	r0, #0
 800da32:	f300 80a2 	bgt.w	800db7a <_tzset_unlocked_r+0x362>
 800da36:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800da3a:	9304      	str	r3, [sp, #16]
 800da3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da3e:	4627      	mov	r7, r4
 800da40:	441d      	add	r5, r3
 800da42:	f04f 0b00 	mov.w	fp, #0
 800da46:	782b      	ldrb	r3, [r5, #0]
 800da48:	2b2c      	cmp	r3, #44	@ 0x2c
 800da4a:	bf08      	it	eq
 800da4c:	3501      	addeq	r5, #1
 800da4e:	f895 9000 	ldrb.w	r9, [r5]
 800da52:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800da56:	f040 80a3 	bne.w	800dba0 <_tzset_unlocked_r+0x388>
 800da5a:	ab0a      	add	r3, sp, #40	@ 0x28
 800da5c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800da60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800da64:	aa09      	add	r2, sp, #36	@ 0x24
 800da66:	9200      	str	r2, [sp, #0]
 800da68:	4937      	ldr	r1, [pc, #220]	@ (800db48 <_tzset_unlocked_r+0x330>)
 800da6a:	9303      	str	r3, [sp, #12]
 800da6c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800da70:	4628      	mov	r0, r5
 800da72:	f7ff f86f 	bl	800cb54 <siscanf>
 800da76:	2803      	cmp	r0, #3
 800da78:	f47f aefc 	bne.w	800d874 <_tzset_unlocked_r+0x5c>
 800da7c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800da80:	1e4b      	subs	r3, r1, #1
 800da82:	2b0b      	cmp	r3, #11
 800da84:	f63f aef6 	bhi.w	800d874 <_tzset_unlocked_r+0x5c>
 800da88:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800da8c:	1e53      	subs	r3, r2, #1
 800da8e:	2b04      	cmp	r3, #4
 800da90:	f63f aef0 	bhi.w	800d874 <_tzset_unlocked_r+0x5c>
 800da94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800da98:	2b06      	cmp	r3, #6
 800da9a:	f63f aeeb 	bhi.w	800d874 <_tzset_unlocked_r+0x5c>
 800da9e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800daa2:	f887 9008 	strb.w	r9, [r7, #8]
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daaa:	eb05 0903 	add.w	r9, r5, r3
 800daae:	2500      	movs	r5, #0
 800dab0:	f04f 0302 	mov.w	r3, #2
 800dab4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dab8:	f8ad 501e 	strh.w	r5, [sp, #30]
 800dabc:	f8ad 5020 	strh.w	r5, [sp, #32]
 800dac0:	950a      	str	r5, [sp, #40]	@ 0x28
 800dac2:	f899 3000 	ldrb.w	r3, [r9]
 800dac6:	2b2f      	cmp	r3, #47	@ 0x2f
 800dac8:	f040 8096 	bne.w	800dbf8 <_tzset_unlocked_r+0x3e0>
 800dacc:	ab0a      	add	r3, sp, #40	@ 0x28
 800dace:	aa08      	add	r2, sp, #32
 800dad0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dad4:	f10d 021e 	add.w	r2, sp, #30
 800dad8:	9200      	str	r2, [sp, #0]
 800dada:	491c      	ldr	r1, [pc, #112]	@ (800db4c <_tzset_unlocked_r+0x334>)
 800dadc:	9303      	str	r3, [sp, #12]
 800dade:	aa07      	add	r2, sp, #28
 800dae0:	4648      	mov	r0, r9
 800dae2:	f7ff f837 	bl	800cb54 <siscanf>
 800dae6:	42a8      	cmp	r0, r5
 800dae8:	f300 8086 	bgt.w	800dbf8 <_tzset_unlocked_r+0x3e0>
 800daec:	214a      	movs	r1, #74	@ 0x4a
 800daee:	2200      	movs	r2, #0
 800daf0:	2300      	movs	r3, #0
 800daf2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800daf6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dafa:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800dafe:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800db02:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800db06:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800db0a:	7221      	strb	r1, [r4, #8]
 800db0c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800db0e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800db12:	6525      	str	r5, [r4, #80]	@ 0x50
 800db14:	e6ae      	b.n	800d874 <_tzset_unlocked_r+0x5c>
 800db16:	bf00      	nop
 800db18:	08011bb6 	.word	0x08011bb6
 800db1c:	20006edc 	.word	0x20006edc
 800db20:	20006ef8 	.word	0x20006ef8
 800db24:	08011bb9 	.word	0x08011bb9
 800db28:	20006efc 	.word	0x20006efc
 800db2c:	20000030 	.word	0x20000030
 800db30:	08011e1b 	.word	0x08011e1b
 800db34:	20006eec 	.word	0x20006eec
 800db38:	08011bbd 	.word	0x08011bbd
 800db3c:	08011bf2 	.word	0x08011bf2
 800db40:	20006ee0 	.word	0x20006ee0
 800db44:	08011bd0 	.word	0x08011bd0
 800db48:	08011bde 	.word	0x08011bde
 800db4c:	08011bf1 	.word	0x08011bf1
 800db50:	4a3e      	ldr	r2, [pc, #248]	@ (800dc4c <_tzset_unlocked_r+0x434>)
 800db52:	493f      	ldr	r1, [pc, #252]	@ (800dc50 <_tzset_unlocked_r+0x438>)
 800db54:	ab0a      	add	r3, sp, #40	@ 0x28
 800db56:	4648      	mov	r0, r9
 800db58:	f7fe fffc 	bl	800cb54 <siscanf>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f77f af17 	ble.w	800d990 <_tzset_unlocked_r+0x178>
 800db62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db64:	3b03      	subs	r3, #3
 800db66:	2b07      	cmp	r3, #7
 800db68:	f67f af42 	bls.w	800d9f0 <_tzset_unlocked_r+0x1d8>
 800db6c:	e682      	b.n	800d874 <_tzset_unlocked_r+0x5c>
 800db6e:	2b2b      	cmp	r3, #43	@ 0x2b
 800db70:	bf08      	it	eq
 800db72:	3501      	addeq	r5, #1
 800db74:	f04f 0901 	mov.w	r9, #1
 800db78:	e745      	b.n	800da06 <_tzset_unlocked_r+0x1ee>
 800db7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800db7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800db82:	213c      	movs	r1, #60	@ 0x3c
 800db84:	fb01 3302 	mla	r3, r1, r2, r3
 800db88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800db8c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800db90:	fb01 3302 	mla	r3, r1, r2, r3
 800db94:	fb09 f303 	mul.w	r3, r9, r3
 800db98:	e74f      	b.n	800da3a <_tzset_unlocked_r+0x222>
 800db9a:	f04f 0b01 	mov.w	fp, #1
 800db9e:	e752      	b.n	800da46 <_tzset_unlocked_r+0x22e>
 800dba0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800dba4:	bf06      	itte	eq
 800dba6:	3501      	addeq	r5, #1
 800dba8:	464b      	moveq	r3, r9
 800dbaa:	2344      	movne	r3, #68	@ 0x44
 800dbac:	220a      	movs	r2, #10
 800dbae:	a90b      	add	r1, sp, #44	@ 0x2c
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	9305      	str	r3, [sp, #20]
 800dbb4:	f002 f92e 	bl	800fe14 <strtoul>
 800dbb8:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800dbbc:	9b05      	ldr	r3, [sp, #20]
 800dbbe:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800dbc2:	45a9      	cmp	r9, r5
 800dbc4:	d114      	bne.n	800dbf0 <_tzset_unlocked_r+0x3d8>
 800dbc6:	234d      	movs	r3, #77	@ 0x4d
 800dbc8:	f1bb 0f00 	cmp.w	fp, #0
 800dbcc:	d107      	bne.n	800dbde <_tzset_unlocked_r+0x3c6>
 800dbce:	7223      	strb	r3, [r4, #8]
 800dbd0:	2103      	movs	r1, #3
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800dbd8:	f8c4 b014 	str.w	fp, [r4, #20]
 800dbdc:	e767      	b.n	800daae <_tzset_unlocked_r+0x296>
 800dbde:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800dbe2:	220b      	movs	r2, #11
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800dbea:	2300      	movs	r3, #0
 800dbec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800dbee:	e75e      	b.n	800daae <_tzset_unlocked_r+0x296>
 800dbf0:	b280      	uxth	r0, r0
 800dbf2:	723b      	strb	r3, [r7, #8]
 800dbf4:	6178      	str	r0, [r7, #20]
 800dbf6:	e75a      	b.n	800daae <_tzset_unlocked_r+0x296>
 800dbf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dbfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dc00:	213c      	movs	r1, #60	@ 0x3c
 800dc02:	fb01 3302 	mla	r3, r1, r2, r3
 800dc06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800dc0a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800dc0e:	fb01 3302 	mla	r3, r1, r2, r3
 800dc12:	61bb      	str	r3, [r7, #24]
 800dc14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dc16:	3728      	adds	r7, #40	@ 0x28
 800dc18:	444d      	add	r5, r9
 800dc1a:	f1bb 0f00 	cmp.w	fp, #0
 800dc1e:	d0bc      	beq.n	800db9a <_tzset_unlocked_r+0x382>
 800dc20:	9b04      	ldr	r3, [sp, #16]
 800dc22:	6523      	str	r3, [r4, #80]	@ 0x50
 800dc24:	4b0b      	ldr	r3, [pc, #44]	@ (800dc54 <_tzset_unlocked_r+0x43c>)
 800dc26:	f8c8 3000 	str.w	r3, [r8]
 800dc2a:	6860      	ldr	r0, [r4, #4]
 800dc2c:	4b07      	ldr	r3, [pc, #28]	@ (800dc4c <_tzset_unlocked_r+0x434>)
 800dc2e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800dc30:	f8c8 3004 	str.w	r3, [r8, #4]
 800dc34:	f7ff fd2a 	bl	800d68c <__tzcalc_limits>
 800dc38:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800dc3a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800dc3c:	f8ca 2000 	str.w	r2, [sl]
 800dc40:	1a9b      	subs	r3, r3, r2
 800dc42:	4a05      	ldr	r2, [pc, #20]	@ (800dc58 <_tzset_unlocked_r+0x440>)
 800dc44:	bf18      	it	ne
 800dc46:	2301      	movne	r3, #1
 800dc48:	6013      	str	r3, [r2, #0]
 800dc4a:	e613      	b.n	800d874 <_tzset_unlocked_r+0x5c>
 800dc4c:	20006ee0 	.word	0x20006ee0
 800dc50:	08011bd0 	.word	0x08011bd0
 800dc54:	20006eec 	.word	0x20006eec
 800dc58:	20006efc 	.word	0x20006efc

0800dc5c <_localeconv_r>:
 800dc5c:	4800      	ldr	r0, [pc, #0]	@ (800dc60 <_localeconv_r+0x4>)
 800dc5e:	4770      	bx	lr
 800dc60:	20000128 	.word	0x20000128

0800dc64 <_close_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d06      	ldr	r5, [pc, #24]	@ (800dc80 <_close_r+0x1c>)
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	602b      	str	r3, [r5, #0]
 800dc70:	f7f5 ff00 	bl	8003a74 <_close>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_close_r+0x1a>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_close_r+0x1a>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	20006f00 	.word	0x20006f00

0800dc84 <_gettimeofday_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4d07      	ldr	r5, [pc, #28]	@ (800dca4 <_gettimeofday_r+0x20>)
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	4611      	mov	r1, r2
 800dc90:	602b      	str	r3, [r5, #0]
 800dc92:	f7f5 ff23 	bl	8003adc <_gettimeofday>
 800dc96:	1c43      	adds	r3, r0, #1
 800dc98:	d102      	bne.n	800dca0 <_gettimeofday_r+0x1c>
 800dc9a:	682b      	ldr	r3, [r5, #0]
 800dc9c:	b103      	cbz	r3, 800dca0 <_gettimeofday_r+0x1c>
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	bd38      	pop	{r3, r4, r5, pc}
 800dca2:	bf00      	nop
 800dca4:	20006f00 	.word	0x20006f00

0800dca8 <_lseek_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4d07      	ldr	r5, [pc, #28]	@ (800dcc8 <_lseek_r+0x20>)
 800dcac:	4604      	mov	r4, r0
 800dcae:	4608      	mov	r0, r1
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	602a      	str	r2, [r5, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	f7f5 ff03 	bl	8003ac2 <_lseek>
 800dcbc:	1c43      	adds	r3, r0, #1
 800dcbe:	d102      	bne.n	800dcc6 <_lseek_r+0x1e>
 800dcc0:	682b      	ldr	r3, [r5, #0]
 800dcc2:	b103      	cbz	r3, 800dcc6 <_lseek_r+0x1e>
 800dcc4:	6023      	str	r3, [r4, #0]
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	20006f00 	.word	0x20006f00

0800dccc <_read_r>:
 800dccc:	b538      	push	{r3, r4, r5, lr}
 800dcce:	4d07      	ldr	r5, [pc, #28]	@ (800dcec <_read_r+0x20>)
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	4608      	mov	r0, r1
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	602a      	str	r2, [r5, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	f7f5 fe91 	bl	8003a02 <_read>
 800dce0:	1c43      	adds	r3, r0, #1
 800dce2:	d102      	bne.n	800dcea <_read_r+0x1e>
 800dce4:	682b      	ldr	r3, [r5, #0]
 800dce6:	b103      	cbz	r3, 800dcea <_read_r+0x1e>
 800dce8:	6023      	str	r3, [r4, #0]
 800dcea:	bd38      	pop	{r3, r4, r5, pc}
 800dcec:	20006f00 	.word	0x20006f00

0800dcf0 <_write_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	4d07      	ldr	r5, [pc, #28]	@ (800dd10 <_write_r+0x20>)
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	4608      	mov	r0, r1
 800dcf8:	4611      	mov	r1, r2
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	602a      	str	r2, [r5, #0]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f7f5 fe9c 	bl	8003a3c <_write>
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d102      	bne.n	800dd0e <_write_r+0x1e>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	b103      	cbz	r3, 800dd0e <_write_r+0x1e>
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	bd38      	pop	{r3, r4, r5, pc}
 800dd10:	20006f00 	.word	0x20006f00

0800dd14 <__errno>:
 800dd14:	4b01      	ldr	r3, [pc, #4]	@ (800dd1c <__errno+0x8>)
 800dd16:	6818      	ldr	r0, [r3, #0]
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	200001a4 	.word	0x200001a4

0800dd20 <__libc_init_array>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	4d0d      	ldr	r5, [pc, #52]	@ (800dd58 <__libc_init_array+0x38>)
 800dd24:	4c0d      	ldr	r4, [pc, #52]	@ (800dd5c <__libc_init_array+0x3c>)
 800dd26:	1b64      	subs	r4, r4, r5
 800dd28:	10a4      	asrs	r4, r4, #2
 800dd2a:	2600      	movs	r6, #0
 800dd2c:	42a6      	cmp	r6, r4
 800dd2e:	d109      	bne.n	800dd44 <__libc_init_array+0x24>
 800dd30:	4d0b      	ldr	r5, [pc, #44]	@ (800dd60 <__libc_init_array+0x40>)
 800dd32:	4c0c      	ldr	r4, [pc, #48]	@ (800dd64 <__libc_init_array+0x44>)
 800dd34:	f003 f9ca 	bl	80110cc <_init>
 800dd38:	1b64      	subs	r4, r4, r5
 800dd3a:	10a4      	asrs	r4, r4, #2
 800dd3c:	2600      	movs	r6, #0
 800dd3e:	42a6      	cmp	r6, r4
 800dd40:	d105      	bne.n	800dd4e <__libc_init_array+0x2e>
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd48:	4798      	blx	r3
 800dd4a:	3601      	adds	r6, #1
 800dd4c:	e7ee      	b.n	800dd2c <__libc_init_array+0xc>
 800dd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd52:	4798      	blx	r3
 800dd54:	3601      	adds	r6, #1
 800dd56:	e7f2      	b.n	800dd3e <__libc_init_array+0x1e>
 800dd58:	08012174 	.word	0x08012174
 800dd5c:	08012174 	.word	0x08012174
 800dd60:	08012174 	.word	0x08012174
 800dd64:	08012178 	.word	0x08012178

0800dd68 <__retarget_lock_init_recursive>:
 800dd68:	4770      	bx	lr

0800dd6a <__retarget_lock_acquire>:
 800dd6a:	4770      	bx	lr

0800dd6c <__retarget_lock_acquire_recursive>:
 800dd6c:	4770      	bx	lr

0800dd6e <__retarget_lock_release>:
 800dd6e:	4770      	bx	lr

0800dd70 <__retarget_lock_release_recursive>:
 800dd70:	4770      	bx	lr

0800dd72 <strcpy>:
 800dd72:	4603      	mov	r3, r0
 800dd74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd78:	f803 2b01 	strb.w	r2, [r3], #1
 800dd7c:	2a00      	cmp	r2, #0
 800dd7e:	d1f9      	bne.n	800dd74 <strcpy+0x2>
 800dd80:	4770      	bx	lr

0800dd82 <memcpy>:
 800dd82:	440a      	add	r2, r1
 800dd84:	4291      	cmp	r1, r2
 800dd86:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd8a:	d100      	bne.n	800dd8e <memcpy+0xc>
 800dd8c:	4770      	bx	lr
 800dd8e:	b510      	push	{r4, lr}
 800dd90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd98:	4291      	cmp	r1, r2
 800dd9a:	d1f9      	bne.n	800dd90 <memcpy+0xe>
 800dd9c:	bd10      	pop	{r4, pc}
	...

0800dda0 <nan>:
 800dda0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dda8 <nan+0x8>
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	00000000 	.word	0x00000000
 800ddac:	7ff80000 	.word	0x7ff80000

0800ddb0 <__assert_func>:
 800ddb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddb2:	4614      	mov	r4, r2
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	4b09      	ldr	r3, [pc, #36]	@ (800dddc <__assert_func+0x2c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4605      	mov	r5, r0
 800ddbc:	68d8      	ldr	r0, [r3, #12]
 800ddbe:	b14c      	cbz	r4, 800ddd4 <__assert_func+0x24>
 800ddc0:	4b07      	ldr	r3, [pc, #28]	@ (800dde0 <__assert_func+0x30>)
 800ddc2:	9100      	str	r1, [sp, #0]
 800ddc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddc8:	4906      	ldr	r1, [pc, #24]	@ (800dde4 <__assert_func+0x34>)
 800ddca:	462b      	mov	r3, r5
 800ddcc:	f002 fe9c 	bl	8010b08 <fiprintf>
 800ddd0:	f003 f8da 	bl	8010f88 <abort>
 800ddd4:	4b04      	ldr	r3, [pc, #16]	@ (800dde8 <__assert_func+0x38>)
 800ddd6:	461c      	mov	r4, r3
 800ddd8:	e7f3      	b.n	800ddc2 <__assert_func+0x12>
 800ddda:	bf00      	nop
 800dddc:	200001a4 	.word	0x200001a4
 800dde0:	08011c0c 	.word	0x08011c0c
 800dde4:	08011c19 	.word	0x08011c19
 800dde8:	08011e1b 	.word	0x08011e1b

0800ddec <div>:
 800ddec:	b510      	push	{r4, lr}
 800ddee:	fb91 f4f2 	sdiv	r4, r1, r2
 800ddf2:	fb02 1114 	mls	r1, r2, r4, r1
 800ddf6:	6004      	str	r4, [r0, #0]
 800ddf8:	6041      	str	r1, [r0, #4]
 800ddfa:	bd10      	pop	{r4, pc}

0800ddfc <quorem>:
 800ddfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	6903      	ldr	r3, [r0, #16]
 800de02:	690c      	ldr	r4, [r1, #16]
 800de04:	42a3      	cmp	r3, r4
 800de06:	4607      	mov	r7, r0
 800de08:	db7e      	blt.n	800df08 <quorem+0x10c>
 800de0a:	3c01      	subs	r4, #1
 800de0c:	f101 0814 	add.w	r8, r1, #20
 800de10:	00a3      	lsls	r3, r4, #2
 800de12:	f100 0514 	add.w	r5, r0, #20
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de1c:	9301      	str	r3, [sp, #4]
 800de1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de26:	3301      	adds	r3, #1
 800de28:	429a      	cmp	r2, r3
 800de2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800de32:	d32e      	bcc.n	800de92 <quorem+0x96>
 800de34:	f04f 0a00 	mov.w	sl, #0
 800de38:	46c4      	mov	ip, r8
 800de3a:	46ae      	mov	lr, r5
 800de3c:	46d3      	mov	fp, sl
 800de3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de42:	b298      	uxth	r0, r3
 800de44:	fb06 a000 	mla	r0, r6, r0, sl
 800de48:	0c02      	lsrs	r2, r0, #16
 800de4a:	0c1b      	lsrs	r3, r3, #16
 800de4c:	fb06 2303 	mla	r3, r6, r3, r2
 800de50:	f8de 2000 	ldr.w	r2, [lr]
 800de54:	b280      	uxth	r0, r0
 800de56:	b292      	uxth	r2, r2
 800de58:	1a12      	subs	r2, r2, r0
 800de5a:	445a      	add	r2, fp
 800de5c:	f8de 0000 	ldr.w	r0, [lr]
 800de60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de64:	b29b      	uxth	r3, r3
 800de66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de6e:	b292      	uxth	r2, r2
 800de70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de74:	45e1      	cmp	r9, ip
 800de76:	f84e 2b04 	str.w	r2, [lr], #4
 800de7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de7e:	d2de      	bcs.n	800de3e <quorem+0x42>
 800de80:	9b00      	ldr	r3, [sp, #0]
 800de82:	58eb      	ldr	r3, [r5, r3]
 800de84:	b92b      	cbnz	r3, 800de92 <quorem+0x96>
 800de86:	9b01      	ldr	r3, [sp, #4]
 800de88:	3b04      	subs	r3, #4
 800de8a:	429d      	cmp	r5, r3
 800de8c:	461a      	mov	r2, r3
 800de8e:	d32f      	bcc.n	800def0 <quorem+0xf4>
 800de90:	613c      	str	r4, [r7, #16]
 800de92:	4638      	mov	r0, r7
 800de94:	f001 fd60 	bl	800f958 <__mcmp>
 800de98:	2800      	cmp	r0, #0
 800de9a:	db25      	blt.n	800dee8 <quorem+0xec>
 800de9c:	4629      	mov	r1, r5
 800de9e:	2000      	movs	r0, #0
 800dea0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dea4:	f8d1 c000 	ldr.w	ip, [r1]
 800dea8:	fa1f fe82 	uxth.w	lr, r2
 800deac:	fa1f f38c 	uxth.w	r3, ip
 800deb0:	eba3 030e 	sub.w	r3, r3, lr
 800deb4:	4403      	add	r3, r0
 800deb6:	0c12      	lsrs	r2, r2, #16
 800deb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800debc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dec6:	45c1      	cmp	r9, r8
 800dec8:	f841 3b04 	str.w	r3, [r1], #4
 800decc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ded0:	d2e6      	bcs.n	800dea0 <quorem+0xa4>
 800ded2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ded6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deda:	b922      	cbnz	r2, 800dee6 <quorem+0xea>
 800dedc:	3b04      	subs	r3, #4
 800dede:	429d      	cmp	r5, r3
 800dee0:	461a      	mov	r2, r3
 800dee2:	d30b      	bcc.n	800defc <quorem+0x100>
 800dee4:	613c      	str	r4, [r7, #16]
 800dee6:	3601      	adds	r6, #1
 800dee8:	4630      	mov	r0, r6
 800deea:	b003      	add	sp, #12
 800deec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def0:	6812      	ldr	r2, [r2, #0]
 800def2:	3b04      	subs	r3, #4
 800def4:	2a00      	cmp	r2, #0
 800def6:	d1cb      	bne.n	800de90 <quorem+0x94>
 800def8:	3c01      	subs	r4, #1
 800defa:	e7c6      	b.n	800de8a <quorem+0x8e>
 800defc:	6812      	ldr	r2, [r2, #0]
 800defe:	3b04      	subs	r3, #4
 800df00:	2a00      	cmp	r2, #0
 800df02:	d1ef      	bne.n	800dee4 <quorem+0xe8>
 800df04:	3c01      	subs	r4, #1
 800df06:	e7ea      	b.n	800dede <quorem+0xe2>
 800df08:	2000      	movs	r0, #0
 800df0a:	e7ee      	b.n	800deea <quorem+0xee>
 800df0c:	0000      	movs	r0, r0
	...

0800df10 <_dtoa_r>:
 800df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df14:	69c7      	ldr	r7, [r0, #28]
 800df16:	b097      	sub	sp, #92	@ 0x5c
 800df18:	ed8d 0b04 	vstr	d0, [sp, #16]
 800df1c:	ec55 4b10 	vmov	r4, r5, d0
 800df20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800df22:	9107      	str	r1, [sp, #28]
 800df24:	4681      	mov	r9, r0
 800df26:	920c      	str	r2, [sp, #48]	@ 0x30
 800df28:	9311      	str	r3, [sp, #68]	@ 0x44
 800df2a:	b97f      	cbnz	r7, 800df4c <_dtoa_r+0x3c>
 800df2c:	2010      	movs	r0, #16
 800df2e:	f001 f987 	bl	800f240 <malloc>
 800df32:	4602      	mov	r2, r0
 800df34:	f8c9 001c 	str.w	r0, [r9, #28]
 800df38:	b920      	cbnz	r0, 800df44 <_dtoa_r+0x34>
 800df3a:	4ba9      	ldr	r3, [pc, #676]	@ (800e1e0 <_dtoa_r+0x2d0>)
 800df3c:	21ef      	movs	r1, #239	@ 0xef
 800df3e:	48a9      	ldr	r0, [pc, #676]	@ (800e1e4 <_dtoa_r+0x2d4>)
 800df40:	f7ff ff36 	bl	800ddb0 <__assert_func>
 800df44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df48:	6007      	str	r7, [r0, #0]
 800df4a:	60c7      	str	r7, [r0, #12]
 800df4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df50:	6819      	ldr	r1, [r3, #0]
 800df52:	b159      	cbz	r1, 800df6c <_dtoa_r+0x5c>
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	604a      	str	r2, [r1, #4]
 800df58:	2301      	movs	r3, #1
 800df5a:	4093      	lsls	r3, r2
 800df5c:	608b      	str	r3, [r1, #8]
 800df5e:	4648      	mov	r0, r9
 800df60:	f001 fa7e 	bl	800f460 <_Bfree>
 800df64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	1e2b      	subs	r3, r5, #0
 800df6e:	bfb9      	ittee	lt
 800df70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df74:	9305      	strlt	r3, [sp, #20]
 800df76:	2300      	movge	r3, #0
 800df78:	6033      	strge	r3, [r6, #0]
 800df7a:	9f05      	ldr	r7, [sp, #20]
 800df7c:	4b9a      	ldr	r3, [pc, #616]	@ (800e1e8 <_dtoa_r+0x2d8>)
 800df7e:	bfbc      	itt	lt
 800df80:	2201      	movlt	r2, #1
 800df82:	6032      	strlt	r2, [r6, #0]
 800df84:	43bb      	bics	r3, r7
 800df86:	d112      	bne.n	800dfae <_dtoa_r+0x9e>
 800df88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df94:	4323      	orrs	r3, r4
 800df96:	f000 855a 	beq.w	800ea4e <_dtoa_r+0xb3e>
 800df9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e1fc <_dtoa_r+0x2ec>
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 855c 	beq.w	800ea5e <_dtoa_r+0xb4e>
 800dfa6:	f10a 0303 	add.w	r3, sl, #3
 800dfaa:	f000 bd56 	b.w	800ea5a <_dtoa_r+0xb4a>
 800dfae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	ec51 0b17 	vmov	r0, r1, d7
 800dfb8:	2300      	movs	r3, #0
 800dfba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dfbe:	f7f2 fd9b 	bl	8000af8 <__aeabi_dcmpeq>
 800dfc2:	4680      	mov	r8, r0
 800dfc4:	b158      	cbz	r0, 800dfde <_dtoa_r+0xce>
 800dfc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfc8:	2301      	movs	r3, #1
 800dfca:	6013      	str	r3, [r2, #0]
 800dfcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dfce:	b113      	cbz	r3, 800dfd6 <_dtoa_r+0xc6>
 800dfd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dfd2:	4b86      	ldr	r3, [pc, #536]	@ (800e1ec <_dtoa_r+0x2dc>)
 800dfd4:	6013      	str	r3, [r2, #0]
 800dfd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e200 <_dtoa_r+0x2f0>
 800dfda:	f000 bd40 	b.w	800ea5e <_dtoa_r+0xb4e>
 800dfde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dfe2:	aa14      	add	r2, sp, #80	@ 0x50
 800dfe4:	a915      	add	r1, sp, #84	@ 0x54
 800dfe6:	4648      	mov	r0, r9
 800dfe8:	f001 fdd6 	bl	800fb98 <__d2b>
 800dfec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dff0:	9002      	str	r0, [sp, #8]
 800dff2:	2e00      	cmp	r6, #0
 800dff4:	d078      	beq.n	800e0e8 <_dtoa_r+0x1d8>
 800dff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dff8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e004:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e008:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e00c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e010:	4619      	mov	r1, r3
 800e012:	2200      	movs	r2, #0
 800e014:	4b76      	ldr	r3, [pc, #472]	@ (800e1f0 <_dtoa_r+0x2e0>)
 800e016:	f7f2 f94f 	bl	80002b8 <__aeabi_dsub>
 800e01a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e1c8 <_dtoa_r+0x2b8>)
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	f7f2 fb02 	bl	8000628 <__aeabi_dmul>
 800e024:	a36a      	add	r3, pc, #424	@ (adr r3, 800e1d0 <_dtoa_r+0x2c0>)
 800e026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02a:	f7f2 f947 	bl	80002bc <__adddf3>
 800e02e:	4604      	mov	r4, r0
 800e030:	4630      	mov	r0, r6
 800e032:	460d      	mov	r5, r1
 800e034:	f7f2 fa8e 	bl	8000554 <__aeabi_i2d>
 800e038:	a367      	add	r3, pc, #412	@ (adr r3, 800e1d8 <_dtoa_r+0x2c8>)
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	f7f2 faf3 	bl	8000628 <__aeabi_dmul>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4620      	mov	r0, r4
 800e048:	4629      	mov	r1, r5
 800e04a:	f7f2 f937 	bl	80002bc <__adddf3>
 800e04e:	4604      	mov	r4, r0
 800e050:	460d      	mov	r5, r1
 800e052:	f7f2 fd99 	bl	8000b88 <__aeabi_d2iz>
 800e056:	2200      	movs	r2, #0
 800e058:	4607      	mov	r7, r0
 800e05a:	2300      	movs	r3, #0
 800e05c:	4620      	mov	r0, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	f7f2 fd54 	bl	8000b0c <__aeabi_dcmplt>
 800e064:	b140      	cbz	r0, 800e078 <_dtoa_r+0x168>
 800e066:	4638      	mov	r0, r7
 800e068:	f7f2 fa74 	bl	8000554 <__aeabi_i2d>
 800e06c:	4622      	mov	r2, r4
 800e06e:	462b      	mov	r3, r5
 800e070:	f7f2 fd42 	bl	8000af8 <__aeabi_dcmpeq>
 800e074:	b900      	cbnz	r0, 800e078 <_dtoa_r+0x168>
 800e076:	3f01      	subs	r7, #1
 800e078:	2f16      	cmp	r7, #22
 800e07a:	d852      	bhi.n	800e122 <_dtoa_r+0x212>
 800e07c:	4b5d      	ldr	r3, [pc, #372]	@ (800e1f4 <_dtoa_r+0x2e4>)
 800e07e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e08a:	f7f2 fd3f 	bl	8000b0c <__aeabi_dcmplt>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d049      	beq.n	800e126 <_dtoa_r+0x216>
 800e092:	3f01      	subs	r7, #1
 800e094:	2300      	movs	r3, #0
 800e096:	9310      	str	r3, [sp, #64]	@ 0x40
 800e098:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e09a:	1b9b      	subs	r3, r3, r6
 800e09c:	1e5a      	subs	r2, r3, #1
 800e09e:	bf45      	ittet	mi
 800e0a0:	f1c3 0301 	rsbmi	r3, r3, #1
 800e0a4:	9300      	strmi	r3, [sp, #0]
 800e0a6:	2300      	movpl	r3, #0
 800e0a8:	2300      	movmi	r3, #0
 800e0aa:	9206      	str	r2, [sp, #24]
 800e0ac:	bf54      	ite	pl
 800e0ae:	9300      	strpl	r3, [sp, #0]
 800e0b0:	9306      	strmi	r3, [sp, #24]
 800e0b2:	2f00      	cmp	r7, #0
 800e0b4:	db39      	blt.n	800e12a <_dtoa_r+0x21a>
 800e0b6:	9b06      	ldr	r3, [sp, #24]
 800e0b8:	970d      	str	r7, [sp, #52]	@ 0x34
 800e0ba:	443b      	add	r3, r7
 800e0bc:	9306      	str	r3, [sp, #24]
 800e0be:	2300      	movs	r3, #0
 800e0c0:	9308      	str	r3, [sp, #32]
 800e0c2:	9b07      	ldr	r3, [sp, #28]
 800e0c4:	2b09      	cmp	r3, #9
 800e0c6:	d863      	bhi.n	800e190 <_dtoa_r+0x280>
 800e0c8:	2b05      	cmp	r3, #5
 800e0ca:	bfc4      	itt	gt
 800e0cc:	3b04      	subgt	r3, #4
 800e0ce:	9307      	strgt	r3, [sp, #28]
 800e0d0:	9b07      	ldr	r3, [sp, #28]
 800e0d2:	f1a3 0302 	sub.w	r3, r3, #2
 800e0d6:	bfcc      	ite	gt
 800e0d8:	2400      	movgt	r4, #0
 800e0da:	2401      	movle	r4, #1
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d863      	bhi.n	800e1a8 <_dtoa_r+0x298>
 800e0e0:	e8df f003 	tbb	[pc, r3]
 800e0e4:	2b375452 	.word	0x2b375452
 800e0e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e0ec:	441e      	add	r6, r3
 800e0ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e0f2:	2b20      	cmp	r3, #32
 800e0f4:	bfc1      	itttt	gt
 800e0f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e0fa:	409f      	lslgt	r7, r3
 800e0fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e100:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e104:	bfd6      	itet	le
 800e106:	f1c3 0320 	rsble	r3, r3, #32
 800e10a:	ea47 0003 	orrgt.w	r0, r7, r3
 800e10e:	fa04 f003 	lslle.w	r0, r4, r3
 800e112:	f7f2 fa0f 	bl	8000534 <__aeabi_ui2d>
 800e116:	2201      	movs	r2, #1
 800e118:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e11c:	3e01      	subs	r6, #1
 800e11e:	9212      	str	r2, [sp, #72]	@ 0x48
 800e120:	e776      	b.n	800e010 <_dtoa_r+0x100>
 800e122:	2301      	movs	r3, #1
 800e124:	e7b7      	b.n	800e096 <_dtoa_r+0x186>
 800e126:	9010      	str	r0, [sp, #64]	@ 0x40
 800e128:	e7b6      	b.n	800e098 <_dtoa_r+0x188>
 800e12a:	9b00      	ldr	r3, [sp, #0]
 800e12c:	1bdb      	subs	r3, r3, r7
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	427b      	negs	r3, r7
 800e132:	9308      	str	r3, [sp, #32]
 800e134:	2300      	movs	r3, #0
 800e136:	930d      	str	r3, [sp, #52]	@ 0x34
 800e138:	e7c3      	b.n	800e0c2 <_dtoa_r+0x1b2>
 800e13a:	2301      	movs	r3, #1
 800e13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e140:	eb07 0b03 	add.w	fp, r7, r3
 800e144:	f10b 0301 	add.w	r3, fp, #1
 800e148:	2b01      	cmp	r3, #1
 800e14a:	9303      	str	r3, [sp, #12]
 800e14c:	bfb8      	it	lt
 800e14e:	2301      	movlt	r3, #1
 800e150:	e006      	b.n	800e160 <_dtoa_r+0x250>
 800e152:	2301      	movs	r3, #1
 800e154:	9309      	str	r3, [sp, #36]	@ 0x24
 800e156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e158:	2b00      	cmp	r3, #0
 800e15a:	dd28      	ble.n	800e1ae <_dtoa_r+0x29e>
 800e15c:	469b      	mov	fp, r3
 800e15e:	9303      	str	r3, [sp, #12]
 800e160:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e164:	2100      	movs	r1, #0
 800e166:	2204      	movs	r2, #4
 800e168:	f102 0514 	add.w	r5, r2, #20
 800e16c:	429d      	cmp	r5, r3
 800e16e:	d926      	bls.n	800e1be <_dtoa_r+0x2ae>
 800e170:	6041      	str	r1, [r0, #4]
 800e172:	4648      	mov	r0, r9
 800e174:	f001 f934 	bl	800f3e0 <_Balloc>
 800e178:	4682      	mov	sl, r0
 800e17a:	2800      	cmp	r0, #0
 800e17c:	d142      	bne.n	800e204 <_dtoa_r+0x2f4>
 800e17e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1f8 <_dtoa_r+0x2e8>)
 800e180:	4602      	mov	r2, r0
 800e182:	f240 11af 	movw	r1, #431	@ 0x1af
 800e186:	e6da      	b.n	800df3e <_dtoa_r+0x2e>
 800e188:	2300      	movs	r3, #0
 800e18a:	e7e3      	b.n	800e154 <_dtoa_r+0x244>
 800e18c:	2300      	movs	r3, #0
 800e18e:	e7d5      	b.n	800e13c <_dtoa_r+0x22c>
 800e190:	2401      	movs	r4, #1
 800e192:	2300      	movs	r3, #0
 800e194:	9307      	str	r3, [sp, #28]
 800e196:	9409      	str	r4, [sp, #36]	@ 0x24
 800e198:	f04f 3bff 	mov.w	fp, #4294967295
 800e19c:	2200      	movs	r2, #0
 800e19e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e1a2:	2312      	movs	r3, #18
 800e1a4:	920c      	str	r2, [sp, #48]	@ 0x30
 800e1a6:	e7db      	b.n	800e160 <_dtoa_r+0x250>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ac:	e7f4      	b.n	800e198 <_dtoa_r+0x288>
 800e1ae:	f04f 0b01 	mov.w	fp, #1
 800e1b2:	f8cd b00c 	str.w	fp, [sp, #12]
 800e1b6:	465b      	mov	r3, fp
 800e1b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e1bc:	e7d0      	b.n	800e160 <_dtoa_r+0x250>
 800e1be:	3101      	adds	r1, #1
 800e1c0:	0052      	lsls	r2, r2, #1
 800e1c2:	e7d1      	b.n	800e168 <_dtoa_r+0x258>
 800e1c4:	f3af 8000 	nop.w
 800e1c8:	636f4361 	.word	0x636f4361
 800e1cc:	3fd287a7 	.word	0x3fd287a7
 800e1d0:	8b60c8b3 	.word	0x8b60c8b3
 800e1d4:	3fc68a28 	.word	0x3fc68a28
 800e1d8:	509f79fb 	.word	0x509f79fb
 800e1dc:	3fd34413 	.word	0x3fd34413
 800e1e0:	08011aec 	.word	0x08011aec
 800e1e4:	08011c55 	.word	0x08011c55
 800e1e8:	7ff00000 	.word	0x7ff00000
 800e1ec:	08011d9f 	.word	0x08011d9f
 800e1f0:	3ff80000 	.word	0x3ff80000
 800e1f4:	08012068 	.word	0x08012068
 800e1f8:	08011cad 	.word	0x08011cad
 800e1fc:	08011c51 	.word	0x08011c51
 800e200:	08011d9e 	.word	0x08011d9e
 800e204:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e208:	6018      	str	r0, [r3, #0]
 800e20a:	9b03      	ldr	r3, [sp, #12]
 800e20c:	2b0e      	cmp	r3, #14
 800e20e:	f200 80a1 	bhi.w	800e354 <_dtoa_r+0x444>
 800e212:	2c00      	cmp	r4, #0
 800e214:	f000 809e 	beq.w	800e354 <_dtoa_r+0x444>
 800e218:	2f00      	cmp	r7, #0
 800e21a:	dd33      	ble.n	800e284 <_dtoa_r+0x374>
 800e21c:	4b9c      	ldr	r3, [pc, #624]	@ (800e490 <_dtoa_r+0x580>)
 800e21e:	f007 020f 	and.w	r2, r7, #15
 800e222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e226:	ed93 7b00 	vldr	d7, [r3]
 800e22a:	05f8      	lsls	r0, r7, #23
 800e22c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e230:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e234:	d516      	bpl.n	800e264 <_dtoa_r+0x354>
 800e236:	4b97      	ldr	r3, [pc, #604]	@ (800e494 <_dtoa_r+0x584>)
 800e238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e23c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e240:	f7f2 fb1c 	bl	800087c <__aeabi_ddiv>
 800e244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e248:	f004 040f 	and.w	r4, r4, #15
 800e24c:	2603      	movs	r6, #3
 800e24e:	4d91      	ldr	r5, [pc, #580]	@ (800e494 <_dtoa_r+0x584>)
 800e250:	b954      	cbnz	r4, 800e268 <_dtoa_r+0x358>
 800e252:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e256:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e25a:	f7f2 fb0f 	bl	800087c <__aeabi_ddiv>
 800e25e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e262:	e028      	b.n	800e2b6 <_dtoa_r+0x3a6>
 800e264:	2602      	movs	r6, #2
 800e266:	e7f2      	b.n	800e24e <_dtoa_r+0x33e>
 800e268:	07e1      	lsls	r1, r4, #31
 800e26a:	d508      	bpl.n	800e27e <_dtoa_r+0x36e>
 800e26c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e270:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e274:	f7f2 f9d8 	bl	8000628 <__aeabi_dmul>
 800e278:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e27c:	3601      	adds	r6, #1
 800e27e:	1064      	asrs	r4, r4, #1
 800e280:	3508      	adds	r5, #8
 800e282:	e7e5      	b.n	800e250 <_dtoa_r+0x340>
 800e284:	f000 80af 	beq.w	800e3e6 <_dtoa_r+0x4d6>
 800e288:	427c      	negs	r4, r7
 800e28a:	4b81      	ldr	r3, [pc, #516]	@ (800e490 <_dtoa_r+0x580>)
 800e28c:	4d81      	ldr	r5, [pc, #516]	@ (800e494 <_dtoa_r+0x584>)
 800e28e:	f004 020f 	and.w	r2, r4, #15
 800e292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e29e:	f7f2 f9c3 	bl	8000628 <__aeabi_dmul>
 800e2a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2a6:	1124      	asrs	r4, r4, #4
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	2602      	movs	r6, #2
 800e2ac:	2c00      	cmp	r4, #0
 800e2ae:	f040 808f 	bne.w	800e3d0 <_dtoa_r+0x4c0>
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1d3      	bne.n	800e25e <_dtoa_r+0x34e>
 800e2b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e2b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 8094 	beq.w	800e3ea <_dtoa_r+0x4da>
 800e2c2:	4b75      	ldr	r3, [pc, #468]	@ (800e498 <_dtoa_r+0x588>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f2 fc1f 	bl	8000b0c <__aeabi_dcmplt>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f000 808b 	beq.w	800e3ea <_dtoa_r+0x4da>
 800e2d4:	9b03      	ldr	r3, [sp, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f000 8087 	beq.w	800e3ea <_dtoa_r+0x4da>
 800e2dc:	f1bb 0f00 	cmp.w	fp, #0
 800e2e0:	dd34      	ble.n	800e34c <_dtoa_r+0x43c>
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4b6d      	ldr	r3, [pc, #436]	@ (800e49c <_dtoa_r+0x58c>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7f2 f99d 	bl	8000628 <__aeabi_dmul>
 800e2ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2f2:	f107 38ff 	add.w	r8, r7, #4294967295
 800e2f6:	3601      	adds	r6, #1
 800e2f8:	465c      	mov	r4, fp
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	f7f2 f92a 	bl	8000554 <__aeabi_i2d>
 800e300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e304:	f7f2 f990 	bl	8000628 <__aeabi_dmul>
 800e308:	4b65      	ldr	r3, [pc, #404]	@ (800e4a0 <_dtoa_r+0x590>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	f7f1 ffd6 	bl	80002bc <__adddf3>
 800e310:	4605      	mov	r5, r0
 800e312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e316:	2c00      	cmp	r4, #0
 800e318:	d16a      	bne.n	800e3f0 <_dtoa_r+0x4e0>
 800e31a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e31e:	4b61      	ldr	r3, [pc, #388]	@ (800e4a4 <_dtoa_r+0x594>)
 800e320:	2200      	movs	r2, #0
 800e322:	f7f1 ffc9 	bl	80002b8 <__aeabi_dsub>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e32e:	462a      	mov	r2, r5
 800e330:	4633      	mov	r3, r6
 800e332:	f7f2 fc09 	bl	8000b48 <__aeabi_dcmpgt>
 800e336:	2800      	cmp	r0, #0
 800e338:	f040 8298 	bne.w	800e86c <_dtoa_r+0x95c>
 800e33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e340:	462a      	mov	r2, r5
 800e342:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e346:	f7f2 fbe1 	bl	8000b0c <__aeabi_dcmplt>
 800e34a:	bb38      	cbnz	r0, 800e39c <_dtoa_r+0x48c>
 800e34c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e350:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e356:	2b00      	cmp	r3, #0
 800e358:	f2c0 8157 	blt.w	800e60a <_dtoa_r+0x6fa>
 800e35c:	2f0e      	cmp	r7, #14
 800e35e:	f300 8154 	bgt.w	800e60a <_dtoa_r+0x6fa>
 800e362:	4b4b      	ldr	r3, [pc, #300]	@ (800e490 <_dtoa_r+0x580>)
 800e364:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e368:	ed93 7b00 	vldr	d7, [r3]
 800e36c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e36e:	2b00      	cmp	r3, #0
 800e370:	ed8d 7b00 	vstr	d7, [sp]
 800e374:	f280 80e5 	bge.w	800e542 <_dtoa_r+0x632>
 800e378:	9b03      	ldr	r3, [sp, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f300 80e1 	bgt.w	800e542 <_dtoa_r+0x632>
 800e380:	d10c      	bne.n	800e39c <_dtoa_r+0x48c>
 800e382:	4b48      	ldr	r3, [pc, #288]	@ (800e4a4 <_dtoa_r+0x594>)
 800e384:	2200      	movs	r2, #0
 800e386:	ec51 0b17 	vmov	r0, r1, d7
 800e38a:	f7f2 f94d 	bl	8000628 <__aeabi_dmul>
 800e38e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e392:	f7f2 fbcf 	bl	8000b34 <__aeabi_dcmpge>
 800e396:	2800      	cmp	r0, #0
 800e398:	f000 8266 	beq.w	800e868 <_dtoa_r+0x958>
 800e39c:	2400      	movs	r4, #0
 800e39e:	4625      	mov	r5, r4
 800e3a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3a2:	4656      	mov	r6, sl
 800e3a4:	ea6f 0803 	mvn.w	r8, r3
 800e3a8:	2700      	movs	r7, #0
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	4648      	mov	r0, r9
 800e3ae:	f001 f857 	bl	800f460 <_Bfree>
 800e3b2:	2d00      	cmp	r5, #0
 800e3b4:	f000 80bd 	beq.w	800e532 <_dtoa_r+0x622>
 800e3b8:	b12f      	cbz	r7, 800e3c6 <_dtoa_r+0x4b6>
 800e3ba:	42af      	cmp	r7, r5
 800e3bc:	d003      	beq.n	800e3c6 <_dtoa_r+0x4b6>
 800e3be:	4639      	mov	r1, r7
 800e3c0:	4648      	mov	r0, r9
 800e3c2:	f001 f84d 	bl	800f460 <_Bfree>
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	4648      	mov	r0, r9
 800e3ca:	f001 f849 	bl	800f460 <_Bfree>
 800e3ce:	e0b0      	b.n	800e532 <_dtoa_r+0x622>
 800e3d0:	07e2      	lsls	r2, r4, #31
 800e3d2:	d505      	bpl.n	800e3e0 <_dtoa_r+0x4d0>
 800e3d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3d8:	f7f2 f926 	bl	8000628 <__aeabi_dmul>
 800e3dc:	3601      	adds	r6, #1
 800e3de:	2301      	movs	r3, #1
 800e3e0:	1064      	asrs	r4, r4, #1
 800e3e2:	3508      	adds	r5, #8
 800e3e4:	e762      	b.n	800e2ac <_dtoa_r+0x39c>
 800e3e6:	2602      	movs	r6, #2
 800e3e8:	e765      	b.n	800e2b6 <_dtoa_r+0x3a6>
 800e3ea:	9c03      	ldr	r4, [sp, #12]
 800e3ec:	46b8      	mov	r8, r7
 800e3ee:	e784      	b.n	800e2fa <_dtoa_r+0x3ea>
 800e3f0:	4b27      	ldr	r3, [pc, #156]	@ (800e490 <_dtoa_r+0x580>)
 800e3f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3fc:	4454      	add	r4, sl
 800e3fe:	2900      	cmp	r1, #0
 800e400:	d054      	beq.n	800e4ac <_dtoa_r+0x59c>
 800e402:	4929      	ldr	r1, [pc, #164]	@ (800e4a8 <_dtoa_r+0x598>)
 800e404:	2000      	movs	r0, #0
 800e406:	f7f2 fa39 	bl	800087c <__aeabi_ddiv>
 800e40a:	4633      	mov	r3, r6
 800e40c:	462a      	mov	r2, r5
 800e40e:	f7f1 ff53 	bl	80002b8 <__aeabi_dsub>
 800e412:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e416:	4656      	mov	r6, sl
 800e418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e41c:	f7f2 fbb4 	bl	8000b88 <__aeabi_d2iz>
 800e420:	4605      	mov	r5, r0
 800e422:	f7f2 f897 	bl	8000554 <__aeabi_i2d>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e42e:	f7f1 ff43 	bl	80002b8 <__aeabi_dsub>
 800e432:	3530      	adds	r5, #48	@ 0x30
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e43c:	f806 5b01 	strb.w	r5, [r6], #1
 800e440:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e444:	f7f2 fb62 	bl	8000b0c <__aeabi_dcmplt>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d172      	bne.n	800e532 <_dtoa_r+0x622>
 800e44c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e450:	4911      	ldr	r1, [pc, #68]	@ (800e498 <_dtoa_r+0x588>)
 800e452:	2000      	movs	r0, #0
 800e454:	f7f1 ff30 	bl	80002b8 <__aeabi_dsub>
 800e458:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e45c:	f7f2 fb56 	bl	8000b0c <__aeabi_dcmplt>
 800e460:	2800      	cmp	r0, #0
 800e462:	f040 80b4 	bne.w	800e5ce <_dtoa_r+0x6be>
 800e466:	42a6      	cmp	r6, r4
 800e468:	f43f af70 	beq.w	800e34c <_dtoa_r+0x43c>
 800e46c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e470:	4b0a      	ldr	r3, [pc, #40]	@ (800e49c <_dtoa_r+0x58c>)
 800e472:	2200      	movs	r2, #0
 800e474:	f7f2 f8d8 	bl	8000628 <__aeabi_dmul>
 800e478:	4b08      	ldr	r3, [pc, #32]	@ (800e49c <_dtoa_r+0x58c>)
 800e47a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e47e:	2200      	movs	r2, #0
 800e480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e484:	f7f2 f8d0 	bl	8000628 <__aeabi_dmul>
 800e488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e48c:	e7c4      	b.n	800e418 <_dtoa_r+0x508>
 800e48e:	bf00      	nop
 800e490:	08012068 	.word	0x08012068
 800e494:	08012040 	.word	0x08012040
 800e498:	3ff00000 	.word	0x3ff00000
 800e49c:	40240000 	.word	0x40240000
 800e4a0:	401c0000 	.word	0x401c0000
 800e4a4:	40140000 	.word	0x40140000
 800e4a8:	3fe00000 	.word	0x3fe00000
 800e4ac:	4631      	mov	r1, r6
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7f2 f8ba 	bl	8000628 <__aeabi_dmul>
 800e4b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e4b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e4ba:	4656      	mov	r6, sl
 800e4bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4c0:	f7f2 fb62 	bl	8000b88 <__aeabi_d2iz>
 800e4c4:	4605      	mov	r5, r0
 800e4c6:	f7f2 f845 	bl	8000554 <__aeabi_i2d>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4d2:	f7f1 fef1 	bl	80002b8 <__aeabi_dsub>
 800e4d6:	3530      	adds	r5, #48	@ 0x30
 800e4d8:	f806 5b01 	strb.w	r5, [r6], #1
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	42a6      	cmp	r6, r4
 800e4e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4e6:	f04f 0200 	mov.w	r2, #0
 800e4ea:	d124      	bne.n	800e536 <_dtoa_r+0x626>
 800e4ec:	4baf      	ldr	r3, [pc, #700]	@ (800e7ac <_dtoa_r+0x89c>)
 800e4ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e4f2:	f7f1 fee3 	bl	80002bc <__adddf3>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4fe:	f7f2 fb23 	bl	8000b48 <__aeabi_dcmpgt>
 800e502:	2800      	cmp	r0, #0
 800e504:	d163      	bne.n	800e5ce <_dtoa_r+0x6be>
 800e506:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e50a:	49a8      	ldr	r1, [pc, #672]	@ (800e7ac <_dtoa_r+0x89c>)
 800e50c:	2000      	movs	r0, #0
 800e50e:	f7f1 fed3 	bl	80002b8 <__aeabi_dsub>
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e51a:	f7f2 faf7 	bl	8000b0c <__aeabi_dcmplt>
 800e51e:	2800      	cmp	r0, #0
 800e520:	f43f af14 	beq.w	800e34c <_dtoa_r+0x43c>
 800e524:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e526:	1e73      	subs	r3, r6, #1
 800e528:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e52a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e52e:	2b30      	cmp	r3, #48	@ 0x30
 800e530:	d0f8      	beq.n	800e524 <_dtoa_r+0x614>
 800e532:	4647      	mov	r7, r8
 800e534:	e03b      	b.n	800e5ae <_dtoa_r+0x69e>
 800e536:	4b9e      	ldr	r3, [pc, #632]	@ (800e7b0 <_dtoa_r+0x8a0>)
 800e538:	f7f2 f876 	bl	8000628 <__aeabi_dmul>
 800e53c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e540:	e7bc      	b.n	800e4bc <_dtoa_r+0x5ac>
 800e542:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e546:	4656      	mov	r6, sl
 800e548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e54c:	4620      	mov	r0, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	f7f2 f994 	bl	800087c <__aeabi_ddiv>
 800e554:	f7f2 fb18 	bl	8000b88 <__aeabi_d2iz>
 800e558:	4680      	mov	r8, r0
 800e55a:	f7f1 fffb 	bl	8000554 <__aeabi_i2d>
 800e55e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e562:	f7f2 f861 	bl	8000628 <__aeabi_dmul>
 800e566:	4602      	mov	r2, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	4620      	mov	r0, r4
 800e56c:	4629      	mov	r1, r5
 800e56e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e572:	f7f1 fea1 	bl	80002b8 <__aeabi_dsub>
 800e576:	f806 4b01 	strb.w	r4, [r6], #1
 800e57a:	9d03      	ldr	r5, [sp, #12]
 800e57c:	eba6 040a 	sub.w	r4, r6, sl
 800e580:	42a5      	cmp	r5, r4
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	d133      	bne.n	800e5f0 <_dtoa_r+0x6e0>
 800e588:	f7f1 fe98 	bl	80002bc <__adddf3>
 800e58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	f7f2 fad8 	bl	8000b48 <__aeabi_dcmpgt>
 800e598:	b9c0      	cbnz	r0, 800e5cc <_dtoa_r+0x6bc>
 800e59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	f7f2 faa9 	bl	8000af8 <__aeabi_dcmpeq>
 800e5a6:	b110      	cbz	r0, 800e5ae <_dtoa_r+0x69e>
 800e5a8:	f018 0f01 	tst.w	r8, #1
 800e5ac:	d10e      	bne.n	800e5cc <_dtoa_r+0x6bc>
 800e5ae:	9902      	ldr	r1, [sp, #8]
 800e5b0:	4648      	mov	r0, r9
 800e5b2:	f000 ff55 	bl	800f460 <_Bfree>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	7033      	strb	r3, [r6, #0]
 800e5ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5bc:	3701      	adds	r7, #1
 800e5be:	601f      	str	r7, [r3, #0]
 800e5c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 824b 	beq.w	800ea5e <_dtoa_r+0xb4e>
 800e5c8:	601e      	str	r6, [r3, #0]
 800e5ca:	e248      	b.n	800ea5e <_dtoa_r+0xb4e>
 800e5cc:	46b8      	mov	r8, r7
 800e5ce:	4633      	mov	r3, r6
 800e5d0:	461e      	mov	r6, r3
 800e5d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5d6:	2a39      	cmp	r2, #57	@ 0x39
 800e5d8:	d106      	bne.n	800e5e8 <_dtoa_r+0x6d8>
 800e5da:	459a      	cmp	sl, r3
 800e5dc:	d1f8      	bne.n	800e5d0 <_dtoa_r+0x6c0>
 800e5de:	2230      	movs	r2, #48	@ 0x30
 800e5e0:	f108 0801 	add.w	r8, r8, #1
 800e5e4:	f88a 2000 	strb.w	r2, [sl]
 800e5e8:	781a      	ldrb	r2, [r3, #0]
 800e5ea:	3201      	adds	r2, #1
 800e5ec:	701a      	strb	r2, [r3, #0]
 800e5ee:	e7a0      	b.n	800e532 <_dtoa_r+0x622>
 800e5f0:	4b6f      	ldr	r3, [pc, #444]	@ (800e7b0 <_dtoa_r+0x8a0>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f7f2 f818 	bl	8000628 <__aeabi_dmul>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	460d      	mov	r5, r1
 800e600:	f7f2 fa7a 	bl	8000af8 <__aeabi_dcmpeq>
 800e604:	2800      	cmp	r0, #0
 800e606:	d09f      	beq.n	800e548 <_dtoa_r+0x638>
 800e608:	e7d1      	b.n	800e5ae <_dtoa_r+0x69e>
 800e60a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	f000 80ea 	beq.w	800e7e6 <_dtoa_r+0x8d6>
 800e612:	9a07      	ldr	r2, [sp, #28]
 800e614:	2a01      	cmp	r2, #1
 800e616:	f300 80cd 	bgt.w	800e7b4 <_dtoa_r+0x8a4>
 800e61a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e61c:	2a00      	cmp	r2, #0
 800e61e:	f000 80c1 	beq.w	800e7a4 <_dtoa_r+0x894>
 800e622:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e626:	9c08      	ldr	r4, [sp, #32]
 800e628:	9e00      	ldr	r6, [sp, #0]
 800e62a:	9a00      	ldr	r2, [sp, #0]
 800e62c:	441a      	add	r2, r3
 800e62e:	9200      	str	r2, [sp, #0]
 800e630:	9a06      	ldr	r2, [sp, #24]
 800e632:	2101      	movs	r1, #1
 800e634:	441a      	add	r2, r3
 800e636:	4648      	mov	r0, r9
 800e638:	9206      	str	r2, [sp, #24]
 800e63a:	f001 f80f 	bl	800f65c <__i2b>
 800e63e:	4605      	mov	r5, r0
 800e640:	b166      	cbz	r6, 800e65c <_dtoa_r+0x74c>
 800e642:	9b06      	ldr	r3, [sp, #24]
 800e644:	2b00      	cmp	r3, #0
 800e646:	dd09      	ble.n	800e65c <_dtoa_r+0x74c>
 800e648:	42b3      	cmp	r3, r6
 800e64a:	9a00      	ldr	r2, [sp, #0]
 800e64c:	bfa8      	it	ge
 800e64e:	4633      	movge	r3, r6
 800e650:	1ad2      	subs	r2, r2, r3
 800e652:	9200      	str	r2, [sp, #0]
 800e654:	9a06      	ldr	r2, [sp, #24]
 800e656:	1af6      	subs	r6, r6, r3
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	9306      	str	r3, [sp, #24]
 800e65c:	9b08      	ldr	r3, [sp, #32]
 800e65e:	b30b      	cbz	r3, 800e6a4 <_dtoa_r+0x794>
 800e660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 80c6 	beq.w	800e7f4 <_dtoa_r+0x8e4>
 800e668:	2c00      	cmp	r4, #0
 800e66a:	f000 80c0 	beq.w	800e7ee <_dtoa_r+0x8de>
 800e66e:	4629      	mov	r1, r5
 800e670:	4622      	mov	r2, r4
 800e672:	4648      	mov	r0, r9
 800e674:	f001 f8aa 	bl	800f7cc <__pow5mult>
 800e678:	9a02      	ldr	r2, [sp, #8]
 800e67a:	4601      	mov	r1, r0
 800e67c:	4605      	mov	r5, r0
 800e67e:	4648      	mov	r0, r9
 800e680:	f001 f802 	bl	800f688 <__multiply>
 800e684:	9902      	ldr	r1, [sp, #8]
 800e686:	4680      	mov	r8, r0
 800e688:	4648      	mov	r0, r9
 800e68a:	f000 fee9 	bl	800f460 <_Bfree>
 800e68e:	9b08      	ldr	r3, [sp, #32]
 800e690:	1b1b      	subs	r3, r3, r4
 800e692:	9308      	str	r3, [sp, #32]
 800e694:	f000 80b1 	beq.w	800e7fa <_dtoa_r+0x8ea>
 800e698:	9a08      	ldr	r2, [sp, #32]
 800e69a:	4641      	mov	r1, r8
 800e69c:	4648      	mov	r0, r9
 800e69e:	f001 f895 	bl	800f7cc <__pow5mult>
 800e6a2:	9002      	str	r0, [sp, #8]
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	4648      	mov	r0, r9
 800e6a8:	f000 ffd8 	bl	800f65c <__i2b>
 800e6ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 81d8 	beq.w	800ea66 <_dtoa_r+0xb56>
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	4601      	mov	r1, r0
 800e6ba:	4648      	mov	r0, r9
 800e6bc:	f001 f886 	bl	800f7cc <__pow5mult>
 800e6c0:	9b07      	ldr	r3, [sp, #28]
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	f300 809f 	bgt.w	800e808 <_dtoa_r+0x8f8>
 800e6ca:	9b04      	ldr	r3, [sp, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 8097 	bne.w	800e800 <_dtoa_r+0x8f0>
 800e6d2:	9b05      	ldr	r3, [sp, #20]
 800e6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f040 8093 	bne.w	800e804 <_dtoa_r+0x8f4>
 800e6de:	9b05      	ldr	r3, [sp, #20]
 800e6e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6e4:	0d1b      	lsrs	r3, r3, #20
 800e6e6:	051b      	lsls	r3, r3, #20
 800e6e8:	b133      	cbz	r3, 800e6f8 <_dtoa_r+0x7e8>
 800e6ea:	9b00      	ldr	r3, [sp, #0]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	9b06      	ldr	r3, [sp, #24]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	9306      	str	r3, [sp, #24]
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	9308      	str	r3, [sp, #32]
 800e6fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f000 81b8 	beq.w	800ea72 <_dtoa_r+0xb62>
 800e702:	6923      	ldr	r3, [r4, #16]
 800e704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e708:	6918      	ldr	r0, [r3, #16]
 800e70a:	f000 ff5b 	bl	800f5c4 <__hi0bits>
 800e70e:	f1c0 0020 	rsb	r0, r0, #32
 800e712:	9b06      	ldr	r3, [sp, #24]
 800e714:	4418      	add	r0, r3
 800e716:	f010 001f 	ands.w	r0, r0, #31
 800e71a:	f000 8082 	beq.w	800e822 <_dtoa_r+0x912>
 800e71e:	f1c0 0320 	rsb	r3, r0, #32
 800e722:	2b04      	cmp	r3, #4
 800e724:	dd73      	ble.n	800e80e <_dtoa_r+0x8fe>
 800e726:	9b00      	ldr	r3, [sp, #0]
 800e728:	f1c0 001c 	rsb	r0, r0, #28
 800e72c:	4403      	add	r3, r0
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	9b06      	ldr	r3, [sp, #24]
 800e732:	4403      	add	r3, r0
 800e734:	4406      	add	r6, r0
 800e736:	9306      	str	r3, [sp, #24]
 800e738:	9b00      	ldr	r3, [sp, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	dd05      	ble.n	800e74a <_dtoa_r+0x83a>
 800e73e:	9902      	ldr	r1, [sp, #8]
 800e740:	461a      	mov	r2, r3
 800e742:	4648      	mov	r0, r9
 800e744:	f001 f89c 	bl	800f880 <__lshift>
 800e748:	9002      	str	r0, [sp, #8]
 800e74a:	9b06      	ldr	r3, [sp, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	dd05      	ble.n	800e75c <_dtoa_r+0x84c>
 800e750:	4621      	mov	r1, r4
 800e752:	461a      	mov	r2, r3
 800e754:	4648      	mov	r0, r9
 800e756:	f001 f893 	bl	800f880 <__lshift>
 800e75a:	4604      	mov	r4, r0
 800e75c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d061      	beq.n	800e826 <_dtoa_r+0x916>
 800e762:	9802      	ldr	r0, [sp, #8]
 800e764:	4621      	mov	r1, r4
 800e766:	f001 f8f7 	bl	800f958 <__mcmp>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	da5b      	bge.n	800e826 <_dtoa_r+0x916>
 800e76e:	2300      	movs	r3, #0
 800e770:	9902      	ldr	r1, [sp, #8]
 800e772:	220a      	movs	r2, #10
 800e774:	4648      	mov	r0, r9
 800e776:	f000 fe95 	bl	800f4a4 <__multadd>
 800e77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e77c:	9002      	str	r0, [sp, #8]
 800e77e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e782:	2b00      	cmp	r3, #0
 800e784:	f000 8177 	beq.w	800ea76 <_dtoa_r+0xb66>
 800e788:	4629      	mov	r1, r5
 800e78a:	2300      	movs	r3, #0
 800e78c:	220a      	movs	r2, #10
 800e78e:	4648      	mov	r0, r9
 800e790:	f000 fe88 	bl	800f4a4 <__multadd>
 800e794:	f1bb 0f00 	cmp.w	fp, #0
 800e798:	4605      	mov	r5, r0
 800e79a:	dc6f      	bgt.n	800e87c <_dtoa_r+0x96c>
 800e79c:	9b07      	ldr	r3, [sp, #28]
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	dc49      	bgt.n	800e836 <_dtoa_r+0x926>
 800e7a2:	e06b      	b.n	800e87c <_dtoa_r+0x96c>
 800e7a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e7a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7aa:	e73c      	b.n	800e626 <_dtoa_r+0x716>
 800e7ac:	3fe00000 	.word	0x3fe00000
 800e7b0:	40240000 	.word	0x40240000
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	1e5c      	subs	r4, r3, #1
 800e7b8:	9b08      	ldr	r3, [sp, #32]
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	db09      	blt.n	800e7d2 <_dtoa_r+0x8c2>
 800e7be:	1b1c      	subs	r4, r3, r4
 800e7c0:	9b03      	ldr	r3, [sp, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f6bf af30 	bge.w	800e628 <_dtoa_r+0x718>
 800e7c8:	9b00      	ldr	r3, [sp, #0]
 800e7ca:	9a03      	ldr	r2, [sp, #12]
 800e7cc:	1a9e      	subs	r6, r3, r2
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e72b      	b.n	800e62a <_dtoa_r+0x71a>
 800e7d2:	9b08      	ldr	r3, [sp, #32]
 800e7d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e7d6:	9408      	str	r4, [sp, #32]
 800e7d8:	1ae3      	subs	r3, r4, r3
 800e7da:	441a      	add	r2, r3
 800e7dc:	9e00      	ldr	r6, [sp, #0]
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800e7e2:	2400      	movs	r4, #0
 800e7e4:	e721      	b.n	800e62a <_dtoa_r+0x71a>
 800e7e6:	9c08      	ldr	r4, [sp, #32]
 800e7e8:	9e00      	ldr	r6, [sp, #0]
 800e7ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e7ec:	e728      	b.n	800e640 <_dtoa_r+0x730>
 800e7ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e7f2:	e751      	b.n	800e698 <_dtoa_r+0x788>
 800e7f4:	9a08      	ldr	r2, [sp, #32]
 800e7f6:	9902      	ldr	r1, [sp, #8]
 800e7f8:	e750      	b.n	800e69c <_dtoa_r+0x78c>
 800e7fa:	f8cd 8008 	str.w	r8, [sp, #8]
 800e7fe:	e751      	b.n	800e6a4 <_dtoa_r+0x794>
 800e800:	2300      	movs	r3, #0
 800e802:	e779      	b.n	800e6f8 <_dtoa_r+0x7e8>
 800e804:	9b04      	ldr	r3, [sp, #16]
 800e806:	e777      	b.n	800e6f8 <_dtoa_r+0x7e8>
 800e808:	2300      	movs	r3, #0
 800e80a:	9308      	str	r3, [sp, #32]
 800e80c:	e779      	b.n	800e702 <_dtoa_r+0x7f2>
 800e80e:	d093      	beq.n	800e738 <_dtoa_r+0x828>
 800e810:	9a00      	ldr	r2, [sp, #0]
 800e812:	331c      	adds	r3, #28
 800e814:	441a      	add	r2, r3
 800e816:	9200      	str	r2, [sp, #0]
 800e818:	9a06      	ldr	r2, [sp, #24]
 800e81a:	441a      	add	r2, r3
 800e81c:	441e      	add	r6, r3
 800e81e:	9206      	str	r2, [sp, #24]
 800e820:	e78a      	b.n	800e738 <_dtoa_r+0x828>
 800e822:	4603      	mov	r3, r0
 800e824:	e7f4      	b.n	800e810 <_dtoa_r+0x900>
 800e826:	9b03      	ldr	r3, [sp, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	46b8      	mov	r8, r7
 800e82c:	dc20      	bgt.n	800e870 <_dtoa_r+0x960>
 800e82e:	469b      	mov	fp, r3
 800e830:	9b07      	ldr	r3, [sp, #28]
 800e832:	2b02      	cmp	r3, #2
 800e834:	dd1e      	ble.n	800e874 <_dtoa_r+0x964>
 800e836:	f1bb 0f00 	cmp.w	fp, #0
 800e83a:	f47f adb1 	bne.w	800e3a0 <_dtoa_r+0x490>
 800e83e:	4621      	mov	r1, r4
 800e840:	465b      	mov	r3, fp
 800e842:	2205      	movs	r2, #5
 800e844:	4648      	mov	r0, r9
 800e846:	f000 fe2d 	bl	800f4a4 <__multadd>
 800e84a:	4601      	mov	r1, r0
 800e84c:	4604      	mov	r4, r0
 800e84e:	9802      	ldr	r0, [sp, #8]
 800e850:	f001 f882 	bl	800f958 <__mcmp>
 800e854:	2800      	cmp	r0, #0
 800e856:	f77f ada3 	ble.w	800e3a0 <_dtoa_r+0x490>
 800e85a:	4656      	mov	r6, sl
 800e85c:	2331      	movs	r3, #49	@ 0x31
 800e85e:	f806 3b01 	strb.w	r3, [r6], #1
 800e862:	f108 0801 	add.w	r8, r8, #1
 800e866:	e59f      	b.n	800e3a8 <_dtoa_r+0x498>
 800e868:	9c03      	ldr	r4, [sp, #12]
 800e86a:	46b8      	mov	r8, r7
 800e86c:	4625      	mov	r5, r4
 800e86e:	e7f4      	b.n	800e85a <_dtoa_r+0x94a>
 800e870:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e876:	2b00      	cmp	r3, #0
 800e878:	f000 8101 	beq.w	800ea7e <_dtoa_r+0xb6e>
 800e87c:	2e00      	cmp	r6, #0
 800e87e:	dd05      	ble.n	800e88c <_dtoa_r+0x97c>
 800e880:	4629      	mov	r1, r5
 800e882:	4632      	mov	r2, r6
 800e884:	4648      	mov	r0, r9
 800e886:	f000 fffb 	bl	800f880 <__lshift>
 800e88a:	4605      	mov	r5, r0
 800e88c:	9b08      	ldr	r3, [sp, #32]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d05c      	beq.n	800e94c <_dtoa_r+0xa3c>
 800e892:	6869      	ldr	r1, [r5, #4]
 800e894:	4648      	mov	r0, r9
 800e896:	f000 fda3 	bl	800f3e0 <_Balloc>
 800e89a:	4606      	mov	r6, r0
 800e89c:	b928      	cbnz	r0, 800e8aa <_dtoa_r+0x99a>
 800e89e:	4b82      	ldr	r3, [pc, #520]	@ (800eaa8 <_dtoa_r+0xb98>)
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e8a6:	f7ff bb4a 	b.w	800df3e <_dtoa_r+0x2e>
 800e8aa:	692a      	ldr	r2, [r5, #16]
 800e8ac:	3202      	adds	r2, #2
 800e8ae:	0092      	lsls	r2, r2, #2
 800e8b0:	f105 010c 	add.w	r1, r5, #12
 800e8b4:	300c      	adds	r0, #12
 800e8b6:	f7ff fa64 	bl	800dd82 <memcpy>
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	4631      	mov	r1, r6
 800e8be:	4648      	mov	r0, r9
 800e8c0:	f000 ffde 	bl	800f880 <__lshift>
 800e8c4:	f10a 0301 	add.w	r3, sl, #1
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	eb0a 030b 	add.w	r3, sl, fp
 800e8ce:	9308      	str	r3, [sp, #32]
 800e8d0:	9b04      	ldr	r3, [sp, #16]
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	462f      	mov	r7, r5
 800e8d8:	9306      	str	r3, [sp, #24]
 800e8da:	4605      	mov	r5, r0
 800e8dc:	9b00      	ldr	r3, [sp, #0]
 800e8de:	9802      	ldr	r0, [sp, #8]
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	f103 3bff 	add.w	fp, r3, #4294967295
 800e8e6:	f7ff fa89 	bl	800ddfc <quorem>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	3330      	adds	r3, #48	@ 0x30
 800e8ee:	9003      	str	r0, [sp, #12]
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	9802      	ldr	r0, [sp, #8]
 800e8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8f6:	f001 f82f 	bl	800f958 <__mcmp>
 800e8fa:	462a      	mov	r2, r5
 800e8fc:	9004      	str	r0, [sp, #16]
 800e8fe:	4621      	mov	r1, r4
 800e900:	4648      	mov	r0, r9
 800e902:	f001 f845 	bl	800f990 <__mdiff>
 800e906:	68c2      	ldr	r2, [r0, #12]
 800e908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90a:	4606      	mov	r6, r0
 800e90c:	bb02      	cbnz	r2, 800e950 <_dtoa_r+0xa40>
 800e90e:	4601      	mov	r1, r0
 800e910:	9802      	ldr	r0, [sp, #8]
 800e912:	f001 f821 	bl	800f958 <__mcmp>
 800e916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e918:	4602      	mov	r2, r0
 800e91a:	4631      	mov	r1, r6
 800e91c:	4648      	mov	r0, r9
 800e91e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e920:	9309      	str	r3, [sp, #36]	@ 0x24
 800e922:	f000 fd9d 	bl	800f460 <_Bfree>
 800e926:	9b07      	ldr	r3, [sp, #28]
 800e928:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e92a:	9e00      	ldr	r6, [sp, #0]
 800e92c:	ea42 0103 	orr.w	r1, r2, r3
 800e930:	9b06      	ldr	r3, [sp, #24]
 800e932:	4319      	orrs	r1, r3
 800e934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e936:	d10d      	bne.n	800e954 <_dtoa_r+0xa44>
 800e938:	2b39      	cmp	r3, #57	@ 0x39
 800e93a:	d027      	beq.n	800e98c <_dtoa_r+0xa7c>
 800e93c:	9a04      	ldr	r2, [sp, #16]
 800e93e:	2a00      	cmp	r2, #0
 800e940:	dd01      	ble.n	800e946 <_dtoa_r+0xa36>
 800e942:	9b03      	ldr	r3, [sp, #12]
 800e944:	3331      	adds	r3, #49	@ 0x31
 800e946:	f88b 3000 	strb.w	r3, [fp]
 800e94a:	e52e      	b.n	800e3aa <_dtoa_r+0x49a>
 800e94c:	4628      	mov	r0, r5
 800e94e:	e7b9      	b.n	800e8c4 <_dtoa_r+0x9b4>
 800e950:	2201      	movs	r2, #1
 800e952:	e7e2      	b.n	800e91a <_dtoa_r+0xa0a>
 800e954:	9904      	ldr	r1, [sp, #16]
 800e956:	2900      	cmp	r1, #0
 800e958:	db04      	blt.n	800e964 <_dtoa_r+0xa54>
 800e95a:	9807      	ldr	r0, [sp, #28]
 800e95c:	4301      	orrs	r1, r0
 800e95e:	9806      	ldr	r0, [sp, #24]
 800e960:	4301      	orrs	r1, r0
 800e962:	d120      	bne.n	800e9a6 <_dtoa_r+0xa96>
 800e964:	2a00      	cmp	r2, #0
 800e966:	ddee      	ble.n	800e946 <_dtoa_r+0xa36>
 800e968:	9902      	ldr	r1, [sp, #8]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	2201      	movs	r2, #1
 800e96e:	4648      	mov	r0, r9
 800e970:	f000 ff86 	bl	800f880 <__lshift>
 800e974:	4621      	mov	r1, r4
 800e976:	9002      	str	r0, [sp, #8]
 800e978:	f000 ffee 	bl	800f958 <__mcmp>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	9b00      	ldr	r3, [sp, #0]
 800e980:	dc02      	bgt.n	800e988 <_dtoa_r+0xa78>
 800e982:	d1e0      	bne.n	800e946 <_dtoa_r+0xa36>
 800e984:	07da      	lsls	r2, r3, #31
 800e986:	d5de      	bpl.n	800e946 <_dtoa_r+0xa36>
 800e988:	2b39      	cmp	r3, #57	@ 0x39
 800e98a:	d1da      	bne.n	800e942 <_dtoa_r+0xa32>
 800e98c:	2339      	movs	r3, #57	@ 0x39
 800e98e:	f88b 3000 	strb.w	r3, [fp]
 800e992:	4633      	mov	r3, r6
 800e994:	461e      	mov	r6, r3
 800e996:	3b01      	subs	r3, #1
 800e998:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e99c:	2a39      	cmp	r2, #57	@ 0x39
 800e99e:	d04e      	beq.n	800ea3e <_dtoa_r+0xb2e>
 800e9a0:	3201      	adds	r2, #1
 800e9a2:	701a      	strb	r2, [r3, #0]
 800e9a4:	e501      	b.n	800e3aa <_dtoa_r+0x49a>
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	dd03      	ble.n	800e9b2 <_dtoa_r+0xaa2>
 800e9aa:	2b39      	cmp	r3, #57	@ 0x39
 800e9ac:	d0ee      	beq.n	800e98c <_dtoa_r+0xa7c>
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	e7c9      	b.n	800e946 <_dtoa_r+0xa36>
 800e9b2:	9a00      	ldr	r2, [sp, #0]
 800e9b4:	9908      	ldr	r1, [sp, #32]
 800e9b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e9ba:	428a      	cmp	r2, r1
 800e9bc:	d028      	beq.n	800ea10 <_dtoa_r+0xb00>
 800e9be:	9902      	ldr	r1, [sp, #8]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	220a      	movs	r2, #10
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	f000 fd6d 	bl	800f4a4 <__multadd>
 800e9ca:	42af      	cmp	r7, r5
 800e9cc:	9002      	str	r0, [sp, #8]
 800e9ce:	f04f 0300 	mov.w	r3, #0
 800e9d2:	f04f 020a 	mov.w	r2, #10
 800e9d6:	4639      	mov	r1, r7
 800e9d8:	4648      	mov	r0, r9
 800e9da:	d107      	bne.n	800e9ec <_dtoa_r+0xadc>
 800e9dc:	f000 fd62 	bl	800f4a4 <__multadd>
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	9b00      	ldr	r3, [sp, #0]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	e777      	b.n	800e8dc <_dtoa_r+0x9cc>
 800e9ec:	f000 fd5a 	bl	800f4a4 <__multadd>
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	4607      	mov	r7, r0
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	220a      	movs	r2, #10
 800e9f8:	4648      	mov	r0, r9
 800e9fa:	f000 fd53 	bl	800f4a4 <__multadd>
 800e9fe:	4605      	mov	r5, r0
 800ea00:	e7f0      	b.n	800e9e4 <_dtoa_r+0xad4>
 800ea02:	f1bb 0f00 	cmp.w	fp, #0
 800ea06:	bfcc      	ite	gt
 800ea08:	465e      	movgt	r6, fp
 800ea0a:	2601      	movle	r6, #1
 800ea0c:	4456      	add	r6, sl
 800ea0e:	2700      	movs	r7, #0
 800ea10:	9902      	ldr	r1, [sp, #8]
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	2201      	movs	r2, #1
 800ea16:	4648      	mov	r0, r9
 800ea18:	f000 ff32 	bl	800f880 <__lshift>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	9002      	str	r0, [sp, #8]
 800ea20:	f000 ff9a 	bl	800f958 <__mcmp>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	dcb4      	bgt.n	800e992 <_dtoa_r+0xa82>
 800ea28:	d102      	bne.n	800ea30 <_dtoa_r+0xb20>
 800ea2a:	9b00      	ldr	r3, [sp, #0]
 800ea2c:	07db      	lsls	r3, r3, #31
 800ea2e:	d4b0      	bmi.n	800e992 <_dtoa_r+0xa82>
 800ea30:	4633      	mov	r3, r6
 800ea32:	461e      	mov	r6, r3
 800ea34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea38:	2a30      	cmp	r2, #48	@ 0x30
 800ea3a:	d0fa      	beq.n	800ea32 <_dtoa_r+0xb22>
 800ea3c:	e4b5      	b.n	800e3aa <_dtoa_r+0x49a>
 800ea3e:	459a      	cmp	sl, r3
 800ea40:	d1a8      	bne.n	800e994 <_dtoa_r+0xa84>
 800ea42:	2331      	movs	r3, #49	@ 0x31
 800ea44:	f108 0801 	add.w	r8, r8, #1
 800ea48:	f88a 3000 	strb.w	r3, [sl]
 800ea4c:	e4ad      	b.n	800e3aa <_dtoa_r+0x49a>
 800ea4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800eaac <_dtoa_r+0xb9c>
 800ea54:	b11b      	cbz	r3, 800ea5e <_dtoa_r+0xb4e>
 800ea56:	f10a 0308 	add.w	r3, sl, #8
 800ea5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4650      	mov	r0, sl
 800ea60:	b017      	add	sp, #92	@ 0x5c
 800ea62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea66:	9b07      	ldr	r3, [sp, #28]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	f77f ae2e 	ble.w	800e6ca <_dtoa_r+0x7ba>
 800ea6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea70:	9308      	str	r3, [sp, #32]
 800ea72:	2001      	movs	r0, #1
 800ea74:	e64d      	b.n	800e712 <_dtoa_r+0x802>
 800ea76:	f1bb 0f00 	cmp.w	fp, #0
 800ea7a:	f77f aed9 	ble.w	800e830 <_dtoa_r+0x920>
 800ea7e:	4656      	mov	r6, sl
 800ea80:	9802      	ldr	r0, [sp, #8]
 800ea82:	4621      	mov	r1, r4
 800ea84:	f7ff f9ba 	bl	800ddfc <quorem>
 800ea88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ea8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ea90:	eba6 020a 	sub.w	r2, r6, sl
 800ea94:	4593      	cmp	fp, r2
 800ea96:	ddb4      	ble.n	800ea02 <_dtoa_r+0xaf2>
 800ea98:	9902      	ldr	r1, [sp, #8]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	220a      	movs	r2, #10
 800ea9e:	4648      	mov	r0, r9
 800eaa0:	f000 fd00 	bl	800f4a4 <__multadd>
 800eaa4:	9002      	str	r0, [sp, #8]
 800eaa6:	e7eb      	b.n	800ea80 <_dtoa_r+0xb70>
 800eaa8:	08011cad 	.word	0x08011cad
 800eaac:	08011c48 	.word	0x08011c48

0800eab0 <_free_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4605      	mov	r5, r0
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d041      	beq.n	800eb3c <_free_r+0x8c>
 800eab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eabc:	1f0c      	subs	r4, r1, #4
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	bfb8      	it	lt
 800eac2:	18e4      	addlt	r4, r4, r3
 800eac4:	f000 fc80 	bl	800f3c8 <__malloc_lock>
 800eac8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb40 <_free_r+0x90>)
 800eaca:	6813      	ldr	r3, [r2, #0]
 800eacc:	b933      	cbnz	r3, 800eadc <_free_r+0x2c>
 800eace:	6063      	str	r3, [r4, #4]
 800ead0:	6014      	str	r4, [r2, #0]
 800ead2:	4628      	mov	r0, r5
 800ead4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ead8:	f000 bc7c 	b.w	800f3d4 <__malloc_unlock>
 800eadc:	42a3      	cmp	r3, r4
 800eade:	d908      	bls.n	800eaf2 <_free_r+0x42>
 800eae0:	6820      	ldr	r0, [r4, #0]
 800eae2:	1821      	adds	r1, r4, r0
 800eae4:	428b      	cmp	r3, r1
 800eae6:	bf01      	itttt	eq
 800eae8:	6819      	ldreq	r1, [r3, #0]
 800eaea:	685b      	ldreq	r3, [r3, #4]
 800eaec:	1809      	addeq	r1, r1, r0
 800eaee:	6021      	streq	r1, [r4, #0]
 800eaf0:	e7ed      	b.n	800eace <_free_r+0x1e>
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	b10b      	cbz	r3, 800eafc <_free_r+0x4c>
 800eaf8:	42a3      	cmp	r3, r4
 800eafa:	d9fa      	bls.n	800eaf2 <_free_r+0x42>
 800eafc:	6811      	ldr	r1, [r2, #0]
 800eafe:	1850      	adds	r0, r2, r1
 800eb00:	42a0      	cmp	r0, r4
 800eb02:	d10b      	bne.n	800eb1c <_free_r+0x6c>
 800eb04:	6820      	ldr	r0, [r4, #0]
 800eb06:	4401      	add	r1, r0
 800eb08:	1850      	adds	r0, r2, r1
 800eb0a:	4283      	cmp	r3, r0
 800eb0c:	6011      	str	r1, [r2, #0]
 800eb0e:	d1e0      	bne.n	800ead2 <_free_r+0x22>
 800eb10:	6818      	ldr	r0, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	6053      	str	r3, [r2, #4]
 800eb16:	4408      	add	r0, r1
 800eb18:	6010      	str	r0, [r2, #0]
 800eb1a:	e7da      	b.n	800ead2 <_free_r+0x22>
 800eb1c:	d902      	bls.n	800eb24 <_free_r+0x74>
 800eb1e:	230c      	movs	r3, #12
 800eb20:	602b      	str	r3, [r5, #0]
 800eb22:	e7d6      	b.n	800ead2 <_free_r+0x22>
 800eb24:	6820      	ldr	r0, [r4, #0]
 800eb26:	1821      	adds	r1, r4, r0
 800eb28:	428b      	cmp	r3, r1
 800eb2a:	bf04      	itt	eq
 800eb2c:	6819      	ldreq	r1, [r3, #0]
 800eb2e:	685b      	ldreq	r3, [r3, #4]
 800eb30:	6063      	str	r3, [r4, #4]
 800eb32:	bf04      	itt	eq
 800eb34:	1809      	addeq	r1, r1, r0
 800eb36:	6021      	streq	r1, [r4, #0]
 800eb38:	6054      	str	r4, [r2, #4]
 800eb3a:	e7ca      	b.n	800ead2 <_free_r+0x22>
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	bf00      	nop
 800eb40:	20006f0c 	.word	0x20006f0c

0800eb44 <rshift>:
 800eb44:	6903      	ldr	r3, [r0, #16]
 800eb46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eb4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eb52:	f100 0414 	add.w	r4, r0, #20
 800eb56:	dd45      	ble.n	800ebe4 <rshift+0xa0>
 800eb58:	f011 011f 	ands.w	r1, r1, #31
 800eb5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb64:	d10c      	bne.n	800eb80 <rshift+0x3c>
 800eb66:	f100 0710 	add.w	r7, r0, #16
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	42b1      	cmp	r1, r6
 800eb6e:	d334      	bcc.n	800ebda <rshift+0x96>
 800eb70:	1a9b      	subs	r3, r3, r2
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	1eea      	subs	r2, r5, #3
 800eb76:	4296      	cmp	r6, r2
 800eb78:	bf38      	it	cc
 800eb7a:	2300      	movcc	r3, #0
 800eb7c:	4423      	add	r3, r4
 800eb7e:	e015      	b.n	800ebac <rshift+0x68>
 800eb80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb84:	f1c1 0820 	rsb	r8, r1, #32
 800eb88:	40cf      	lsrs	r7, r1
 800eb8a:	f105 0e04 	add.w	lr, r5, #4
 800eb8e:	46a1      	mov	r9, r4
 800eb90:	4576      	cmp	r6, lr
 800eb92:	46f4      	mov	ip, lr
 800eb94:	d815      	bhi.n	800ebc2 <rshift+0x7e>
 800eb96:	1a9a      	subs	r2, r3, r2
 800eb98:	0092      	lsls	r2, r2, #2
 800eb9a:	3a04      	subs	r2, #4
 800eb9c:	3501      	adds	r5, #1
 800eb9e:	42ae      	cmp	r6, r5
 800eba0:	bf38      	it	cc
 800eba2:	2200      	movcc	r2, #0
 800eba4:	18a3      	adds	r3, r4, r2
 800eba6:	50a7      	str	r7, [r4, r2]
 800eba8:	b107      	cbz	r7, 800ebac <rshift+0x68>
 800ebaa:	3304      	adds	r3, #4
 800ebac:	1b1a      	subs	r2, r3, r4
 800ebae:	42a3      	cmp	r3, r4
 800ebb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ebb4:	bf08      	it	eq
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	6102      	str	r2, [r0, #16]
 800ebba:	bf08      	it	eq
 800ebbc:	6143      	streq	r3, [r0, #20]
 800ebbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebc2:	f8dc c000 	ldr.w	ip, [ip]
 800ebc6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ebca:	ea4c 0707 	orr.w	r7, ip, r7
 800ebce:	f849 7b04 	str.w	r7, [r9], #4
 800ebd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ebd6:	40cf      	lsrs	r7, r1
 800ebd8:	e7da      	b.n	800eb90 <rshift+0x4c>
 800ebda:	f851 cb04 	ldr.w	ip, [r1], #4
 800ebde:	f847 cf04 	str.w	ip, [r7, #4]!
 800ebe2:	e7c3      	b.n	800eb6c <rshift+0x28>
 800ebe4:	4623      	mov	r3, r4
 800ebe6:	e7e1      	b.n	800ebac <rshift+0x68>

0800ebe8 <__hexdig_fun>:
 800ebe8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ebec:	2b09      	cmp	r3, #9
 800ebee:	d802      	bhi.n	800ebf6 <__hexdig_fun+0xe>
 800ebf0:	3820      	subs	r0, #32
 800ebf2:	b2c0      	uxtb	r0, r0
 800ebf4:	4770      	bx	lr
 800ebf6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ebfa:	2b05      	cmp	r3, #5
 800ebfc:	d801      	bhi.n	800ec02 <__hexdig_fun+0x1a>
 800ebfe:	3847      	subs	r0, #71	@ 0x47
 800ec00:	e7f7      	b.n	800ebf2 <__hexdig_fun+0xa>
 800ec02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ec06:	2b05      	cmp	r3, #5
 800ec08:	d801      	bhi.n	800ec0e <__hexdig_fun+0x26>
 800ec0a:	3827      	subs	r0, #39	@ 0x27
 800ec0c:	e7f1      	b.n	800ebf2 <__hexdig_fun+0xa>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	4770      	bx	lr
	...

0800ec14 <__gethex>:
 800ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec18:	b085      	sub	sp, #20
 800ec1a:	468a      	mov	sl, r1
 800ec1c:	9302      	str	r3, [sp, #8]
 800ec1e:	680b      	ldr	r3, [r1, #0]
 800ec20:	9001      	str	r0, [sp, #4]
 800ec22:	4690      	mov	r8, r2
 800ec24:	1c9c      	adds	r4, r3, #2
 800ec26:	46a1      	mov	r9, r4
 800ec28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ec2c:	2830      	cmp	r0, #48	@ 0x30
 800ec2e:	d0fa      	beq.n	800ec26 <__gethex+0x12>
 800ec30:	eba9 0303 	sub.w	r3, r9, r3
 800ec34:	f1a3 0b02 	sub.w	fp, r3, #2
 800ec38:	f7ff ffd6 	bl	800ebe8 <__hexdig_fun>
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	d168      	bne.n	800ed14 <__gethex+0x100>
 800ec42:	49a0      	ldr	r1, [pc, #640]	@ (800eec4 <__gethex+0x2b0>)
 800ec44:	2201      	movs	r2, #1
 800ec46:	4648      	mov	r0, r9
 800ec48:	f7fe f8ca 	bl	800cde0 <strncmp>
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d167      	bne.n	800ed22 <__gethex+0x10e>
 800ec52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ec56:	4626      	mov	r6, r4
 800ec58:	f7ff ffc6 	bl	800ebe8 <__hexdig_fun>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d062      	beq.n	800ed26 <__gethex+0x112>
 800ec60:	4623      	mov	r3, r4
 800ec62:	7818      	ldrb	r0, [r3, #0]
 800ec64:	2830      	cmp	r0, #48	@ 0x30
 800ec66:	4699      	mov	r9, r3
 800ec68:	f103 0301 	add.w	r3, r3, #1
 800ec6c:	d0f9      	beq.n	800ec62 <__gethex+0x4e>
 800ec6e:	f7ff ffbb 	bl	800ebe8 <__hexdig_fun>
 800ec72:	fab0 f580 	clz	r5, r0
 800ec76:	096d      	lsrs	r5, r5, #5
 800ec78:	f04f 0b01 	mov.w	fp, #1
 800ec7c:	464a      	mov	r2, r9
 800ec7e:	4616      	mov	r6, r2
 800ec80:	3201      	adds	r2, #1
 800ec82:	7830      	ldrb	r0, [r6, #0]
 800ec84:	f7ff ffb0 	bl	800ebe8 <__hexdig_fun>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d1f8      	bne.n	800ec7e <__gethex+0x6a>
 800ec8c:	498d      	ldr	r1, [pc, #564]	@ (800eec4 <__gethex+0x2b0>)
 800ec8e:	2201      	movs	r2, #1
 800ec90:	4630      	mov	r0, r6
 800ec92:	f7fe f8a5 	bl	800cde0 <strncmp>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d13f      	bne.n	800ed1a <__gethex+0x106>
 800ec9a:	b944      	cbnz	r4, 800ecae <__gethex+0x9a>
 800ec9c:	1c74      	adds	r4, r6, #1
 800ec9e:	4622      	mov	r2, r4
 800eca0:	4616      	mov	r6, r2
 800eca2:	3201      	adds	r2, #1
 800eca4:	7830      	ldrb	r0, [r6, #0]
 800eca6:	f7ff ff9f 	bl	800ebe8 <__hexdig_fun>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d1f8      	bne.n	800eca0 <__gethex+0x8c>
 800ecae:	1ba4      	subs	r4, r4, r6
 800ecb0:	00a7      	lsls	r7, r4, #2
 800ecb2:	7833      	ldrb	r3, [r6, #0]
 800ecb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ecb8:	2b50      	cmp	r3, #80	@ 0x50
 800ecba:	d13e      	bne.n	800ed3a <__gethex+0x126>
 800ecbc:	7873      	ldrb	r3, [r6, #1]
 800ecbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800ecc0:	d033      	beq.n	800ed2a <__gethex+0x116>
 800ecc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ecc4:	d034      	beq.n	800ed30 <__gethex+0x11c>
 800ecc6:	1c71      	adds	r1, r6, #1
 800ecc8:	2400      	movs	r4, #0
 800ecca:	7808      	ldrb	r0, [r1, #0]
 800eccc:	f7ff ff8c 	bl	800ebe8 <__hexdig_fun>
 800ecd0:	1e43      	subs	r3, r0, #1
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	2b18      	cmp	r3, #24
 800ecd6:	d830      	bhi.n	800ed3a <__gethex+0x126>
 800ecd8:	f1a0 0210 	sub.w	r2, r0, #16
 800ecdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ece0:	f7ff ff82 	bl	800ebe8 <__hexdig_fun>
 800ece4:	f100 3cff 	add.w	ip, r0, #4294967295
 800ece8:	fa5f fc8c 	uxtb.w	ip, ip
 800ecec:	f1bc 0f18 	cmp.w	ip, #24
 800ecf0:	f04f 030a 	mov.w	r3, #10
 800ecf4:	d91e      	bls.n	800ed34 <__gethex+0x120>
 800ecf6:	b104      	cbz	r4, 800ecfa <__gethex+0xe6>
 800ecf8:	4252      	negs	r2, r2
 800ecfa:	4417      	add	r7, r2
 800ecfc:	f8ca 1000 	str.w	r1, [sl]
 800ed00:	b1ed      	cbz	r5, 800ed3e <__gethex+0x12a>
 800ed02:	f1bb 0f00 	cmp.w	fp, #0
 800ed06:	bf0c      	ite	eq
 800ed08:	2506      	moveq	r5, #6
 800ed0a:	2500      	movne	r5, #0
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	b005      	add	sp, #20
 800ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed14:	2500      	movs	r5, #0
 800ed16:	462c      	mov	r4, r5
 800ed18:	e7b0      	b.n	800ec7c <__gethex+0x68>
 800ed1a:	2c00      	cmp	r4, #0
 800ed1c:	d1c7      	bne.n	800ecae <__gethex+0x9a>
 800ed1e:	4627      	mov	r7, r4
 800ed20:	e7c7      	b.n	800ecb2 <__gethex+0x9e>
 800ed22:	464e      	mov	r6, r9
 800ed24:	462f      	mov	r7, r5
 800ed26:	2501      	movs	r5, #1
 800ed28:	e7c3      	b.n	800ecb2 <__gethex+0x9e>
 800ed2a:	2400      	movs	r4, #0
 800ed2c:	1cb1      	adds	r1, r6, #2
 800ed2e:	e7cc      	b.n	800ecca <__gethex+0xb6>
 800ed30:	2401      	movs	r4, #1
 800ed32:	e7fb      	b.n	800ed2c <__gethex+0x118>
 800ed34:	fb03 0002 	mla	r0, r3, r2, r0
 800ed38:	e7ce      	b.n	800ecd8 <__gethex+0xc4>
 800ed3a:	4631      	mov	r1, r6
 800ed3c:	e7de      	b.n	800ecfc <__gethex+0xe8>
 800ed3e:	eba6 0309 	sub.w	r3, r6, r9
 800ed42:	3b01      	subs	r3, #1
 800ed44:	4629      	mov	r1, r5
 800ed46:	2b07      	cmp	r3, #7
 800ed48:	dc0a      	bgt.n	800ed60 <__gethex+0x14c>
 800ed4a:	9801      	ldr	r0, [sp, #4]
 800ed4c:	f000 fb48 	bl	800f3e0 <_Balloc>
 800ed50:	4604      	mov	r4, r0
 800ed52:	b940      	cbnz	r0, 800ed66 <__gethex+0x152>
 800ed54:	4b5c      	ldr	r3, [pc, #368]	@ (800eec8 <__gethex+0x2b4>)
 800ed56:	4602      	mov	r2, r0
 800ed58:	21e4      	movs	r1, #228	@ 0xe4
 800ed5a:	485c      	ldr	r0, [pc, #368]	@ (800eecc <__gethex+0x2b8>)
 800ed5c:	f7ff f828 	bl	800ddb0 <__assert_func>
 800ed60:	3101      	adds	r1, #1
 800ed62:	105b      	asrs	r3, r3, #1
 800ed64:	e7ef      	b.n	800ed46 <__gethex+0x132>
 800ed66:	f100 0a14 	add.w	sl, r0, #20
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	4655      	mov	r5, sl
 800ed6e:	469b      	mov	fp, r3
 800ed70:	45b1      	cmp	r9, r6
 800ed72:	d337      	bcc.n	800ede4 <__gethex+0x1d0>
 800ed74:	f845 bb04 	str.w	fp, [r5], #4
 800ed78:	eba5 050a 	sub.w	r5, r5, sl
 800ed7c:	10ad      	asrs	r5, r5, #2
 800ed7e:	6125      	str	r5, [r4, #16]
 800ed80:	4658      	mov	r0, fp
 800ed82:	f000 fc1f 	bl	800f5c4 <__hi0bits>
 800ed86:	016d      	lsls	r5, r5, #5
 800ed88:	f8d8 6000 	ldr.w	r6, [r8]
 800ed8c:	1a2d      	subs	r5, r5, r0
 800ed8e:	42b5      	cmp	r5, r6
 800ed90:	dd54      	ble.n	800ee3c <__gethex+0x228>
 800ed92:	1bad      	subs	r5, r5, r6
 800ed94:	4629      	mov	r1, r5
 800ed96:	4620      	mov	r0, r4
 800ed98:	f000 ffab 	bl	800fcf2 <__any_on>
 800ed9c:	4681      	mov	r9, r0
 800ed9e:	b178      	cbz	r0, 800edc0 <__gethex+0x1ac>
 800eda0:	1e6b      	subs	r3, r5, #1
 800eda2:	1159      	asrs	r1, r3, #5
 800eda4:	f003 021f 	and.w	r2, r3, #31
 800eda8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800edac:	f04f 0901 	mov.w	r9, #1
 800edb0:	fa09 f202 	lsl.w	r2, r9, r2
 800edb4:	420a      	tst	r2, r1
 800edb6:	d003      	beq.n	800edc0 <__gethex+0x1ac>
 800edb8:	454b      	cmp	r3, r9
 800edba:	dc36      	bgt.n	800ee2a <__gethex+0x216>
 800edbc:	f04f 0902 	mov.w	r9, #2
 800edc0:	4629      	mov	r1, r5
 800edc2:	4620      	mov	r0, r4
 800edc4:	f7ff febe 	bl	800eb44 <rshift>
 800edc8:	442f      	add	r7, r5
 800edca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edce:	42bb      	cmp	r3, r7
 800edd0:	da42      	bge.n	800ee58 <__gethex+0x244>
 800edd2:	9801      	ldr	r0, [sp, #4]
 800edd4:	4621      	mov	r1, r4
 800edd6:	f000 fb43 	bl	800f460 <_Bfree>
 800edda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eddc:	2300      	movs	r3, #0
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	25a3      	movs	r5, #163	@ 0xa3
 800ede2:	e793      	b.n	800ed0c <__gethex+0xf8>
 800ede4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ede8:	2a2e      	cmp	r2, #46	@ 0x2e
 800edea:	d012      	beq.n	800ee12 <__gethex+0x1fe>
 800edec:	2b20      	cmp	r3, #32
 800edee:	d104      	bne.n	800edfa <__gethex+0x1e6>
 800edf0:	f845 bb04 	str.w	fp, [r5], #4
 800edf4:	f04f 0b00 	mov.w	fp, #0
 800edf8:	465b      	mov	r3, fp
 800edfa:	7830      	ldrb	r0, [r6, #0]
 800edfc:	9303      	str	r3, [sp, #12]
 800edfe:	f7ff fef3 	bl	800ebe8 <__hexdig_fun>
 800ee02:	9b03      	ldr	r3, [sp, #12]
 800ee04:	f000 000f 	and.w	r0, r0, #15
 800ee08:	4098      	lsls	r0, r3
 800ee0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ee0e:	3304      	adds	r3, #4
 800ee10:	e7ae      	b.n	800ed70 <__gethex+0x15c>
 800ee12:	45b1      	cmp	r9, r6
 800ee14:	d8ea      	bhi.n	800edec <__gethex+0x1d8>
 800ee16:	492b      	ldr	r1, [pc, #172]	@ (800eec4 <__gethex+0x2b0>)
 800ee18:	9303      	str	r3, [sp, #12]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7fd ffdf 	bl	800cde0 <strncmp>
 800ee22:	9b03      	ldr	r3, [sp, #12]
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d1e1      	bne.n	800edec <__gethex+0x1d8>
 800ee28:	e7a2      	b.n	800ed70 <__gethex+0x15c>
 800ee2a:	1ea9      	subs	r1, r5, #2
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f000 ff60 	bl	800fcf2 <__any_on>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d0c2      	beq.n	800edbc <__gethex+0x1a8>
 800ee36:	f04f 0903 	mov.w	r9, #3
 800ee3a:	e7c1      	b.n	800edc0 <__gethex+0x1ac>
 800ee3c:	da09      	bge.n	800ee52 <__gethex+0x23e>
 800ee3e:	1b75      	subs	r5, r6, r5
 800ee40:	4621      	mov	r1, r4
 800ee42:	9801      	ldr	r0, [sp, #4]
 800ee44:	462a      	mov	r2, r5
 800ee46:	f000 fd1b 	bl	800f880 <__lshift>
 800ee4a:	1b7f      	subs	r7, r7, r5
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	f100 0a14 	add.w	sl, r0, #20
 800ee52:	f04f 0900 	mov.w	r9, #0
 800ee56:	e7b8      	b.n	800edca <__gethex+0x1b6>
 800ee58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee5c:	42bd      	cmp	r5, r7
 800ee5e:	dd6f      	ble.n	800ef40 <__gethex+0x32c>
 800ee60:	1bed      	subs	r5, r5, r7
 800ee62:	42ae      	cmp	r6, r5
 800ee64:	dc34      	bgt.n	800eed0 <__gethex+0x2bc>
 800ee66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee6a:	2b02      	cmp	r3, #2
 800ee6c:	d022      	beq.n	800eeb4 <__gethex+0x2a0>
 800ee6e:	2b03      	cmp	r3, #3
 800ee70:	d024      	beq.n	800eebc <__gethex+0x2a8>
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d115      	bne.n	800eea2 <__gethex+0x28e>
 800ee76:	42ae      	cmp	r6, r5
 800ee78:	d113      	bne.n	800eea2 <__gethex+0x28e>
 800ee7a:	2e01      	cmp	r6, #1
 800ee7c:	d10b      	bne.n	800ee96 <__gethex+0x282>
 800ee7e:	9a02      	ldr	r2, [sp, #8]
 800ee80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee84:	6013      	str	r3, [r2, #0]
 800ee86:	2301      	movs	r3, #1
 800ee88:	6123      	str	r3, [r4, #16]
 800ee8a:	f8ca 3000 	str.w	r3, [sl]
 800ee8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee90:	2562      	movs	r5, #98	@ 0x62
 800ee92:	601c      	str	r4, [r3, #0]
 800ee94:	e73a      	b.n	800ed0c <__gethex+0xf8>
 800ee96:	1e71      	subs	r1, r6, #1
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f000 ff2a 	bl	800fcf2 <__any_on>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d1ed      	bne.n	800ee7e <__gethex+0x26a>
 800eea2:	9801      	ldr	r0, [sp, #4]
 800eea4:	4621      	mov	r1, r4
 800eea6:	f000 fadb 	bl	800f460 <_Bfree>
 800eeaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeac:	2300      	movs	r3, #0
 800eeae:	6013      	str	r3, [r2, #0]
 800eeb0:	2550      	movs	r5, #80	@ 0x50
 800eeb2:	e72b      	b.n	800ed0c <__gethex+0xf8>
 800eeb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1f3      	bne.n	800eea2 <__gethex+0x28e>
 800eeba:	e7e0      	b.n	800ee7e <__gethex+0x26a>
 800eebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1dd      	bne.n	800ee7e <__gethex+0x26a>
 800eec2:	e7ee      	b.n	800eea2 <__gethex+0x28e>
 800eec4:	08011ab8 	.word	0x08011ab8
 800eec8:	08011cad 	.word	0x08011cad
 800eecc:	08011cbe 	.word	0x08011cbe
 800eed0:	1e6f      	subs	r7, r5, #1
 800eed2:	f1b9 0f00 	cmp.w	r9, #0
 800eed6:	d130      	bne.n	800ef3a <__gethex+0x326>
 800eed8:	b127      	cbz	r7, 800eee4 <__gethex+0x2d0>
 800eeda:	4639      	mov	r1, r7
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 ff08 	bl	800fcf2 <__any_on>
 800eee2:	4681      	mov	r9, r0
 800eee4:	117a      	asrs	r2, r7, #5
 800eee6:	2301      	movs	r3, #1
 800eee8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eeec:	f007 071f 	and.w	r7, r7, #31
 800eef0:	40bb      	lsls	r3, r7
 800eef2:	4213      	tst	r3, r2
 800eef4:	4629      	mov	r1, r5
 800eef6:	4620      	mov	r0, r4
 800eef8:	bf18      	it	ne
 800eefa:	f049 0902 	orrne.w	r9, r9, #2
 800eefe:	f7ff fe21 	bl	800eb44 <rshift>
 800ef02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ef06:	1b76      	subs	r6, r6, r5
 800ef08:	2502      	movs	r5, #2
 800ef0a:	f1b9 0f00 	cmp.w	r9, #0
 800ef0e:	d047      	beq.n	800efa0 <__gethex+0x38c>
 800ef10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	d015      	beq.n	800ef44 <__gethex+0x330>
 800ef18:	2b03      	cmp	r3, #3
 800ef1a:	d017      	beq.n	800ef4c <__gethex+0x338>
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d109      	bne.n	800ef34 <__gethex+0x320>
 800ef20:	f019 0f02 	tst.w	r9, #2
 800ef24:	d006      	beq.n	800ef34 <__gethex+0x320>
 800ef26:	f8da 3000 	ldr.w	r3, [sl]
 800ef2a:	ea49 0903 	orr.w	r9, r9, r3
 800ef2e:	f019 0f01 	tst.w	r9, #1
 800ef32:	d10e      	bne.n	800ef52 <__gethex+0x33e>
 800ef34:	f045 0510 	orr.w	r5, r5, #16
 800ef38:	e032      	b.n	800efa0 <__gethex+0x38c>
 800ef3a:	f04f 0901 	mov.w	r9, #1
 800ef3e:	e7d1      	b.n	800eee4 <__gethex+0x2d0>
 800ef40:	2501      	movs	r5, #1
 800ef42:	e7e2      	b.n	800ef0a <__gethex+0x2f6>
 800ef44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef46:	f1c3 0301 	rsb	r3, r3, #1
 800ef4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d0f0      	beq.n	800ef34 <__gethex+0x320>
 800ef52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ef56:	f104 0314 	add.w	r3, r4, #20
 800ef5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ef5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ef62:	f04f 0c00 	mov.w	ip, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef70:	d01b      	beq.n	800efaa <__gethex+0x396>
 800ef72:	3201      	adds	r2, #1
 800ef74:	6002      	str	r2, [r0, #0]
 800ef76:	2d02      	cmp	r5, #2
 800ef78:	f104 0314 	add.w	r3, r4, #20
 800ef7c:	d13c      	bne.n	800eff8 <__gethex+0x3e4>
 800ef7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ef82:	3a01      	subs	r2, #1
 800ef84:	42b2      	cmp	r2, r6
 800ef86:	d109      	bne.n	800ef9c <__gethex+0x388>
 800ef88:	1171      	asrs	r1, r6, #5
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef90:	f006 061f 	and.w	r6, r6, #31
 800ef94:	fa02 f606 	lsl.w	r6, r2, r6
 800ef98:	421e      	tst	r6, r3
 800ef9a:	d13a      	bne.n	800f012 <__gethex+0x3fe>
 800ef9c:	f045 0520 	orr.w	r5, r5, #32
 800efa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efa2:	601c      	str	r4, [r3, #0]
 800efa4:	9b02      	ldr	r3, [sp, #8]
 800efa6:	601f      	str	r7, [r3, #0]
 800efa8:	e6b0      	b.n	800ed0c <__gethex+0xf8>
 800efaa:	4299      	cmp	r1, r3
 800efac:	f843 cc04 	str.w	ip, [r3, #-4]
 800efb0:	d8d9      	bhi.n	800ef66 <__gethex+0x352>
 800efb2:	68a3      	ldr	r3, [r4, #8]
 800efb4:	459b      	cmp	fp, r3
 800efb6:	db17      	blt.n	800efe8 <__gethex+0x3d4>
 800efb8:	6861      	ldr	r1, [r4, #4]
 800efba:	9801      	ldr	r0, [sp, #4]
 800efbc:	3101      	adds	r1, #1
 800efbe:	f000 fa0f 	bl	800f3e0 <_Balloc>
 800efc2:	4681      	mov	r9, r0
 800efc4:	b918      	cbnz	r0, 800efce <__gethex+0x3ba>
 800efc6:	4b1a      	ldr	r3, [pc, #104]	@ (800f030 <__gethex+0x41c>)
 800efc8:	4602      	mov	r2, r0
 800efca:	2184      	movs	r1, #132	@ 0x84
 800efcc:	e6c5      	b.n	800ed5a <__gethex+0x146>
 800efce:	6922      	ldr	r2, [r4, #16]
 800efd0:	3202      	adds	r2, #2
 800efd2:	f104 010c 	add.w	r1, r4, #12
 800efd6:	0092      	lsls	r2, r2, #2
 800efd8:	300c      	adds	r0, #12
 800efda:	f7fe fed2 	bl	800dd82 <memcpy>
 800efde:	4621      	mov	r1, r4
 800efe0:	9801      	ldr	r0, [sp, #4]
 800efe2:	f000 fa3d 	bl	800f460 <_Bfree>
 800efe6:	464c      	mov	r4, r9
 800efe8:	6923      	ldr	r3, [r4, #16]
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eff0:	6122      	str	r2, [r4, #16]
 800eff2:	2201      	movs	r2, #1
 800eff4:	615a      	str	r2, [r3, #20]
 800eff6:	e7be      	b.n	800ef76 <__gethex+0x362>
 800eff8:	6922      	ldr	r2, [r4, #16]
 800effa:	455a      	cmp	r2, fp
 800effc:	dd0b      	ble.n	800f016 <__gethex+0x402>
 800effe:	2101      	movs	r1, #1
 800f000:	4620      	mov	r0, r4
 800f002:	f7ff fd9f 	bl	800eb44 <rshift>
 800f006:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f00a:	3701      	adds	r7, #1
 800f00c:	42bb      	cmp	r3, r7
 800f00e:	f6ff aee0 	blt.w	800edd2 <__gethex+0x1be>
 800f012:	2501      	movs	r5, #1
 800f014:	e7c2      	b.n	800ef9c <__gethex+0x388>
 800f016:	f016 061f 	ands.w	r6, r6, #31
 800f01a:	d0fa      	beq.n	800f012 <__gethex+0x3fe>
 800f01c:	4453      	add	r3, sl
 800f01e:	f1c6 0620 	rsb	r6, r6, #32
 800f022:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f026:	f000 facd 	bl	800f5c4 <__hi0bits>
 800f02a:	42b0      	cmp	r0, r6
 800f02c:	dbe7      	blt.n	800effe <__gethex+0x3ea>
 800f02e:	e7f0      	b.n	800f012 <__gethex+0x3fe>
 800f030:	08011cad 	.word	0x08011cad

0800f034 <L_shift>:
 800f034:	f1c2 0208 	rsb	r2, r2, #8
 800f038:	0092      	lsls	r2, r2, #2
 800f03a:	b570      	push	{r4, r5, r6, lr}
 800f03c:	f1c2 0620 	rsb	r6, r2, #32
 800f040:	6843      	ldr	r3, [r0, #4]
 800f042:	6804      	ldr	r4, [r0, #0]
 800f044:	fa03 f506 	lsl.w	r5, r3, r6
 800f048:	432c      	orrs	r4, r5
 800f04a:	40d3      	lsrs	r3, r2
 800f04c:	6004      	str	r4, [r0, #0]
 800f04e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f052:	4288      	cmp	r0, r1
 800f054:	d3f4      	bcc.n	800f040 <L_shift+0xc>
 800f056:	bd70      	pop	{r4, r5, r6, pc}

0800f058 <__match>:
 800f058:	b530      	push	{r4, r5, lr}
 800f05a:	6803      	ldr	r3, [r0, #0]
 800f05c:	3301      	adds	r3, #1
 800f05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f062:	b914      	cbnz	r4, 800f06a <__match+0x12>
 800f064:	6003      	str	r3, [r0, #0]
 800f066:	2001      	movs	r0, #1
 800f068:	bd30      	pop	{r4, r5, pc}
 800f06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f06e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f072:	2d19      	cmp	r5, #25
 800f074:	bf98      	it	ls
 800f076:	3220      	addls	r2, #32
 800f078:	42a2      	cmp	r2, r4
 800f07a:	d0f0      	beq.n	800f05e <__match+0x6>
 800f07c:	2000      	movs	r0, #0
 800f07e:	e7f3      	b.n	800f068 <__match+0x10>

0800f080 <__hexnan>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	680b      	ldr	r3, [r1, #0]
 800f086:	6801      	ldr	r1, [r0, #0]
 800f088:	115e      	asrs	r6, r3, #5
 800f08a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f08e:	f013 031f 	ands.w	r3, r3, #31
 800f092:	b087      	sub	sp, #28
 800f094:	bf18      	it	ne
 800f096:	3604      	addne	r6, #4
 800f098:	2500      	movs	r5, #0
 800f09a:	1f37      	subs	r7, r6, #4
 800f09c:	4682      	mov	sl, r0
 800f09e:	4690      	mov	r8, r2
 800f0a0:	9301      	str	r3, [sp, #4]
 800f0a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f0a6:	46b9      	mov	r9, r7
 800f0a8:	463c      	mov	r4, r7
 800f0aa:	9502      	str	r5, [sp, #8]
 800f0ac:	46ab      	mov	fp, r5
 800f0ae:	784a      	ldrb	r2, [r1, #1]
 800f0b0:	1c4b      	adds	r3, r1, #1
 800f0b2:	9303      	str	r3, [sp, #12]
 800f0b4:	b342      	cbz	r2, 800f108 <__hexnan+0x88>
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	9105      	str	r1, [sp, #20]
 800f0ba:	9204      	str	r2, [sp, #16]
 800f0bc:	f7ff fd94 	bl	800ebe8 <__hexdig_fun>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d151      	bne.n	800f168 <__hexnan+0xe8>
 800f0c4:	9a04      	ldr	r2, [sp, #16]
 800f0c6:	9905      	ldr	r1, [sp, #20]
 800f0c8:	2a20      	cmp	r2, #32
 800f0ca:	d818      	bhi.n	800f0fe <__hexnan+0x7e>
 800f0cc:	9b02      	ldr	r3, [sp, #8]
 800f0ce:	459b      	cmp	fp, r3
 800f0d0:	dd13      	ble.n	800f0fa <__hexnan+0x7a>
 800f0d2:	454c      	cmp	r4, r9
 800f0d4:	d206      	bcs.n	800f0e4 <__hexnan+0x64>
 800f0d6:	2d07      	cmp	r5, #7
 800f0d8:	dc04      	bgt.n	800f0e4 <__hexnan+0x64>
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4649      	mov	r1, r9
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f7ff ffa8 	bl	800f034 <L_shift>
 800f0e4:	4544      	cmp	r4, r8
 800f0e6:	d952      	bls.n	800f18e <__hexnan+0x10e>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f1a4 0904 	sub.w	r9, r4, #4
 800f0ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0f2:	f8cd b008 	str.w	fp, [sp, #8]
 800f0f6:	464c      	mov	r4, r9
 800f0f8:	461d      	mov	r5, r3
 800f0fa:	9903      	ldr	r1, [sp, #12]
 800f0fc:	e7d7      	b.n	800f0ae <__hexnan+0x2e>
 800f0fe:	2a29      	cmp	r2, #41	@ 0x29
 800f100:	d157      	bne.n	800f1b2 <__hexnan+0x132>
 800f102:	3102      	adds	r1, #2
 800f104:	f8ca 1000 	str.w	r1, [sl]
 800f108:	f1bb 0f00 	cmp.w	fp, #0
 800f10c:	d051      	beq.n	800f1b2 <__hexnan+0x132>
 800f10e:	454c      	cmp	r4, r9
 800f110:	d206      	bcs.n	800f120 <__hexnan+0xa0>
 800f112:	2d07      	cmp	r5, #7
 800f114:	dc04      	bgt.n	800f120 <__hexnan+0xa0>
 800f116:	462a      	mov	r2, r5
 800f118:	4649      	mov	r1, r9
 800f11a:	4620      	mov	r0, r4
 800f11c:	f7ff ff8a 	bl	800f034 <L_shift>
 800f120:	4544      	cmp	r4, r8
 800f122:	d936      	bls.n	800f192 <__hexnan+0x112>
 800f124:	f1a8 0204 	sub.w	r2, r8, #4
 800f128:	4623      	mov	r3, r4
 800f12a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f12e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f132:	429f      	cmp	r7, r3
 800f134:	d2f9      	bcs.n	800f12a <__hexnan+0xaa>
 800f136:	1b3b      	subs	r3, r7, r4
 800f138:	f023 0303 	bic.w	r3, r3, #3
 800f13c:	3304      	adds	r3, #4
 800f13e:	3401      	adds	r4, #1
 800f140:	3e03      	subs	r6, #3
 800f142:	42b4      	cmp	r4, r6
 800f144:	bf88      	it	hi
 800f146:	2304      	movhi	r3, #4
 800f148:	4443      	add	r3, r8
 800f14a:	2200      	movs	r2, #0
 800f14c:	f843 2b04 	str.w	r2, [r3], #4
 800f150:	429f      	cmp	r7, r3
 800f152:	d2fb      	bcs.n	800f14c <__hexnan+0xcc>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	b91b      	cbnz	r3, 800f160 <__hexnan+0xe0>
 800f158:	4547      	cmp	r7, r8
 800f15a:	d128      	bne.n	800f1ae <__hexnan+0x12e>
 800f15c:	2301      	movs	r3, #1
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	2005      	movs	r0, #5
 800f162:	b007      	add	sp, #28
 800f164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f168:	3501      	adds	r5, #1
 800f16a:	2d08      	cmp	r5, #8
 800f16c:	f10b 0b01 	add.w	fp, fp, #1
 800f170:	dd06      	ble.n	800f180 <__hexnan+0x100>
 800f172:	4544      	cmp	r4, r8
 800f174:	d9c1      	bls.n	800f0fa <__hexnan+0x7a>
 800f176:	2300      	movs	r3, #0
 800f178:	f844 3c04 	str.w	r3, [r4, #-4]
 800f17c:	2501      	movs	r5, #1
 800f17e:	3c04      	subs	r4, #4
 800f180:	6822      	ldr	r2, [r4, #0]
 800f182:	f000 000f 	and.w	r0, r0, #15
 800f186:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f18a:	6020      	str	r0, [r4, #0]
 800f18c:	e7b5      	b.n	800f0fa <__hexnan+0x7a>
 800f18e:	2508      	movs	r5, #8
 800f190:	e7b3      	b.n	800f0fa <__hexnan+0x7a>
 800f192:	9b01      	ldr	r3, [sp, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d0dd      	beq.n	800f154 <__hexnan+0xd4>
 800f198:	f1c3 0320 	rsb	r3, r3, #32
 800f19c:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a0:	40da      	lsrs	r2, r3
 800f1a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f1a6:	4013      	ands	r3, r2
 800f1a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f1ac:	e7d2      	b.n	800f154 <__hexnan+0xd4>
 800f1ae:	3f04      	subs	r7, #4
 800f1b0:	e7d0      	b.n	800f154 <__hexnan+0xd4>
 800f1b2:	2004      	movs	r0, #4
 800f1b4:	e7d5      	b.n	800f162 <__hexnan+0xe2>
	...

0800f1b8 <_findenv_r>:
 800f1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800f22c <_findenv_r+0x74>
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	4689      	mov	r9, r1
 800f1c4:	4617      	mov	r7, r2
 800f1c6:	f001 fefb 	bl	8010fc0 <__env_lock>
 800f1ca:	f8da 4000 	ldr.w	r4, [sl]
 800f1ce:	b134      	cbz	r4, 800f1de <_findenv_r+0x26>
 800f1d0:	464b      	mov	r3, r9
 800f1d2:	4698      	mov	r8, r3
 800f1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1d8:	b13a      	cbz	r2, 800f1ea <_findenv_r+0x32>
 800f1da:	2a3d      	cmp	r2, #61	@ 0x3d
 800f1dc:	d1f9      	bne.n	800f1d2 <_findenv_r+0x1a>
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f001 fef4 	bl	8010fcc <__env_unlock>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ea:	eba8 0809 	sub.w	r8, r8, r9
 800f1ee:	46a3      	mov	fp, r4
 800f1f0:	f854 0b04 	ldr.w	r0, [r4], #4
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d0f2      	beq.n	800f1de <_findenv_r+0x26>
 800f1f8:	4642      	mov	r2, r8
 800f1fa:	4649      	mov	r1, r9
 800f1fc:	f7fd fdf0 	bl	800cde0 <strncmp>
 800f200:	2800      	cmp	r0, #0
 800f202:	d1f4      	bne.n	800f1ee <_findenv_r+0x36>
 800f204:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f208:	eb03 0508 	add.w	r5, r3, r8
 800f20c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f210:	2b3d      	cmp	r3, #61	@ 0x3d
 800f212:	d1ec      	bne.n	800f1ee <_findenv_r+0x36>
 800f214:	f8da 3000 	ldr.w	r3, [sl]
 800f218:	ebab 0303 	sub.w	r3, fp, r3
 800f21c:	109b      	asrs	r3, r3, #2
 800f21e:	4630      	mov	r0, r6
 800f220:	603b      	str	r3, [r7, #0]
 800f222:	f001 fed3 	bl	8010fcc <__env_unlock>
 800f226:	1c68      	adds	r0, r5, #1
 800f228:	e7dd      	b.n	800f1e6 <_findenv_r+0x2e>
 800f22a:	bf00      	nop
 800f22c:	20000010 	.word	0x20000010

0800f230 <_getenv_r>:
 800f230:	b507      	push	{r0, r1, r2, lr}
 800f232:	aa01      	add	r2, sp, #4
 800f234:	f7ff ffc0 	bl	800f1b8 <_findenv_r>
 800f238:	b003      	add	sp, #12
 800f23a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f240 <malloc>:
 800f240:	4b02      	ldr	r3, [pc, #8]	@ (800f24c <malloc+0xc>)
 800f242:	4601      	mov	r1, r0
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	f000 b82d 	b.w	800f2a4 <_malloc_r>
 800f24a:	bf00      	nop
 800f24c:	200001a4 	.word	0x200001a4

0800f250 <free>:
 800f250:	4b02      	ldr	r3, [pc, #8]	@ (800f25c <free+0xc>)
 800f252:	4601      	mov	r1, r0
 800f254:	6818      	ldr	r0, [r3, #0]
 800f256:	f7ff bc2b 	b.w	800eab0 <_free_r>
 800f25a:	bf00      	nop
 800f25c:	200001a4 	.word	0x200001a4

0800f260 <sbrk_aligned>:
 800f260:	b570      	push	{r4, r5, r6, lr}
 800f262:	4e0f      	ldr	r6, [pc, #60]	@ (800f2a0 <sbrk_aligned+0x40>)
 800f264:	460c      	mov	r4, r1
 800f266:	6831      	ldr	r1, [r6, #0]
 800f268:	4605      	mov	r5, r0
 800f26a:	b911      	cbnz	r1, 800f272 <sbrk_aligned+0x12>
 800f26c:	f001 fe7c 	bl	8010f68 <_sbrk_r>
 800f270:	6030      	str	r0, [r6, #0]
 800f272:	4621      	mov	r1, r4
 800f274:	4628      	mov	r0, r5
 800f276:	f001 fe77 	bl	8010f68 <_sbrk_r>
 800f27a:	1c43      	adds	r3, r0, #1
 800f27c:	d103      	bne.n	800f286 <sbrk_aligned+0x26>
 800f27e:	f04f 34ff 	mov.w	r4, #4294967295
 800f282:	4620      	mov	r0, r4
 800f284:	bd70      	pop	{r4, r5, r6, pc}
 800f286:	1cc4      	adds	r4, r0, #3
 800f288:	f024 0403 	bic.w	r4, r4, #3
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	d0f8      	beq.n	800f282 <sbrk_aligned+0x22>
 800f290:	1a21      	subs	r1, r4, r0
 800f292:	4628      	mov	r0, r5
 800f294:	f001 fe68 	bl	8010f68 <_sbrk_r>
 800f298:	3001      	adds	r0, #1
 800f29a:	d1f2      	bne.n	800f282 <sbrk_aligned+0x22>
 800f29c:	e7ef      	b.n	800f27e <sbrk_aligned+0x1e>
 800f29e:	bf00      	nop
 800f2a0:	20006f08 	.word	0x20006f08

0800f2a4 <_malloc_r>:
 800f2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a8:	1ccd      	adds	r5, r1, #3
 800f2aa:	f025 0503 	bic.w	r5, r5, #3
 800f2ae:	3508      	adds	r5, #8
 800f2b0:	2d0c      	cmp	r5, #12
 800f2b2:	bf38      	it	cc
 800f2b4:	250c      	movcc	r5, #12
 800f2b6:	2d00      	cmp	r5, #0
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	db01      	blt.n	800f2c0 <_malloc_r+0x1c>
 800f2bc:	42a9      	cmp	r1, r5
 800f2be:	d904      	bls.n	800f2ca <_malloc_r+0x26>
 800f2c0:	230c      	movs	r3, #12
 800f2c2:	6033      	str	r3, [r6, #0]
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f3a0 <_malloc_r+0xfc>
 800f2ce:	f000 f87b 	bl	800f3c8 <__malloc_lock>
 800f2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800f2d6:	461c      	mov	r4, r3
 800f2d8:	bb44      	cbnz	r4, 800f32c <_malloc_r+0x88>
 800f2da:	4629      	mov	r1, r5
 800f2dc:	4630      	mov	r0, r6
 800f2de:	f7ff ffbf 	bl	800f260 <sbrk_aligned>
 800f2e2:	1c43      	adds	r3, r0, #1
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	d158      	bne.n	800f39a <_malloc_r+0xf6>
 800f2e8:	f8d8 4000 	ldr.w	r4, [r8]
 800f2ec:	4627      	mov	r7, r4
 800f2ee:	2f00      	cmp	r7, #0
 800f2f0:	d143      	bne.n	800f37a <_malloc_r+0xd6>
 800f2f2:	2c00      	cmp	r4, #0
 800f2f4:	d04b      	beq.n	800f38e <_malloc_r+0xea>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	4639      	mov	r1, r7
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	eb04 0903 	add.w	r9, r4, r3
 800f300:	f001 fe32 	bl	8010f68 <_sbrk_r>
 800f304:	4581      	cmp	r9, r0
 800f306:	d142      	bne.n	800f38e <_malloc_r+0xea>
 800f308:	6821      	ldr	r1, [r4, #0]
 800f30a:	1a6d      	subs	r5, r5, r1
 800f30c:	4629      	mov	r1, r5
 800f30e:	4630      	mov	r0, r6
 800f310:	f7ff ffa6 	bl	800f260 <sbrk_aligned>
 800f314:	3001      	adds	r0, #1
 800f316:	d03a      	beq.n	800f38e <_malloc_r+0xea>
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	442b      	add	r3, r5
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	f8d8 3000 	ldr.w	r3, [r8]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	bb62      	cbnz	r2, 800f380 <_malloc_r+0xdc>
 800f326:	f8c8 7000 	str.w	r7, [r8]
 800f32a:	e00f      	b.n	800f34c <_malloc_r+0xa8>
 800f32c:	6822      	ldr	r2, [r4, #0]
 800f32e:	1b52      	subs	r2, r2, r5
 800f330:	d420      	bmi.n	800f374 <_malloc_r+0xd0>
 800f332:	2a0b      	cmp	r2, #11
 800f334:	d917      	bls.n	800f366 <_malloc_r+0xc2>
 800f336:	1961      	adds	r1, r4, r5
 800f338:	42a3      	cmp	r3, r4
 800f33a:	6025      	str	r5, [r4, #0]
 800f33c:	bf18      	it	ne
 800f33e:	6059      	strne	r1, [r3, #4]
 800f340:	6863      	ldr	r3, [r4, #4]
 800f342:	bf08      	it	eq
 800f344:	f8c8 1000 	streq.w	r1, [r8]
 800f348:	5162      	str	r2, [r4, r5]
 800f34a:	604b      	str	r3, [r1, #4]
 800f34c:	4630      	mov	r0, r6
 800f34e:	f000 f841 	bl	800f3d4 <__malloc_unlock>
 800f352:	f104 000b 	add.w	r0, r4, #11
 800f356:	1d23      	adds	r3, r4, #4
 800f358:	f020 0007 	bic.w	r0, r0, #7
 800f35c:	1ac2      	subs	r2, r0, r3
 800f35e:	bf1c      	itt	ne
 800f360:	1a1b      	subne	r3, r3, r0
 800f362:	50a3      	strne	r3, [r4, r2]
 800f364:	e7af      	b.n	800f2c6 <_malloc_r+0x22>
 800f366:	6862      	ldr	r2, [r4, #4]
 800f368:	42a3      	cmp	r3, r4
 800f36a:	bf0c      	ite	eq
 800f36c:	f8c8 2000 	streq.w	r2, [r8]
 800f370:	605a      	strne	r2, [r3, #4]
 800f372:	e7eb      	b.n	800f34c <_malloc_r+0xa8>
 800f374:	4623      	mov	r3, r4
 800f376:	6864      	ldr	r4, [r4, #4]
 800f378:	e7ae      	b.n	800f2d8 <_malloc_r+0x34>
 800f37a:	463c      	mov	r4, r7
 800f37c:	687f      	ldr	r7, [r7, #4]
 800f37e:	e7b6      	b.n	800f2ee <_malloc_r+0x4a>
 800f380:	461a      	mov	r2, r3
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	42a3      	cmp	r3, r4
 800f386:	d1fb      	bne.n	800f380 <_malloc_r+0xdc>
 800f388:	2300      	movs	r3, #0
 800f38a:	6053      	str	r3, [r2, #4]
 800f38c:	e7de      	b.n	800f34c <_malloc_r+0xa8>
 800f38e:	230c      	movs	r3, #12
 800f390:	6033      	str	r3, [r6, #0]
 800f392:	4630      	mov	r0, r6
 800f394:	f000 f81e 	bl	800f3d4 <__malloc_unlock>
 800f398:	e794      	b.n	800f2c4 <_malloc_r+0x20>
 800f39a:	6005      	str	r5, [r0, #0]
 800f39c:	e7d6      	b.n	800f34c <_malloc_r+0xa8>
 800f39e:	bf00      	nop
 800f3a0:	20006f0c 	.word	0x20006f0c

0800f3a4 <__ascii_mbtowc>:
 800f3a4:	b082      	sub	sp, #8
 800f3a6:	b901      	cbnz	r1, 800f3aa <__ascii_mbtowc+0x6>
 800f3a8:	a901      	add	r1, sp, #4
 800f3aa:	b142      	cbz	r2, 800f3be <__ascii_mbtowc+0x1a>
 800f3ac:	b14b      	cbz	r3, 800f3c2 <__ascii_mbtowc+0x1e>
 800f3ae:	7813      	ldrb	r3, [r2, #0]
 800f3b0:	600b      	str	r3, [r1, #0]
 800f3b2:	7812      	ldrb	r2, [r2, #0]
 800f3b4:	1e10      	subs	r0, r2, #0
 800f3b6:	bf18      	it	ne
 800f3b8:	2001      	movne	r0, #1
 800f3ba:	b002      	add	sp, #8
 800f3bc:	4770      	bx	lr
 800f3be:	4610      	mov	r0, r2
 800f3c0:	e7fb      	b.n	800f3ba <__ascii_mbtowc+0x16>
 800f3c2:	f06f 0001 	mvn.w	r0, #1
 800f3c6:	e7f8      	b.n	800f3ba <__ascii_mbtowc+0x16>

0800f3c8 <__malloc_lock>:
 800f3c8:	4801      	ldr	r0, [pc, #4]	@ (800f3d0 <__malloc_lock+0x8>)
 800f3ca:	f7fe bccf 	b.w	800dd6c <__retarget_lock_acquire_recursive>
 800f3ce:	bf00      	nop
 800f3d0:	20006f06 	.word	0x20006f06

0800f3d4 <__malloc_unlock>:
 800f3d4:	4801      	ldr	r0, [pc, #4]	@ (800f3dc <__malloc_unlock+0x8>)
 800f3d6:	f7fe bccb 	b.w	800dd70 <__retarget_lock_release_recursive>
 800f3da:	bf00      	nop
 800f3dc:	20006f06 	.word	0x20006f06

0800f3e0 <_Balloc>:
 800f3e0:	b570      	push	{r4, r5, r6, lr}
 800f3e2:	69c6      	ldr	r6, [r0, #28]
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	460d      	mov	r5, r1
 800f3e8:	b976      	cbnz	r6, 800f408 <_Balloc+0x28>
 800f3ea:	2010      	movs	r0, #16
 800f3ec:	f7ff ff28 	bl	800f240 <malloc>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	61e0      	str	r0, [r4, #28]
 800f3f4:	b920      	cbnz	r0, 800f400 <_Balloc+0x20>
 800f3f6:	4b18      	ldr	r3, [pc, #96]	@ (800f458 <_Balloc+0x78>)
 800f3f8:	4818      	ldr	r0, [pc, #96]	@ (800f45c <_Balloc+0x7c>)
 800f3fa:	216b      	movs	r1, #107	@ 0x6b
 800f3fc:	f7fe fcd8 	bl	800ddb0 <__assert_func>
 800f400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f404:	6006      	str	r6, [r0, #0]
 800f406:	60c6      	str	r6, [r0, #12]
 800f408:	69e6      	ldr	r6, [r4, #28]
 800f40a:	68f3      	ldr	r3, [r6, #12]
 800f40c:	b183      	cbz	r3, 800f430 <_Balloc+0x50>
 800f40e:	69e3      	ldr	r3, [r4, #28]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f416:	b9b8      	cbnz	r0, 800f448 <_Balloc+0x68>
 800f418:	2101      	movs	r1, #1
 800f41a:	fa01 f605 	lsl.w	r6, r1, r5
 800f41e:	1d72      	adds	r2, r6, #5
 800f420:	0092      	lsls	r2, r2, #2
 800f422:	4620      	mov	r0, r4
 800f424:	f001 fdb7 	bl	8010f96 <_calloc_r>
 800f428:	b160      	cbz	r0, 800f444 <_Balloc+0x64>
 800f42a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f42e:	e00e      	b.n	800f44e <_Balloc+0x6e>
 800f430:	2221      	movs	r2, #33	@ 0x21
 800f432:	2104      	movs	r1, #4
 800f434:	4620      	mov	r0, r4
 800f436:	f001 fdae 	bl	8010f96 <_calloc_r>
 800f43a:	69e3      	ldr	r3, [r4, #28]
 800f43c:	60f0      	str	r0, [r6, #12]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1e4      	bne.n	800f40e <_Balloc+0x2e>
 800f444:	2000      	movs	r0, #0
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	6802      	ldr	r2, [r0, #0]
 800f44a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f44e:	2300      	movs	r3, #0
 800f450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f454:	e7f7      	b.n	800f446 <_Balloc+0x66>
 800f456:	bf00      	nop
 800f458:	08011aec 	.word	0x08011aec
 800f45c:	08011d1e 	.word	0x08011d1e

0800f460 <_Bfree>:
 800f460:	b570      	push	{r4, r5, r6, lr}
 800f462:	69c6      	ldr	r6, [r0, #28]
 800f464:	4605      	mov	r5, r0
 800f466:	460c      	mov	r4, r1
 800f468:	b976      	cbnz	r6, 800f488 <_Bfree+0x28>
 800f46a:	2010      	movs	r0, #16
 800f46c:	f7ff fee8 	bl	800f240 <malloc>
 800f470:	4602      	mov	r2, r0
 800f472:	61e8      	str	r0, [r5, #28]
 800f474:	b920      	cbnz	r0, 800f480 <_Bfree+0x20>
 800f476:	4b09      	ldr	r3, [pc, #36]	@ (800f49c <_Bfree+0x3c>)
 800f478:	4809      	ldr	r0, [pc, #36]	@ (800f4a0 <_Bfree+0x40>)
 800f47a:	218f      	movs	r1, #143	@ 0x8f
 800f47c:	f7fe fc98 	bl	800ddb0 <__assert_func>
 800f480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f484:	6006      	str	r6, [r0, #0]
 800f486:	60c6      	str	r6, [r0, #12]
 800f488:	b13c      	cbz	r4, 800f49a <_Bfree+0x3a>
 800f48a:	69eb      	ldr	r3, [r5, #28]
 800f48c:	6862      	ldr	r2, [r4, #4]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f494:	6021      	str	r1, [r4, #0]
 800f496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f49a:	bd70      	pop	{r4, r5, r6, pc}
 800f49c:	08011aec 	.word	0x08011aec
 800f4a0:	08011d1e 	.word	0x08011d1e

0800f4a4 <__multadd>:
 800f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a8:	690d      	ldr	r5, [r1, #16]
 800f4aa:	4607      	mov	r7, r0
 800f4ac:	460c      	mov	r4, r1
 800f4ae:	461e      	mov	r6, r3
 800f4b0:	f101 0c14 	add.w	ip, r1, #20
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	f8dc 3000 	ldr.w	r3, [ip]
 800f4ba:	b299      	uxth	r1, r3
 800f4bc:	fb02 6101 	mla	r1, r2, r1, r6
 800f4c0:	0c1e      	lsrs	r6, r3, #16
 800f4c2:	0c0b      	lsrs	r3, r1, #16
 800f4c4:	fb02 3306 	mla	r3, r2, r6, r3
 800f4c8:	b289      	uxth	r1, r1
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4d0:	4285      	cmp	r5, r0
 800f4d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f4d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4da:	dcec      	bgt.n	800f4b6 <__multadd+0x12>
 800f4dc:	b30e      	cbz	r6, 800f522 <__multadd+0x7e>
 800f4de:	68a3      	ldr	r3, [r4, #8]
 800f4e0:	42ab      	cmp	r3, r5
 800f4e2:	dc19      	bgt.n	800f518 <__multadd+0x74>
 800f4e4:	6861      	ldr	r1, [r4, #4]
 800f4e6:	4638      	mov	r0, r7
 800f4e8:	3101      	adds	r1, #1
 800f4ea:	f7ff ff79 	bl	800f3e0 <_Balloc>
 800f4ee:	4680      	mov	r8, r0
 800f4f0:	b928      	cbnz	r0, 800f4fe <__multadd+0x5a>
 800f4f2:	4602      	mov	r2, r0
 800f4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f528 <__multadd+0x84>)
 800f4f6:	480d      	ldr	r0, [pc, #52]	@ (800f52c <__multadd+0x88>)
 800f4f8:	21ba      	movs	r1, #186	@ 0xba
 800f4fa:	f7fe fc59 	bl	800ddb0 <__assert_func>
 800f4fe:	6922      	ldr	r2, [r4, #16]
 800f500:	3202      	adds	r2, #2
 800f502:	f104 010c 	add.w	r1, r4, #12
 800f506:	0092      	lsls	r2, r2, #2
 800f508:	300c      	adds	r0, #12
 800f50a:	f7fe fc3a 	bl	800dd82 <memcpy>
 800f50e:	4621      	mov	r1, r4
 800f510:	4638      	mov	r0, r7
 800f512:	f7ff ffa5 	bl	800f460 <_Bfree>
 800f516:	4644      	mov	r4, r8
 800f518:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f51c:	3501      	adds	r5, #1
 800f51e:	615e      	str	r6, [r3, #20]
 800f520:	6125      	str	r5, [r4, #16]
 800f522:	4620      	mov	r0, r4
 800f524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f528:	08011cad 	.word	0x08011cad
 800f52c:	08011d1e 	.word	0x08011d1e

0800f530 <__s2b>:
 800f530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f534:	460c      	mov	r4, r1
 800f536:	4615      	mov	r5, r2
 800f538:	461f      	mov	r7, r3
 800f53a:	2209      	movs	r2, #9
 800f53c:	3308      	adds	r3, #8
 800f53e:	4606      	mov	r6, r0
 800f540:	fb93 f3f2 	sdiv	r3, r3, r2
 800f544:	2100      	movs	r1, #0
 800f546:	2201      	movs	r2, #1
 800f548:	429a      	cmp	r2, r3
 800f54a:	db09      	blt.n	800f560 <__s2b+0x30>
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7ff ff47 	bl	800f3e0 <_Balloc>
 800f552:	b940      	cbnz	r0, 800f566 <__s2b+0x36>
 800f554:	4602      	mov	r2, r0
 800f556:	4b19      	ldr	r3, [pc, #100]	@ (800f5bc <__s2b+0x8c>)
 800f558:	4819      	ldr	r0, [pc, #100]	@ (800f5c0 <__s2b+0x90>)
 800f55a:	21d3      	movs	r1, #211	@ 0xd3
 800f55c:	f7fe fc28 	bl	800ddb0 <__assert_func>
 800f560:	0052      	lsls	r2, r2, #1
 800f562:	3101      	adds	r1, #1
 800f564:	e7f0      	b.n	800f548 <__s2b+0x18>
 800f566:	9b08      	ldr	r3, [sp, #32]
 800f568:	6143      	str	r3, [r0, #20]
 800f56a:	2d09      	cmp	r5, #9
 800f56c:	f04f 0301 	mov.w	r3, #1
 800f570:	6103      	str	r3, [r0, #16]
 800f572:	dd16      	ble.n	800f5a2 <__s2b+0x72>
 800f574:	f104 0909 	add.w	r9, r4, #9
 800f578:	46c8      	mov	r8, r9
 800f57a:	442c      	add	r4, r5
 800f57c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f580:	4601      	mov	r1, r0
 800f582:	3b30      	subs	r3, #48	@ 0x30
 800f584:	220a      	movs	r2, #10
 800f586:	4630      	mov	r0, r6
 800f588:	f7ff ff8c 	bl	800f4a4 <__multadd>
 800f58c:	45a0      	cmp	r8, r4
 800f58e:	d1f5      	bne.n	800f57c <__s2b+0x4c>
 800f590:	f1a5 0408 	sub.w	r4, r5, #8
 800f594:	444c      	add	r4, r9
 800f596:	1b2d      	subs	r5, r5, r4
 800f598:	1963      	adds	r3, r4, r5
 800f59a:	42bb      	cmp	r3, r7
 800f59c:	db04      	blt.n	800f5a8 <__s2b+0x78>
 800f59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5a2:	340a      	adds	r4, #10
 800f5a4:	2509      	movs	r5, #9
 800f5a6:	e7f6      	b.n	800f596 <__s2b+0x66>
 800f5a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5ac:	4601      	mov	r1, r0
 800f5ae:	3b30      	subs	r3, #48	@ 0x30
 800f5b0:	220a      	movs	r2, #10
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f7ff ff76 	bl	800f4a4 <__multadd>
 800f5b8:	e7ee      	b.n	800f598 <__s2b+0x68>
 800f5ba:	bf00      	nop
 800f5bc:	08011cad 	.word	0x08011cad
 800f5c0:	08011d1e 	.word	0x08011d1e

0800f5c4 <__hi0bits>:
 800f5c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	bf36      	itet	cc
 800f5cc:	0403      	lslcc	r3, r0, #16
 800f5ce:	2000      	movcs	r0, #0
 800f5d0:	2010      	movcc	r0, #16
 800f5d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f5d6:	bf3c      	itt	cc
 800f5d8:	021b      	lslcc	r3, r3, #8
 800f5da:	3008      	addcc	r0, #8
 800f5dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5e0:	bf3c      	itt	cc
 800f5e2:	011b      	lslcc	r3, r3, #4
 800f5e4:	3004      	addcc	r0, #4
 800f5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ea:	bf3c      	itt	cc
 800f5ec:	009b      	lslcc	r3, r3, #2
 800f5ee:	3002      	addcc	r0, #2
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	db05      	blt.n	800f600 <__hi0bits+0x3c>
 800f5f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f5f8:	f100 0001 	add.w	r0, r0, #1
 800f5fc:	bf08      	it	eq
 800f5fe:	2020      	moveq	r0, #32
 800f600:	4770      	bx	lr

0800f602 <__lo0bits>:
 800f602:	6803      	ldr	r3, [r0, #0]
 800f604:	4602      	mov	r2, r0
 800f606:	f013 0007 	ands.w	r0, r3, #7
 800f60a:	d00b      	beq.n	800f624 <__lo0bits+0x22>
 800f60c:	07d9      	lsls	r1, r3, #31
 800f60e:	d421      	bmi.n	800f654 <__lo0bits+0x52>
 800f610:	0798      	lsls	r0, r3, #30
 800f612:	bf49      	itett	mi
 800f614:	085b      	lsrmi	r3, r3, #1
 800f616:	089b      	lsrpl	r3, r3, #2
 800f618:	2001      	movmi	r0, #1
 800f61a:	6013      	strmi	r3, [r2, #0]
 800f61c:	bf5c      	itt	pl
 800f61e:	6013      	strpl	r3, [r2, #0]
 800f620:	2002      	movpl	r0, #2
 800f622:	4770      	bx	lr
 800f624:	b299      	uxth	r1, r3
 800f626:	b909      	cbnz	r1, 800f62c <__lo0bits+0x2a>
 800f628:	0c1b      	lsrs	r3, r3, #16
 800f62a:	2010      	movs	r0, #16
 800f62c:	b2d9      	uxtb	r1, r3
 800f62e:	b909      	cbnz	r1, 800f634 <__lo0bits+0x32>
 800f630:	3008      	adds	r0, #8
 800f632:	0a1b      	lsrs	r3, r3, #8
 800f634:	0719      	lsls	r1, r3, #28
 800f636:	bf04      	itt	eq
 800f638:	091b      	lsreq	r3, r3, #4
 800f63a:	3004      	addeq	r0, #4
 800f63c:	0799      	lsls	r1, r3, #30
 800f63e:	bf04      	itt	eq
 800f640:	089b      	lsreq	r3, r3, #2
 800f642:	3002      	addeq	r0, #2
 800f644:	07d9      	lsls	r1, r3, #31
 800f646:	d403      	bmi.n	800f650 <__lo0bits+0x4e>
 800f648:	085b      	lsrs	r3, r3, #1
 800f64a:	f100 0001 	add.w	r0, r0, #1
 800f64e:	d003      	beq.n	800f658 <__lo0bits+0x56>
 800f650:	6013      	str	r3, [r2, #0]
 800f652:	4770      	bx	lr
 800f654:	2000      	movs	r0, #0
 800f656:	4770      	bx	lr
 800f658:	2020      	movs	r0, #32
 800f65a:	4770      	bx	lr

0800f65c <__i2b>:
 800f65c:	b510      	push	{r4, lr}
 800f65e:	460c      	mov	r4, r1
 800f660:	2101      	movs	r1, #1
 800f662:	f7ff febd 	bl	800f3e0 <_Balloc>
 800f666:	4602      	mov	r2, r0
 800f668:	b928      	cbnz	r0, 800f676 <__i2b+0x1a>
 800f66a:	4b05      	ldr	r3, [pc, #20]	@ (800f680 <__i2b+0x24>)
 800f66c:	4805      	ldr	r0, [pc, #20]	@ (800f684 <__i2b+0x28>)
 800f66e:	f240 1145 	movw	r1, #325	@ 0x145
 800f672:	f7fe fb9d 	bl	800ddb0 <__assert_func>
 800f676:	2301      	movs	r3, #1
 800f678:	6144      	str	r4, [r0, #20]
 800f67a:	6103      	str	r3, [r0, #16]
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	bf00      	nop
 800f680:	08011cad 	.word	0x08011cad
 800f684:	08011d1e 	.word	0x08011d1e

0800f688 <__multiply>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	4617      	mov	r7, r2
 800f68e:	690a      	ldr	r2, [r1, #16]
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	429a      	cmp	r2, r3
 800f694:	bfa8      	it	ge
 800f696:	463b      	movge	r3, r7
 800f698:	4689      	mov	r9, r1
 800f69a:	bfa4      	itt	ge
 800f69c:	460f      	movge	r7, r1
 800f69e:	4699      	movge	r9, r3
 800f6a0:	693d      	ldr	r5, [r7, #16]
 800f6a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	6879      	ldr	r1, [r7, #4]
 800f6aa:	eb05 060a 	add.w	r6, r5, sl
 800f6ae:	42b3      	cmp	r3, r6
 800f6b0:	b085      	sub	sp, #20
 800f6b2:	bfb8      	it	lt
 800f6b4:	3101      	addlt	r1, #1
 800f6b6:	f7ff fe93 	bl	800f3e0 <_Balloc>
 800f6ba:	b930      	cbnz	r0, 800f6ca <__multiply+0x42>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	4b41      	ldr	r3, [pc, #260]	@ (800f7c4 <__multiply+0x13c>)
 800f6c0:	4841      	ldr	r0, [pc, #260]	@ (800f7c8 <__multiply+0x140>)
 800f6c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f6c6:	f7fe fb73 	bl	800ddb0 <__assert_func>
 800f6ca:	f100 0414 	add.w	r4, r0, #20
 800f6ce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f6d2:	4623      	mov	r3, r4
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	4573      	cmp	r3, lr
 800f6d8:	d320      	bcc.n	800f71c <__multiply+0x94>
 800f6da:	f107 0814 	add.w	r8, r7, #20
 800f6de:	f109 0114 	add.w	r1, r9, #20
 800f6e2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f6e6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f6ea:	9302      	str	r3, [sp, #8]
 800f6ec:	1beb      	subs	r3, r5, r7
 800f6ee:	3b15      	subs	r3, #21
 800f6f0:	f023 0303 	bic.w	r3, r3, #3
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	3715      	adds	r7, #21
 800f6f8:	42bd      	cmp	r5, r7
 800f6fa:	bf38      	it	cc
 800f6fc:	2304      	movcc	r3, #4
 800f6fe:	9301      	str	r3, [sp, #4]
 800f700:	9b02      	ldr	r3, [sp, #8]
 800f702:	9103      	str	r1, [sp, #12]
 800f704:	428b      	cmp	r3, r1
 800f706:	d80c      	bhi.n	800f722 <__multiply+0x9a>
 800f708:	2e00      	cmp	r6, #0
 800f70a:	dd03      	ble.n	800f714 <__multiply+0x8c>
 800f70c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f710:	2b00      	cmp	r3, #0
 800f712:	d055      	beq.n	800f7c0 <__multiply+0x138>
 800f714:	6106      	str	r6, [r0, #16]
 800f716:	b005      	add	sp, #20
 800f718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71c:	f843 2b04 	str.w	r2, [r3], #4
 800f720:	e7d9      	b.n	800f6d6 <__multiply+0x4e>
 800f722:	f8b1 a000 	ldrh.w	sl, [r1]
 800f726:	f1ba 0f00 	cmp.w	sl, #0
 800f72a:	d01f      	beq.n	800f76c <__multiply+0xe4>
 800f72c:	46c4      	mov	ip, r8
 800f72e:	46a1      	mov	r9, r4
 800f730:	2700      	movs	r7, #0
 800f732:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f736:	f8d9 3000 	ldr.w	r3, [r9]
 800f73a:	fa1f fb82 	uxth.w	fp, r2
 800f73e:	b29b      	uxth	r3, r3
 800f740:	fb0a 330b 	mla	r3, sl, fp, r3
 800f744:	443b      	add	r3, r7
 800f746:	f8d9 7000 	ldr.w	r7, [r9]
 800f74a:	0c12      	lsrs	r2, r2, #16
 800f74c:	0c3f      	lsrs	r7, r7, #16
 800f74e:	fb0a 7202 	mla	r2, sl, r2, r7
 800f752:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f756:	b29b      	uxth	r3, r3
 800f758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f75c:	4565      	cmp	r5, ip
 800f75e:	f849 3b04 	str.w	r3, [r9], #4
 800f762:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f766:	d8e4      	bhi.n	800f732 <__multiply+0xaa>
 800f768:	9b01      	ldr	r3, [sp, #4]
 800f76a:	50e7      	str	r7, [r4, r3]
 800f76c:	9b03      	ldr	r3, [sp, #12]
 800f76e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f772:	3104      	adds	r1, #4
 800f774:	f1b9 0f00 	cmp.w	r9, #0
 800f778:	d020      	beq.n	800f7bc <__multiply+0x134>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	4647      	mov	r7, r8
 800f77e:	46a4      	mov	ip, r4
 800f780:	f04f 0a00 	mov.w	sl, #0
 800f784:	f8b7 b000 	ldrh.w	fp, [r7]
 800f788:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f78c:	fb09 220b 	mla	r2, r9, fp, r2
 800f790:	4452      	add	r2, sl
 800f792:	b29b      	uxth	r3, r3
 800f794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f798:	f84c 3b04 	str.w	r3, [ip], #4
 800f79c:	f857 3b04 	ldr.w	r3, [r7], #4
 800f7a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7a4:	f8bc 3000 	ldrh.w	r3, [ip]
 800f7a8:	fb09 330a 	mla	r3, r9, sl, r3
 800f7ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f7b0:	42bd      	cmp	r5, r7
 800f7b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7b6:	d8e5      	bhi.n	800f784 <__multiply+0xfc>
 800f7b8:	9a01      	ldr	r2, [sp, #4]
 800f7ba:	50a3      	str	r3, [r4, r2]
 800f7bc:	3404      	adds	r4, #4
 800f7be:	e79f      	b.n	800f700 <__multiply+0x78>
 800f7c0:	3e01      	subs	r6, #1
 800f7c2:	e7a1      	b.n	800f708 <__multiply+0x80>
 800f7c4:	08011cad 	.word	0x08011cad
 800f7c8:	08011d1e 	.word	0x08011d1e

0800f7cc <__pow5mult>:
 800f7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d0:	4615      	mov	r5, r2
 800f7d2:	f012 0203 	ands.w	r2, r2, #3
 800f7d6:	4607      	mov	r7, r0
 800f7d8:	460e      	mov	r6, r1
 800f7da:	d007      	beq.n	800f7ec <__pow5mult+0x20>
 800f7dc:	4c25      	ldr	r4, [pc, #148]	@ (800f874 <__pow5mult+0xa8>)
 800f7de:	3a01      	subs	r2, #1
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f7e6:	f7ff fe5d 	bl	800f4a4 <__multadd>
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	10ad      	asrs	r5, r5, #2
 800f7ee:	d03d      	beq.n	800f86c <__pow5mult+0xa0>
 800f7f0:	69fc      	ldr	r4, [r7, #28]
 800f7f2:	b97c      	cbnz	r4, 800f814 <__pow5mult+0x48>
 800f7f4:	2010      	movs	r0, #16
 800f7f6:	f7ff fd23 	bl	800f240 <malloc>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	61f8      	str	r0, [r7, #28]
 800f7fe:	b928      	cbnz	r0, 800f80c <__pow5mult+0x40>
 800f800:	4b1d      	ldr	r3, [pc, #116]	@ (800f878 <__pow5mult+0xac>)
 800f802:	481e      	ldr	r0, [pc, #120]	@ (800f87c <__pow5mult+0xb0>)
 800f804:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f808:	f7fe fad2 	bl	800ddb0 <__assert_func>
 800f80c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f810:	6004      	str	r4, [r0, #0]
 800f812:	60c4      	str	r4, [r0, #12]
 800f814:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f81c:	b94c      	cbnz	r4, 800f832 <__pow5mult+0x66>
 800f81e:	f240 2171 	movw	r1, #625	@ 0x271
 800f822:	4638      	mov	r0, r7
 800f824:	f7ff ff1a 	bl	800f65c <__i2b>
 800f828:	2300      	movs	r3, #0
 800f82a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f82e:	4604      	mov	r4, r0
 800f830:	6003      	str	r3, [r0, #0]
 800f832:	f04f 0900 	mov.w	r9, #0
 800f836:	07eb      	lsls	r3, r5, #31
 800f838:	d50a      	bpl.n	800f850 <__pow5mult+0x84>
 800f83a:	4631      	mov	r1, r6
 800f83c:	4622      	mov	r2, r4
 800f83e:	4638      	mov	r0, r7
 800f840:	f7ff ff22 	bl	800f688 <__multiply>
 800f844:	4631      	mov	r1, r6
 800f846:	4680      	mov	r8, r0
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff fe09 	bl	800f460 <_Bfree>
 800f84e:	4646      	mov	r6, r8
 800f850:	106d      	asrs	r5, r5, #1
 800f852:	d00b      	beq.n	800f86c <__pow5mult+0xa0>
 800f854:	6820      	ldr	r0, [r4, #0]
 800f856:	b938      	cbnz	r0, 800f868 <__pow5mult+0x9c>
 800f858:	4622      	mov	r2, r4
 800f85a:	4621      	mov	r1, r4
 800f85c:	4638      	mov	r0, r7
 800f85e:	f7ff ff13 	bl	800f688 <__multiply>
 800f862:	6020      	str	r0, [r4, #0]
 800f864:	f8c0 9000 	str.w	r9, [r0]
 800f868:	4604      	mov	r4, r0
 800f86a:	e7e4      	b.n	800f836 <__pow5mult+0x6a>
 800f86c:	4630      	mov	r0, r6
 800f86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f872:	bf00      	nop
 800f874:	08012034 	.word	0x08012034
 800f878:	08011aec 	.word	0x08011aec
 800f87c:	08011d1e 	.word	0x08011d1e

0800f880 <__lshift>:
 800f880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f884:	460c      	mov	r4, r1
 800f886:	6849      	ldr	r1, [r1, #4]
 800f888:	6923      	ldr	r3, [r4, #16]
 800f88a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f88e:	68a3      	ldr	r3, [r4, #8]
 800f890:	4607      	mov	r7, r0
 800f892:	4691      	mov	r9, r2
 800f894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f898:	f108 0601 	add.w	r6, r8, #1
 800f89c:	42b3      	cmp	r3, r6
 800f89e:	db0b      	blt.n	800f8b8 <__lshift+0x38>
 800f8a0:	4638      	mov	r0, r7
 800f8a2:	f7ff fd9d 	bl	800f3e0 <_Balloc>
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	b948      	cbnz	r0, 800f8be <__lshift+0x3e>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	4b28      	ldr	r3, [pc, #160]	@ (800f950 <__lshift+0xd0>)
 800f8ae:	4829      	ldr	r0, [pc, #164]	@ (800f954 <__lshift+0xd4>)
 800f8b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f8b4:	f7fe fa7c 	bl	800ddb0 <__assert_func>
 800f8b8:	3101      	adds	r1, #1
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	e7ee      	b.n	800f89c <__lshift+0x1c>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	f100 0114 	add.w	r1, r0, #20
 800f8c4:	f100 0210 	add.w	r2, r0, #16
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	4553      	cmp	r3, sl
 800f8cc:	db33      	blt.n	800f936 <__lshift+0xb6>
 800f8ce:	6920      	ldr	r0, [r4, #16]
 800f8d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8d4:	f104 0314 	add.w	r3, r4, #20
 800f8d8:	f019 091f 	ands.w	r9, r9, #31
 800f8dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f8e4:	d02b      	beq.n	800f93e <__lshift+0xbe>
 800f8e6:	f1c9 0e20 	rsb	lr, r9, #32
 800f8ea:	468a      	mov	sl, r1
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	6818      	ldr	r0, [r3, #0]
 800f8f0:	fa00 f009 	lsl.w	r0, r0, r9
 800f8f4:	4310      	orrs	r0, r2
 800f8f6:	f84a 0b04 	str.w	r0, [sl], #4
 800f8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8fe:	459c      	cmp	ip, r3
 800f900:	fa22 f20e 	lsr.w	r2, r2, lr
 800f904:	d8f3      	bhi.n	800f8ee <__lshift+0x6e>
 800f906:	ebac 0304 	sub.w	r3, ip, r4
 800f90a:	3b15      	subs	r3, #21
 800f90c:	f023 0303 	bic.w	r3, r3, #3
 800f910:	3304      	adds	r3, #4
 800f912:	f104 0015 	add.w	r0, r4, #21
 800f916:	4560      	cmp	r0, ip
 800f918:	bf88      	it	hi
 800f91a:	2304      	movhi	r3, #4
 800f91c:	50ca      	str	r2, [r1, r3]
 800f91e:	b10a      	cbz	r2, 800f924 <__lshift+0xa4>
 800f920:	f108 0602 	add.w	r6, r8, #2
 800f924:	3e01      	subs	r6, #1
 800f926:	4638      	mov	r0, r7
 800f928:	612e      	str	r6, [r5, #16]
 800f92a:	4621      	mov	r1, r4
 800f92c:	f7ff fd98 	bl	800f460 <_Bfree>
 800f930:	4628      	mov	r0, r5
 800f932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f936:	f842 0f04 	str.w	r0, [r2, #4]!
 800f93a:	3301      	adds	r3, #1
 800f93c:	e7c5      	b.n	800f8ca <__lshift+0x4a>
 800f93e:	3904      	subs	r1, #4
 800f940:	f853 2b04 	ldr.w	r2, [r3], #4
 800f944:	f841 2f04 	str.w	r2, [r1, #4]!
 800f948:	459c      	cmp	ip, r3
 800f94a:	d8f9      	bhi.n	800f940 <__lshift+0xc0>
 800f94c:	e7ea      	b.n	800f924 <__lshift+0xa4>
 800f94e:	bf00      	nop
 800f950:	08011cad 	.word	0x08011cad
 800f954:	08011d1e 	.word	0x08011d1e

0800f958 <__mcmp>:
 800f958:	690a      	ldr	r2, [r1, #16]
 800f95a:	4603      	mov	r3, r0
 800f95c:	6900      	ldr	r0, [r0, #16]
 800f95e:	1a80      	subs	r0, r0, r2
 800f960:	b530      	push	{r4, r5, lr}
 800f962:	d10e      	bne.n	800f982 <__mcmp+0x2a>
 800f964:	3314      	adds	r3, #20
 800f966:	3114      	adds	r1, #20
 800f968:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f96c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f970:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f974:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f978:	4295      	cmp	r5, r2
 800f97a:	d003      	beq.n	800f984 <__mcmp+0x2c>
 800f97c:	d205      	bcs.n	800f98a <__mcmp+0x32>
 800f97e:	f04f 30ff 	mov.w	r0, #4294967295
 800f982:	bd30      	pop	{r4, r5, pc}
 800f984:	42a3      	cmp	r3, r4
 800f986:	d3f3      	bcc.n	800f970 <__mcmp+0x18>
 800f988:	e7fb      	b.n	800f982 <__mcmp+0x2a>
 800f98a:	2001      	movs	r0, #1
 800f98c:	e7f9      	b.n	800f982 <__mcmp+0x2a>
	...

0800f990 <__mdiff>:
 800f990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	4689      	mov	r9, r1
 800f996:	4606      	mov	r6, r0
 800f998:	4611      	mov	r1, r2
 800f99a:	4648      	mov	r0, r9
 800f99c:	4614      	mov	r4, r2
 800f99e:	f7ff ffdb 	bl	800f958 <__mcmp>
 800f9a2:	1e05      	subs	r5, r0, #0
 800f9a4:	d112      	bne.n	800f9cc <__mdiff+0x3c>
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f7ff fd19 	bl	800f3e0 <_Balloc>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	b928      	cbnz	r0, 800f9be <__mdiff+0x2e>
 800f9b2:	4b3f      	ldr	r3, [pc, #252]	@ (800fab0 <__mdiff+0x120>)
 800f9b4:	f240 2137 	movw	r1, #567	@ 0x237
 800f9b8:	483e      	ldr	r0, [pc, #248]	@ (800fab4 <__mdiff+0x124>)
 800f9ba:	f7fe f9f9 	bl	800ddb0 <__assert_func>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	b003      	add	sp, #12
 800f9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9cc:	bfbc      	itt	lt
 800f9ce:	464b      	movlt	r3, r9
 800f9d0:	46a1      	movlt	r9, r4
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f9d8:	bfba      	itte	lt
 800f9da:	461c      	movlt	r4, r3
 800f9dc:	2501      	movlt	r5, #1
 800f9de:	2500      	movge	r5, #0
 800f9e0:	f7ff fcfe 	bl	800f3e0 <_Balloc>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	b918      	cbnz	r0, 800f9f0 <__mdiff+0x60>
 800f9e8:	4b31      	ldr	r3, [pc, #196]	@ (800fab0 <__mdiff+0x120>)
 800f9ea:	f240 2145 	movw	r1, #581	@ 0x245
 800f9ee:	e7e3      	b.n	800f9b8 <__mdiff+0x28>
 800f9f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f9f4:	6926      	ldr	r6, [r4, #16]
 800f9f6:	60c5      	str	r5, [r0, #12]
 800f9f8:	f109 0310 	add.w	r3, r9, #16
 800f9fc:	f109 0514 	add.w	r5, r9, #20
 800fa00:	f104 0e14 	add.w	lr, r4, #20
 800fa04:	f100 0b14 	add.w	fp, r0, #20
 800fa08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa10:	9301      	str	r3, [sp, #4]
 800fa12:	46d9      	mov	r9, fp
 800fa14:	f04f 0c00 	mov.w	ip, #0
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fa1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fa22:	9301      	str	r3, [sp, #4]
 800fa24:	fa1f f38a 	uxth.w	r3, sl
 800fa28:	4619      	mov	r1, r3
 800fa2a:	b283      	uxth	r3, r0
 800fa2c:	1acb      	subs	r3, r1, r3
 800fa2e:	0c00      	lsrs	r0, r0, #16
 800fa30:	4463      	add	r3, ip
 800fa32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fa36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fa40:	4576      	cmp	r6, lr
 800fa42:	f849 3b04 	str.w	r3, [r9], #4
 800fa46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa4a:	d8e5      	bhi.n	800fa18 <__mdiff+0x88>
 800fa4c:	1b33      	subs	r3, r6, r4
 800fa4e:	3b15      	subs	r3, #21
 800fa50:	f023 0303 	bic.w	r3, r3, #3
 800fa54:	3415      	adds	r4, #21
 800fa56:	3304      	adds	r3, #4
 800fa58:	42a6      	cmp	r6, r4
 800fa5a:	bf38      	it	cc
 800fa5c:	2304      	movcc	r3, #4
 800fa5e:	441d      	add	r5, r3
 800fa60:	445b      	add	r3, fp
 800fa62:	461e      	mov	r6, r3
 800fa64:	462c      	mov	r4, r5
 800fa66:	4544      	cmp	r4, r8
 800fa68:	d30e      	bcc.n	800fa88 <__mdiff+0xf8>
 800fa6a:	f108 0103 	add.w	r1, r8, #3
 800fa6e:	1b49      	subs	r1, r1, r5
 800fa70:	f021 0103 	bic.w	r1, r1, #3
 800fa74:	3d03      	subs	r5, #3
 800fa76:	45a8      	cmp	r8, r5
 800fa78:	bf38      	it	cc
 800fa7a:	2100      	movcc	r1, #0
 800fa7c:	440b      	add	r3, r1
 800fa7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa82:	b191      	cbz	r1, 800faaa <__mdiff+0x11a>
 800fa84:	6117      	str	r7, [r2, #16]
 800fa86:	e79d      	b.n	800f9c4 <__mdiff+0x34>
 800fa88:	f854 1b04 	ldr.w	r1, [r4], #4
 800fa8c:	46e6      	mov	lr, ip
 800fa8e:	0c08      	lsrs	r0, r1, #16
 800fa90:	fa1c fc81 	uxtah	ip, ip, r1
 800fa94:	4471      	add	r1, lr
 800fa96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fa9a:	b289      	uxth	r1, r1
 800fa9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800faa0:	f846 1b04 	str.w	r1, [r6], #4
 800faa4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800faa8:	e7dd      	b.n	800fa66 <__mdiff+0xd6>
 800faaa:	3f01      	subs	r7, #1
 800faac:	e7e7      	b.n	800fa7e <__mdiff+0xee>
 800faae:	bf00      	nop
 800fab0:	08011cad 	.word	0x08011cad
 800fab4:	08011d1e 	.word	0x08011d1e

0800fab8 <__ulp>:
 800fab8:	b082      	sub	sp, #8
 800faba:	ed8d 0b00 	vstr	d0, [sp]
 800fabe:	9a01      	ldr	r2, [sp, #4]
 800fac0:	4b0f      	ldr	r3, [pc, #60]	@ (800fb00 <__ulp+0x48>)
 800fac2:	4013      	ands	r3, r2
 800fac4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fac8:	2b00      	cmp	r3, #0
 800faca:	dc08      	bgt.n	800fade <__ulp+0x26>
 800facc:	425b      	negs	r3, r3
 800face:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fad2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fad6:	da04      	bge.n	800fae2 <__ulp+0x2a>
 800fad8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fadc:	4113      	asrs	r3, r2
 800fade:	2200      	movs	r2, #0
 800fae0:	e008      	b.n	800faf4 <__ulp+0x3c>
 800fae2:	f1a2 0314 	sub.w	r3, r2, #20
 800fae6:	2b1e      	cmp	r3, #30
 800fae8:	bfda      	itte	le
 800faea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800faee:	40da      	lsrle	r2, r3
 800faf0:	2201      	movgt	r2, #1
 800faf2:	2300      	movs	r3, #0
 800faf4:	4619      	mov	r1, r3
 800faf6:	4610      	mov	r0, r2
 800faf8:	ec41 0b10 	vmov	d0, r0, r1
 800fafc:	b002      	add	sp, #8
 800fafe:	4770      	bx	lr
 800fb00:	7ff00000 	.word	0x7ff00000

0800fb04 <__b2d>:
 800fb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb08:	6906      	ldr	r6, [r0, #16]
 800fb0a:	f100 0814 	add.w	r8, r0, #20
 800fb0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fb12:	1f37      	subs	r7, r6, #4
 800fb14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fb18:	4610      	mov	r0, r2
 800fb1a:	f7ff fd53 	bl	800f5c4 <__hi0bits>
 800fb1e:	f1c0 0320 	rsb	r3, r0, #32
 800fb22:	280a      	cmp	r0, #10
 800fb24:	600b      	str	r3, [r1, #0]
 800fb26:	491b      	ldr	r1, [pc, #108]	@ (800fb94 <__b2d+0x90>)
 800fb28:	dc15      	bgt.n	800fb56 <__b2d+0x52>
 800fb2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800fb2e:	fa22 f30c 	lsr.w	r3, r2, ip
 800fb32:	45b8      	cmp	r8, r7
 800fb34:	ea43 0501 	orr.w	r5, r3, r1
 800fb38:	bf34      	ite	cc
 800fb3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb3e:	2300      	movcs	r3, #0
 800fb40:	3015      	adds	r0, #21
 800fb42:	fa02 f000 	lsl.w	r0, r2, r0
 800fb46:	fa23 f30c 	lsr.w	r3, r3, ip
 800fb4a:	4303      	orrs	r3, r0
 800fb4c:	461c      	mov	r4, r3
 800fb4e:	ec45 4b10 	vmov	d0, r4, r5
 800fb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb56:	45b8      	cmp	r8, r7
 800fb58:	bf3a      	itte	cc
 800fb5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fb5e:	f1a6 0708 	subcc.w	r7, r6, #8
 800fb62:	2300      	movcs	r3, #0
 800fb64:	380b      	subs	r0, #11
 800fb66:	d012      	beq.n	800fb8e <__b2d+0x8a>
 800fb68:	f1c0 0120 	rsb	r1, r0, #32
 800fb6c:	fa23 f401 	lsr.w	r4, r3, r1
 800fb70:	4082      	lsls	r2, r0
 800fb72:	4322      	orrs	r2, r4
 800fb74:	4547      	cmp	r7, r8
 800fb76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fb7a:	bf8c      	ite	hi
 800fb7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fb80:	2200      	movls	r2, #0
 800fb82:	4083      	lsls	r3, r0
 800fb84:	40ca      	lsrs	r2, r1
 800fb86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	e7de      	b.n	800fb4c <__b2d+0x48>
 800fb8e:	ea42 0501 	orr.w	r5, r2, r1
 800fb92:	e7db      	b.n	800fb4c <__b2d+0x48>
 800fb94:	3ff00000 	.word	0x3ff00000

0800fb98 <__d2b>:
 800fb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb9c:	460f      	mov	r7, r1
 800fb9e:	2101      	movs	r1, #1
 800fba0:	ec59 8b10 	vmov	r8, r9, d0
 800fba4:	4616      	mov	r6, r2
 800fba6:	f7ff fc1b 	bl	800f3e0 <_Balloc>
 800fbaa:	4604      	mov	r4, r0
 800fbac:	b930      	cbnz	r0, 800fbbc <__d2b+0x24>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	4b23      	ldr	r3, [pc, #140]	@ (800fc40 <__d2b+0xa8>)
 800fbb2:	4824      	ldr	r0, [pc, #144]	@ (800fc44 <__d2b+0xac>)
 800fbb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800fbb8:	f7fe f8fa 	bl	800ddb0 <__assert_func>
 800fbbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fbc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbc4:	b10d      	cbz	r5, 800fbca <__d2b+0x32>
 800fbc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fbca:	9301      	str	r3, [sp, #4]
 800fbcc:	f1b8 0300 	subs.w	r3, r8, #0
 800fbd0:	d023      	beq.n	800fc1a <__d2b+0x82>
 800fbd2:	4668      	mov	r0, sp
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	f7ff fd14 	bl	800f602 <__lo0bits>
 800fbda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fbde:	b1d0      	cbz	r0, 800fc16 <__d2b+0x7e>
 800fbe0:	f1c0 0320 	rsb	r3, r0, #32
 800fbe4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbe8:	430b      	orrs	r3, r1
 800fbea:	40c2      	lsrs	r2, r0
 800fbec:	6163      	str	r3, [r4, #20]
 800fbee:	9201      	str	r2, [sp, #4]
 800fbf0:	9b01      	ldr	r3, [sp, #4]
 800fbf2:	61a3      	str	r3, [r4, #24]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	bf0c      	ite	eq
 800fbf8:	2201      	moveq	r2, #1
 800fbfa:	2202      	movne	r2, #2
 800fbfc:	6122      	str	r2, [r4, #16]
 800fbfe:	b1a5      	cbz	r5, 800fc2a <__d2b+0x92>
 800fc00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fc04:	4405      	add	r5, r0
 800fc06:	603d      	str	r5, [r7, #0]
 800fc08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fc0c:	6030      	str	r0, [r6, #0]
 800fc0e:	4620      	mov	r0, r4
 800fc10:	b003      	add	sp, #12
 800fc12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc16:	6161      	str	r1, [r4, #20]
 800fc18:	e7ea      	b.n	800fbf0 <__d2b+0x58>
 800fc1a:	a801      	add	r0, sp, #4
 800fc1c:	f7ff fcf1 	bl	800f602 <__lo0bits>
 800fc20:	9b01      	ldr	r3, [sp, #4]
 800fc22:	6163      	str	r3, [r4, #20]
 800fc24:	3020      	adds	r0, #32
 800fc26:	2201      	movs	r2, #1
 800fc28:	e7e8      	b.n	800fbfc <__d2b+0x64>
 800fc2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fc32:	6038      	str	r0, [r7, #0]
 800fc34:	6918      	ldr	r0, [r3, #16]
 800fc36:	f7ff fcc5 	bl	800f5c4 <__hi0bits>
 800fc3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc3e:	e7e5      	b.n	800fc0c <__d2b+0x74>
 800fc40:	08011cad 	.word	0x08011cad
 800fc44:	08011d1e 	.word	0x08011d1e

0800fc48 <__ratio>:
 800fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4c:	b085      	sub	sp, #20
 800fc4e:	e9cd 1000 	strd	r1, r0, [sp]
 800fc52:	a902      	add	r1, sp, #8
 800fc54:	f7ff ff56 	bl	800fb04 <__b2d>
 800fc58:	9800      	ldr	r0, [sp, #0]
 800fc5a:	a903      	add	r1, sp, #12
 800fc5c:	ec55 4b10 	vmov	r4, r5, d0
 800fc60:	f7ff ff50 	bl	800fb04 <__b2d>
 800fc64:	9b01      	ldr	r3, [sp, #4]
 800fc66:	6919      	ldr	r1, [r3, #16]
 800fc68:	9b00      	ldr	r3, [sp, #0]
 800fc6a:	691b      	ldr	r3, [r3, #16]
 800fc6c:	1ac9      	subs	r1, r1, r3
 800fc6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fc72:	1a9b      	subs	r3, r3, r2
 800fc74:	ec5b ab10 	vmov	sl, fp, d0
 800fc78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	bfce      	itee	gt
 800fc80:	462a      	movgt	r2, r5
 800fc82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc86:	465a      	movle	r2, fp
 800fc88:	462f      	mov	r7, r5
 800fc8a:	46d9      	mov	r9, fp
 800fc8c:	bfcc      	ite	gt
 800fc8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fc92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fc96:	464b      	mov	r3, r9
 800fc98:	4652      	mov	r2, sl
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	4639      	mov	r1, r7
 800fc9e:	f7f0 fded 	bl	800087c <__aeabi_ddiv>
 800fca2:	ec41 0b10 	vmov	d0, r0, r1
 800fca6:	b005      	add	sp, #20
 800fca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcac <__copybits>:
 800fcac:	3901      	subs	r1, #1
 800fcae:	b570      	push	{r4, r5, r6, lr}
 800fcb0:	1149      	asrs	r1, r1, #5
 800fcb2:	6914      	ldr	r4, [r2, #16]
 800fcb4:	3101      	adds	r1, #1
 800fcb6:	f102 0314 	add.w	r3, r2, #20
 800fcba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fcc2:	1f05      	subs	r5, r0, #4
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	d30c      	bcc.n	800fce2 <__copybits+0x36>
 800fcc8:	1aa3      	subs	r3, r4, r2
 800fcca:	3b11      	subs	r3, #17
 800fccc:	f023 0303 	bic.w	r3, r3, #3
 800fcd0:	3211      	adds	r2, #17
 800fcd2:	42a2      	cmp	r2, r4
 800fcd4:	bf88      	it	hi
 800fcd6:	2300      	movhi	r3, #0
 800fcd8:	4418      	add	r0, r3
 800fcda:	2300      	movs	r3, #0
 800fcdc:	4288      	cmp	r0, r1
 800fcde:	d305      	bcc.n	800fcec <__copybits+0x40>
 800fce0:	bd70      	pop	{r4, r5, r6, pc}
 800fce2:	f853 6b04 	ldr.w	r6, [r3], #4
 800fce6:	f845 6f04 	str.w	r6, [r5, #4]!
 800fcea:	e7eb      	b.n	800fcc4 <__copybits+0x18>
 800fcec:	f840 3b04 	str.w	r3, [r0], #4
 800fcf0:	e7f4      	b.n	800fcdc <__copybits+0x30>

0800fcf2 <__any_on>:
 800fcf2:	f100 0214 	add.w	r2, r0, #20
 800fcf6:	6900      	ldr	r0, [r0, #16]
 800fcf8:	114b      	asrs	r3, r1, #5
 800fcfa:	4298      	cmp	r0, r3
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	db11      	blt.n	800fd24 <__any_on+0x32>
 800fd00:	dd0a      	ble.n	800fd18 <__any_on+0x26>
 800fd02:	f011 011f 	ands.w	r1, r1, #31
 800fd06:	d007      	beq.n	800fd18 <__any_on+0x26>
 800fd08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd0c:	fa24 f001 	lsr.w	r0, r4, r1
 800fd10:	fa00 f101 	lsl.w	r1, r0, r1
 800fd14:	428c      	cmp	r4, r1
 800fd16:	d10b      	bne.n	800fd30 <__any_on+0x3e>
 800fd18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d803      	bhi.n	800fd28 <__any_on+0x36>
 800fd20:	2000      	movs	r0, #0
 800fd22:	bd10      	pop	{r4, pc}
 800fd24:	4603      	mov	r3, r0
 800fd26:	e7f7      	b.n	800fd18 <__any_on+0x26>
 800fd28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd2c:	2900      	cmp	r1, #0
 800fd2e:	d0f5      	beq.n	800fd1c <__any_on+0x2a>
 800fd30:	2001      	movs	r0, #1
 800fd32:	e7f6      	b.n	800fd22 <__any_on+0x30>

0800fd34 <_strtoul_l.isra.0>:
 800fd34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd38:	4e34      	ldr	r6, [pc, #208]	@ (800fe0c <_strtoul_l.isra.0+0xd8>)
 800fd3a:	4686      	mov	lr, r0
 800fd3c:	460d      	mov	r5, r1
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd44:	5d37      	ldrb	r7, [r6, r4]
 800fd46:	f017 0708 	ands.w	r7, r7, #8
 800fd4a:	d1f8      	bne.n	800fd3e <_strtoul_l.isra.0+0xa>
 800fd4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800fd4e:	d110      	bne.n	800fd72 <_strtoul_l.isra.0+0x3e>
 800fd50:	782c      	ldrb	r4, [r5, #0]
 800fd52:	2701      	movs	r7, #1
 800fd54:	1c85      	adds	r5, r0, #2
 800fd56:	f033 0010 	bics.w	r0, r3, #16
 800fd5a:	d115      	bne.n	800fd88 <_strtoul_l.isra.0+0x54>
 800fd5c:	2c30      	cmp	r4, #48	@ 0x30
 800fd5e:	d10d      	bne.n	800fd7c <_strtoul_l.isra.0+0x48>
 800fd60:	7828      	ldrb	r0, [r5, #0]
 800fd62:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fd66:	2858      	cmp	r0, #88	@ 0x58
 800fd68:	d108      	bne.n	800fd7c <_strtoul_l.isra.0+0x48>
 800fd6a:	786c      	ldrb	r4, [r5, #1]
 800fd6c:	3502      	adds	r5, #2
 800fd6e:	2310      	movs	r3, #16
 800fd70:	e00a      	b.n	800fd88 <_strtoul_l.isra.0+0x54>
 800fd72:	2c2b      	cmp	r4, #43	@ 0x2b
 800fd74:	bf04      	itt	eq
 800fd76:	782c      	ldrbeq	r4, [r5, #0]
 800fd78:	1c85      	addeq	r5, r0, #2
 800fd7a:	e7ec      	b.n	800fd56 <_strtoul_l.isra.0+0x22>
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1f6      	bne.n	800fd6e <_strtoul_l.isra.0+0x3a>
 800fd80:	2c30      	cmp	r4, #48	@ 0x30
 800fd82:	bf14      	ite	ne
 800fd84:	230a      	movne	r3, #10
 800fd86:	2308      	moveq	r3, #8
 800fd88:	f04f 38ff 	mov.w	r8, #4294967295
 800fd8c:	2600      	movs	r6, #0
 800fd8e:	fbb8 f8f3 	udiv	r8, r8, r3
 800fd92:	fb03 f908 	mul.w	r9, r3, r8
 800fd96:	ea6f 0909 	mvn.w	r9, r9
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fda0:	f1bc 0f09 	cmp.w	ip, #9
 800fda4:	d810      	bhi.n	800fdc8 <_strtoul_l.isra.0+0x94>
 800fda6:	4664      	mov	r4, ip
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	dd1e      	ble.n	800fdea <_strtoul_l.isra.0+0xb6>
 800fdac:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fdb0:	d007      	beq.n	800fdc2 <_strtoul_l.isra.0+0x8e>
 800fdb2:	4580      	cmp	r8, r0
 800fdb4:	d316      	bcc.n	800fde4 <_strtoul_l.isra.0+0xb0>
 800fdb6:	d101      	bne.n	800fdbc <_strtoul_l.isra.0+0x88>
 800fdb8:	45a1      	cmp	r9, r4
 800fdba:	db13      	blt.n	800fde4 <_strtoul_l.isra.0+0xb0>
 800fdbc:	fb00 4003 	mla	r0, r0, r3, r4
 800fdc0:	2601      	movs	r6, #1
 800fdc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdc6:	e7e9      	b.n	800fd9c <_strtoul_l.isra.0+0x68>
 800fdc8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fdcc:	f1bc 0f19 	cmp.w	ip, #25
 800fdd0:	d801      	bhi.n	800fdd6 <_strtoul_l.isra.0+0xa2>
 800fdd2:	3c37      	subs	r4, #55	@ 0x37
 800fdd4:	e7e8      	b.n	800fda8 <_strtoul_l.isra.0+0x74>
 800fdd6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fdda:	f1bc 0f19 	cmp.w	ip, #25
 800fdde:	d804      	bhi.n	800fdea <_strtoul_l.isra.0+0xb6>
 800fde0:	3c57      	subs	r4, #87	@ 0x57
 800fde2:	e7e1      	b.n	800fda8 <_strtoul_l.isra.0+0x74>
 800fde4:	f04f 36ff 	mov.w	r6, #4294967295
 800fde8:	e7eb      	b.n	800fdc2 <_strtoul_l.isra.0+0x8e>
 800fdea:	1c73      	adds	r3, r6, #1
 800fdec:	d106      	bne.n	800fdfc <_strtoul_l.isra.0+0xc8>
 800fdee:	2322      	movs	r3, #34	@ 0x22
 800fdf0:	f8ce 3000 	str.w	r3, [lr]
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	b932      	cbnz	r2, 800fe06 <_strtoul_l.isra.0+0xd2>
 800fdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdfc:	b107      	cbz	r7, 800fe00 <_strtoul_l.isra.0+0xcc>
 800fdfe:	4240      	negs	r0, r0
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	d0f9      	beq.n	800fdf8 <_strtoul_l.isra.0+0xc4>
 800fe04:	b106      	cbz	r6, 800fe08 <_strtoul_l.isra.0+0xd4>
 800fe06:	1e69      	subs	r1, r5, #1
 800fe08:	6011      	str	r1, [r2, #0]
 800fe0a:	e7f5      	b.n	800fdf8 <_strtoul_l.isra.0+0xc4>
 800fe0c:	08011e71 	.word	0x08011e71

0800fe10 <_strtoul_r>:
 800fe10:	f7ff bf90 	b.w	800fd34 <_strtoul_l.isra.0>

0800fe14 <strtoul>:
 800fe14:	4613      	mov	r3, r2
 800fe16:	460a      	mov	r2, r1
 800fe18:	4601      	mov	r1, r0
 800fe1a:	4802      	ldr	r0, [pc, #8]	@ (800fe24 <strtoul+0x10>)
 800fe1c:	6800      	ldr	r0, [r0, #0]
 800fe1e:	f7ff bf89 	b.w	800fd34 <_strtoul_l.isra.0>
 800fe22:	bf00      	nop
 800fe24:	200001a4 	.word	0x200001a4

0800fe28 <__ascii_wctomb>:
 800fe28:	4603      	mov	r3, r0
 800fe2a:	4608      	mov	r0, r1
 800fe2c:	b141      	cbz	r1, 800fe40 <__ascii_wctomb+0x18>
 800fe2e:	2aff      	cmp	r2, #255	@ 0xff
 800fe30:	d904      	bls.n	800fe3c <__ascii_wctomb+0x14>
 800fe32:	228a      	movs	r2, #138	@ 0x8a
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	f04f 30ff 	mov.w	r0, #4294967295
 800fe3a:	4770      	bx	lr
 800fe3c:	700a      	strb	r2, [r1, #0]
 800fe3e:	2001      	movs	r0, #1
 800fe40:	4770      	bx	lr

0800fe42 <__ssputs_r>:
 800fe42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe46:	688e      	ldr	r6, [r1, #8]
 800fe48:	461f      	mov	r7, r3
 800fe4a:	42be      	cmp	r6, r7
 800fe4c:	680b      	ldr	r3, [r1, #0]
 800fe4e:	4682      	mov	sl, r0
 800fe50:	460c      	mov	r4, r1
 800fe52:	4690      	mov	r8, r2
 800fe54:	d82d      	bhi.n	800feb2 <__ssputs_r+0x70>
 800fe56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe5a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe5e:	d026      	beq.n	800feae <__ssputs_r+0x6c>
 800fe60:	6965      	ldr	r5, [r4, #20]
 800fe62:	6909      	ldr	r1, [r1, #16]
 800fe64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe68:	eba3 0901 	sub.w	r9, r3, r1
 800fe6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe70:	1c7b      	adds	r3, r7, #1
 800fe72:	444b      	add	r3, r9
 800fe74:	106d      	asrs	r5, r5, #1
 800fe76:	429d      	cmp	r5, r3
 800fe78:	bf38      	it	cc
 800fe7a:	461d      	movcc	r5, r3
 800fe7c:	0553      	lsls	r3, r2, #21
 800fe7e:	d527      	bpl.n	800fed0 <__ssputs_r+0x8e>
 800fe80:	4629      	mov	r1, r5
 800fe82:	f7ff fa0f 	bl	800f2a4 <_malloc_r>
 800fe86:	4606      	mov	r6, r0
 800fe88:	b360      	cbz	r0, 800fee4 <__ssputs_r+0xa2>
 800fe8a:	6921      	ldr	r1, [r4, #16]
 800fe8c:	464a      	mov	r2, r9
 800fe8e:	f7fd ff78 	bl	800dd82 <memcpy>
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe9c:	81a3      	strh	r3, [r4, #12]
 800fe9e:	6126      	str	r6, [r4, #16]
 800fea0:	6165      	str	r5, [r4, #20]
 800fea2:	444e      	add	r6, r9
 800fea4:	eba5 0509 	sub.w	r5, r5, r9
 800fea8:	6026      	str	r6, [r4, #0]
 800feaa:	60a5      	str	r5, [r4, #8]
 800feac:	463e      	mov	r6, r7
 800feae:	42be      	cmp	r6, r7
 800feb0:	d900      	bls.n	800feb4 <__ssputs_r+0x72>
 800feb2:	463e      	mov	r6, r7
 800feb4:	6820      	ldr	r0, [r4, #0]
 800feb6:	4632      	mov	r2, r6
 800feb8:	4641      	mov	r1, r8
 800feba:	f7fc ff51 	bl	800cd60 <memmove>
 800febe:	68a3      	ldr	r3, [r4, #8]
 800fec0:	1b9b      	subs	r3, r3, r6
 800fec2:	60a3      	str	r3, [r4, #8]
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	4433      	add	r3, r6
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	2000      	movs	r0, #0
 800fecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fed0:	462a      	mov	r2, r5
 800fed2:	f001 f881 	bl	8010fd8 <_realloc_r>
 800fed6:	4606      	mov	r6, r0
 800fed8:	2800      	cmp	r0, #0
 800feda:	d1e0      	bne.n	800fe9e <__ssputs_r+0x5c>
 800fedc:	6921      	ldr	r1, [r4, #16]
 800fede:	4650      	mov	r0, sl
 800fee0:	f7fe fde6 	bl	800eab0 <_free_r>
 800fee4:	230c      	movs	r3, #12
 800fee6:	f8ca 3000 	str.w	r3, [sl]
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fef0:	81a3      	strh	r3, [r4, #12]
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	e7e9      	b.n	800fecc <__ssputs_r+0x8a>

0800fef8 <_svfiprintf_r>:
 800fef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fefc:	4698      	mov	r8, r3
 800fefe:	898b      	ldrh	r3, [r1, #12]
 800ff00:	061b      	lsls	r3, r3, #24
 800ff02:	b09d      	sub	sp, #116	@ 0x74
 800ff04:	4607      	mov	r7, r0
 800ff06:	460d      	mov	r5, r1
 800ff08:	4614      	mov	r4, r2
 800ff0a:	d510      	bpl.n	800ff2e <_svfiprintf_r+0x36>
 800ff0c:	690b      	ldr	r3, [r1, #16]
 800ff0e:	b973      	cbnz	r3, 800ff2e <_svfiprintf_r+0x36>
 800ff10:	2140      	movs	r1, #64	@ 0x40
 800ff12:	f7ff f9c7 	bl	800f2a4 <_malloc_r>
 800ff16:	6028      	str	r0, [r5, #0]
 800ff18:	6128      	str	r0, [r5, #16]
 800ff1a:	b930      	cbnz	r0, 800ff2a <_svfiprintf_r+0x32>
 800ff1c:	230c      	movs	r3, #12
 800ff1e:	603b      	str	r3, [r7, #0]
 800ff20:	f04f 30ff 	mov.w	r0, #4294967295
 800ff24:	b01d      	add	sp, #116	@ 0x74
 800ff26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff2a:	2340      	movs	r3, #64	@ 0x40
 800ff2c:	616b      	str	r3, [r5, #20]
 800ff2e:	2300      	movs	r3, #0
 800ff30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff32:	2320      	movs	r3, #32
 800ff34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff3c:	2330      	movs	r3, #48	@ 0x30
 800ff3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80100dc <_svfiprintf_r+0x1e4>
 800ff42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff46:	f04f 0901 	mov.w	r9, #1
 800ff4a:	4623      	mov	r3, r4
 800ff4c:	469a      	mov	sl, r3
 800ff4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff52:	b10a      	cbz	r2, 800ff58 <_svfiprintf_r+0x60>
 800ff54:	2a25      	cmp	r2, #37	@ 0x25
 800ff56:	d1f9      	bne.n	800ff4c <_svfiprintf_r+0x54>
 800ff58:	ebba 0b04 	subs.w	fp, sl, r4
 800ff5c:	d00b      	beq.n	800ff76 <_svfiprintf_r+0x7e>
 800ff5e:	465b      	mov	r3, fp
 800ff60:	4622      	mov	r2, r4
 800ff62:	4629      	mov	r1, r5
 800ff64:	4638      	mov	r0, r7
 800ff66:	f7ff ff6c 	bl	800fe42 <__ssputs_r>
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	f000 80a7 	beq.w	80100be <_svfiprintf_r+0x1c6>
 800ff70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff72:	445a      	add	r2, fp
 800ff74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff76:	f89a 3000 	ldrb.w	r3, [sl]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f000 809f 	beq.w	80100be <_svfiprintf_r+0x1c6>
 800ff80:	2300      	movs	r3, #0
 800ff82:	f04f 32ff 	mov.w	r2, #4294967295
 800ff86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff8a:	f10a 0a01 	add.w	sl, sl, #1
 800ff8e:	9304      	str	r3, [sp, #16]
 800ff90:	9307      	str	r3, [sp, #28]
 800ff92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff96:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff98:	4654      	mov	r4, sl
 800ff9a:	2205      	movs	r2, #5
 800ff9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffa0:	484e      	ldr	r0, [pc, #312]	@ (80100dc <_svfiprintf_r+0x1e4>)
 800ffa2:	f7f0 f92d 	bl	8000200 <memchr>
 800ffa6:	9a04      	ldr	r2, [sp, #16]
 800ffa8:	b9d8      	cbnz	r0, 800ffe2 <_svfiprintf_r+0xea>
 800ffaa:	06d0      	lsls	r0, r2, #27
 800ffac:	bf44      	itt	mi
 800ffae:	2320      	movmi	r3, #32
 800ffb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffb4:	0711      	lsls	r1, r2, #28
 800ffb6:	bf44      	itt	mi
 800ffb8:	232b      	movmi	r3, #43	@ 0x2b
 800ffba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffbe:	f89a 3000 	ldrb.w	r3, [sl]
 800ffc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffc4:	d015      	beq.n	800fff2 <_svfiprintf_r+0xfa>
 800ffc6:	9a07      	ldr	r2, [sp, #28]
 800ffc8:	4654      	mov	r4, sl
 800ffca:	2000      	movs	r0, #0
 800ffcc:	f04f 0c0a 	mov.w	ip, #10
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffd6:	3b30      	subs	r3, #48	@ 0x30
 800ffd8:	2b09      	cmp	r3, #9
 800ffda:	d94b      	bls.n	8010074 <_svfiprintf_r+0x17c>
 800ffdc:	b1b0      	cbz	r0, 801000c <_svfiprintf_r+0x114>
 800ffde:	9207      	str	r2, [sp, #28]
 800ffe0:	e014      	b.n	801000c <_svfiprintf_r+0x114>
 800ffe2:	eba0 0308 	sub.w	r3, r0, r8
 800ffe6:	fa09 f303 	lsl.w	r3, r9, r3
 800ffea:	4313      	orrs	r3, r2
 800ffec:	9304      	str	r3, [sp, #16]
 800ffee:	46a2      	mov	sl, r4
 800fff0:	e7d2      	b.n	800ff98 <_svfiprintf_r+0xa0>
 800fff2:	9b03      	ldr	r3, [sp, #12]
 800fff4:	1d19      	adds	r1, r3, #4
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	9103      	str	r1, [sp, #12]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	bfbb      	ittet	lt
 800fffe:	425b      	neglt	r3, r3
 8010000:	f042 0202 	orrlt.w	r2, r2, #2
 8010004:	9307      	strge	r3, [sp, #28]
 8010006:	9307      	strlt	r3, [sp, #28]
 8010008:	bfb8      	it	lt
 801000a:	9204      	strlt	r2, [sp, #16]
 801000c:	7823      	ldrb	r3, [r4, #0]
 801000e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010010:	d10a      	bne.n	8010028 <_svfiprintf_r+0x130>
 8010012:	7863      	ldrb	r3, [r4, #1]
 8010014:	2b2a      	cmp	r3, #42	@ 0x2a
 8010016:	d132      	bne.n	801007e <_svfiprintf_r+0x186>
 8010018:	9b03      	ldr	r3, [sp, #12]
 801001a:	1d1a      	adds	r2, r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	9203      	str	r2, [sp, #12]
 8010020:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010024:	3402      	adds	r4, #2
 8010026:	9305      	str	r3, [sp, #20]
 8010028:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80100ec <_svfiprintf_r+0x1f4>
 801002c:	7821      	ldrb	r1, [r4, #0]
 801002e:	2203      	movs	r2, #3
 8010030:	4650      	mov	r0, sl
 8010032:	f7f0 f8e5 	bl	8000200 <memchr>
 8010036:	b138      	cbz	r0, 8010048 <_svfiprintf_r+0x150>
 8010038:	9b04      	ldr	r3, [sp, #16]
 801003a:	eba0 000a 	sub.w	r0, r0, sl
 801003e:	2240      	movs	r2, #64	@ 0x40
 8010040:	4082      	lsls	r2, r0
 8010042:	4313      	orrs	r3, r2
 8010044:	3401      	adds	r4, #1
 8010046:	9304      	str	r3, [sp, #16]
 8010048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004c:	4824      	ldr	r0, [pc, #144]	@ (80100e0 <_svfiprintf_r+0x1e8>)
 801004e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010052:	2206      	movs	r2, #6
 8010054:	f7f0 f8d4 	bl	8000200 <memchr>
 8010058:	2800      	cmp	r0, #0
 801005a:	d036      	beq.n	80100ca <_svfiprintf_r+0x1d2>
 801005c:	4b21      	ldr	r3, [pc, #132]	@ (80100e4 <_svfiprintf_r+0x1ec>)
 801005e:	bb1b      	cbnz	r3, 80100a8 <_svfiprintf_r+0x1b0>
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	3307      	adds	r3, #7
 8010064:	f023 0307 	bic.w	r3, r3, #7
 8010068:	3308      	adds	r3, #8
 801006a:	9303      	str	r3, [sp, #12]
 801006c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801006e:	4433      	add	r3, r6
 8010070:	9309      	str	r3, [sp, #36]	@ 0x24
 8010072:	e76a      	b.n	800ff4a <_svfiprintf_r+0x52>
 8010074:	fb0c 3202 	mla	r2, ip, r2, r3
 8010078:	460c      	mov	r4, r1
 801007a:	2001      	movs	r0, #1
 801007c:	e7a8      	b.n	800ffd0 <_svfiprintf_r+0xd8>
 801007e:	2300      	movs	r3, #0
 8010080:	3401      	adds	r4, #1
 8010082:	9305      	str	r3, [sp, #20]
 8010084:	4619      	mov	r1, r3
 8010086:	f04f 0c0a 	mov.w	ip, #10
 801008a:	4620      	mov	r0, r4
 801008c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010090:	3a30      	subs	r2, #48	@ 0x30
 8010092:	2a09      	cmp	r2, #9
 8010094:	d903      	bls.n	801009e <_svfiprintf_r+0x1a6>
 8010096:	2b00      	cmp	r3, #0
 8010098:	d0c6      	beq.n	8010028 <_svfiprintf_r+0x130>
 801009a:	9105      	str	r1, [sp, #20]
 801009c:	e7c4      	b.n	8010028 <_svfiprintf_r+0x130>
 801009e:	fb0c 2101 	mla	r1, ip, r1, r2
 80100a2:	4604      	mov	r4, r0
 80100a4:	2301      	movs	r3, #1
 80100a6:	e7f0      	b.n	801008a <_svfiprintf_r+0x192>
 80100a8:	ab03      	add	r3, sp, #12
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	462a      	mov	r2, r5
 80100ae:	4b0e      	ldr	r3, [pc, #56]	@ (80100e8 <_svfiprintf_r+0x1f0>)
 80100b0:	a904      	add	r1, sp, #16
 80100b2:	4638      	mov	r0, r7
 80100b4:	f7fc f806 	bl	800c0c4 <_printf_float>
 80100b8:	1c42      	adds	r2, r0, #1
 80100ba:	4606      	mov	r6, r0
 80100bc:	d1d6      	bne.n	801006c <_svfiprintf_r+0x174>
 80100be:	89ab      	ldrh	r3, [r5, #12]
 80100c0:	065b      	lsls	r3, r3, #25
 80100c2:	f53f af2d 	bmi.w	800ff20 <_svfiprintf_r+0x28>
 80100c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100c8:	e72c      	b.n	800ff24 <_svfiprintf_r+0x2c>
 80100ca:	ab03      	add	r3, sp, #12
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	462a      	mov	r2, r5
 80100d0:	4b05      	ldr	r3, [pc, #20]	@ (80100e8 <_svfiprintf_r+0x1f0>)
 80100d2:	a904      	add	r1, sp, #16
 80100d4:	4638      	mov	r0, r7
 80100d6:	f7fc fa8d 	bl	800c5f4 <_printf_i>
 80100da:	e7ed      	b.n	80100b8 <_svfiprintf_r+0x1c0>
 80100dc:	08011d77 	.word	0x08011d77
 80100e0:	08011d81 	.word	0x08011d81
 80100e4:	0800c0c5 	.word	0x0800c0c5
 80100e8:	0800fe43 	.word	0x0800fe43
 80100ec:	08011d7d 	.word	0x08011d7d

080100f0 <_sungetc_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	1c4b      	adds	r3, r1, #1
 80100f4:	4614      	mov	r4, r2
 80100f6:	d103      	bne.n	8010100 <_sungetc_r+0x10>
 80100f8:	f04f 35ff 	mov.w	r5, #4294967295
 80100fc:	4628      	mov	r0, r5
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
 8010100:	8993      	ldrh	r3, [r2, #12]
 8010102:	f023 0320 	bic.w	r3, r3, #32
 8010106:	8193      	strh	r3, [r2, #12]
 8010108:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801010a:	6852      	ldr	r2, [r2, #4]
 801010c:	b2cd      	uxtb	r5, r1
 801010e:	b18b      	cbz	r3, 8010134 <_sungetc_r+0x44>
 8010110:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010112:	4293      	cmp	r3, r2
 8010114:	dd08      	ble.n	8010128 <_sungetc_r+0x38>
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	1e5a      	subs	r2, r3, #1
 801011a:	6022      	str	r2, [r4, #0]
 801011c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010120:	6863      	ldr	r3, [r4, #4]
 8010122:	3301      	adds	r3, #1
 8010124:	6063      	str	r3, [r4, #4]
 8010126:	e7e9      	b.n	80100fc <_sungetc_r+0xc>
 8010128:	4621      	mov	r1, r4
 801012a:	f000 fdce 	bl	8010cca <__submore>
 801012e:	2800      	cmp	r0, #0
 8010130:	d0f1      	beq.n	8010116 <_sungetc_r+0x26>
 8010132:	e7e1      	b.n	80100f8 <_sungetc_r+0x8>
 8010134:	6921      	ldr	r1, [r4, #16]
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	b151      	cbz	r1, 8010150 <_sungetc_r+0x60>
 801013a:	4299      	cmp	r1, r3
 801013c:	d208      	bcs.n	8010150 <_sungetc_r+0x60>
 801013e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010142:	42a9      	cmp	r1, r5
 8010144:	d104      	bne.n	8010150 <_sungetc_r+0x60>
 8010146:	3b01      	subs	r3, #1
 8010148:	3201      	adds	r2, #1
 801014a:	6023      	str	r3, [r4, #0]
 801014c:	6062      	str	r2, [r4, #4]
 801014e:	e7d5      	b.n	80100fc <_sungetc_r+0xc>
 8010150:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010154:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010158:	6363      	str	r3, [r4, #52]	@ 0x34
 801015a:	2303      	movs	r3, #3
 801015c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801015e:	4623      	mov	r3, r4
 8010160:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	2301      	movs	r3, #1
 8010168:	e7dc      	b.n	8010124 <_sungetc_r+0x34>

0801016a <__ssrefill_r>:
 801016a:	b510      	push	{r4, lr}
 801016c:	460c      	mov	r4, r1
 801016e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010170:	b169      	cbz	r1, 801018e <__ssrefill_r+0x24>
 8010172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010176:	4299      	cmp	r1, r3
 8010178:	d001      	beq.n	801017e <__ssrefill_r+0x14>
 801017a:	f7fe fc99 	bl	800eab0 <_free_r>
 801017e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010180:	6063      	str	r3, [r4, #4]
 8010182:	2000      	movs	r0, #0
 8010184:	6360      	str	r0, [r4, #52]	@ 0x34
 8010186:	b113      	cbz	r3, 801018e <__ssrefill_r+0x24>
 8010188:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801018a:	6023      	str	r3, [r4, #0]
 801018c:	bd10      	pop	{r4, pc}
 801018e:	6923      	ldr	r3, [r4, #16]
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	2300      	movs	r3, #0
 8010194:	6063      	str	r3, [r4, #4]
 8010196:	89a3      	ldrh	r3, [r4, #12]
 8010198:	f043 0320 	orr.w	r3, r3, #32
 801019c:	81a3      	strh	r3, [r4, #12]
 801019e:	f04f 30ff 	mov.w	r0, #4294967295
 80101a2:	e7f3      	b.n	801018c <__ssrefill_r+0x22>

080101a4 <__ssvfiscanf_r>:
 80101a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a8:	460c      	mov	r4, r1
 80101aa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80101ae:	2100      	movs	r1, #0
 80101b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80101b4:	49a6      	ldr	r1, [pc, #664]	@ (8010450 <__ssvfiscanf_r+0x2ac>)
 80101b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80101b8:	f10d 0804 	add.w	r8, sp, #4
 80101bc:	49a5      	ldr	r1, [pc, #660]	@ (8010454 <__ssvfiscanf_r+0x2b0>)
 80101be:	4fa6      	ldr	r7, [pc, #664]	@ (8010458 <__ssvfiscanf_r+0x2b4>)
 80101c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80101c4:	4606      	mov	r6, r0
 80101c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	f892 9000 	ldrb.w	r9, [r2]
 80101ce:	f1b9 0f00 	cmp.w	r9, #0
 80101d2:	f000 8158 	beq.w	8010486 <__ssvfiscanf_r+0x2e2>
 80101d6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80101da:	f013 0308 	ands.w	r3, r3, #8
 80101de:	f102 0501 	add.w	r5, r2, #1
 80101e2:	d019      	beq.n	8010218 <__ssvfiscanf_r+0x74>
 80101e4:	6863      	ldr	r3, [r4, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	dd0f      	ble.n	801020a <__ssvfiscanf_r+0x66>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	781a      	ldrb	r2, [r3, #0]
 80101ee:	5cba      	ldrb	r2, [r7, r2]
 80101f0:	0712      	lsls	r2, r2, #28
 80101f2:	d401      	bmi.n	80101f8 <__ssvfiscanf_r+0x54>
 80101f4:	462a      	mov	r2, r5
 80101f6:	e7e8      	b.n	80101ca <__ssvfiscanf_r+0x26>
 80101f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80101fa:	3201      	adds	r2, #1
 80101fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80101fe:	6862      	ldr	r2, [r4, #4]
 8010200:	3301      	adds	r3, #1
 8010202:	3a01      	subs	r2, #1
 8010204:	6062      	str	r2, [r4, #4]
 8010206:	6023      	str	r3, [r4, #0]
 8010208:	e7ec      	b.n	80101e4 <__ssvfiscanf_r+0x40>
 801020a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801020c:	4621      	mov	r1, r4
 801020e:	4630      	mov	r0, r6
 8010210:	4798      	blx	r3
 8010212:	2800      	cmp	r0, #0
 8010214:	d0e9      	beq.n	80101ea <__ssvfiscanf_r+0x46>
 8010216:	e7ed      	b.n	80101f4 <__ssvfiscanf_r+0x50>
 8010218:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801021c:	f040 8085 	bne.w	801032a <__ssvfiscanf_r+0x186>
 8010220:	9341      	str	r3, [sp, #260]	@ 0x104
 8010222:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010224:	7853      	ldrb	r3, [r2, #1]
 8010226:	2b2a      	cmp	r3, #42	@ 0x2a
 8010228:	bf02      	ittt	eq
 801022a:	2310      	moveq	r3, #16
 801022c:	1c95      	addeq	r5, r2, #2
 801022e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010230:	220a      	movs	r2, #10
 8010232:	46aa      	mov	sl, r5
 8010234:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010238:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801023c:	2b09      	cmp	r3, #9
 801023e:	d91e      	bls.n	801027e <__ssvfiscanf_r+0xda>
 8010240:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801045c <__ssvfiscanf_r+0x2b8>
 8010244:	2203      	movs	r2, #3
 8010246:	4658      	mov	r0, fp
 8010248:	f7ef ffda 	bl	8000200 <memchr>
 801024c:	b138      	cbz	r0, 801025e <__ssvfiscanf_r+0xba>
 801024e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010250:	eba0 000b 	sub.w	r0, r0, fp
 8010254:	2301      	movs	r3, #1
 8010256:	4083      	lsls	r3, r0
 8010258:	4313      	orrs	r3, r2
 801025a:	9341      	str	r3, [sp, #260]	@ 0x104
 801025c:	4655      	mov	r5, sl
 801025e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010262:	2b78      	cmp	r3, #120	@ 0x78
 8010264:	d806      	bhi.n	8010274 <__ssvfiscanf_r+0xd0>
 8010266:	2b57      	cmp	r3, #87	@ 0x57
 8010268:	d810      	bhi.n	801028c <__ssvfiscanf_r+0xe8>
 801026a:	2b25      	cmp	r3, #37	@ 0x25
 801026c:	d05d      	beq.n	801032a <__ssvfiscanf_r+0x186>
 801026e:	d857      	bhi.n	8010320 <__ssvfiscanf_r+0x17c>
 8010270:	2b00      	cmp	r3, #0
 8010272:	d075      	beq.n	8010360 <__ssvfiscanf_r+0x1bc>
 8010274:	2303      	movs	r3, #3
 8010276:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010278:	230a      	movs	r3, #10
 801027a:	9342      	str	r3, [sp, #264]	@ 0x108
 801027c:	e088      	b.n	8010390 <__ssvfiscanf_r+0x1ec>
 801027e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010280:	fb02 1103 	mla	r1, r2, r3, r1
 8010284:	3930      	subs	r1, #48	@ 0x30
 8010286:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010288:	4655      	mov	r5, sl
 801028a:	e7d2      	b.n	8010232 <__ssvfiscanf_r+0x8e>
 801028c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010290:	2a20      	cmp	r2, #32
 8010292:	d8ef      	bhi.n	8010274 <__ssvfiscanf_r+0xd0>
 8010294:	a101      	add	r1, pc, #4	@ (adr r1, 801029c <__ssvfiscanf_r+0xf8>)
 8010296:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801029a:	bf00      	nop
 801029c:	0801036f 	.word	0x0801036f
 80102a0:	08010275 	.word	0x08010275
 80102a4:	08010275 	.word	0x08010275
 80102a8:	080103c9 	.word	0x080103c9
 80102ac:	08010275 	.word	0x08010275
 80102b0:	08010275 	.word	0x08010275
 80102b4:	08010275 	.word	0x08010275
 80102b8:	08010275 	.word	0x08010275
 80102bc:	08010275 	.word	0x08010275
 80102c0:	08010275 	.word	0x08010275
 80102c4:	08010275 	.word	0x08010275
 80102c8:	080103df 	.word	0x080103df
 80102cc:	080103c5 	.word	0x080103c5
 80102d0:	08010327 	.word	0x08010327
 80102d4:	08010327 	.word	0x08010327
 80102d8:	08010327 	.word	0x08010327
 80102dc:	08010275 	.word	0x08010275
 80102e0:	08010381 	.word	0x08010381
 80102e4:	08010275 	.word	0x08010275
 80102e8:	08010275 	.word	0x08010275
 80102ec:	08010275 	.word	0x08010275
 80102f0:	08010275 	.word	0x08010275
 80102f4:	080103ef 	.word	0x080103ef
 80102f8:	08010389 	.word	0x08010389
 80102fc:	08010367 	.word	0x08010367
 8010300:	08010275 	.word	0x08010275
 8010304:	08010275 	.word	0x08010275
 8010308:	080103eb 	.word	0x080103eb
 801030c:	08010275 	.word	0x08010275
 8010310:	080103c5 	.word	0x080103c5
 8010314:	08010275 	.word	0x08010275
 8010318:	08010275 	.word	0x08010275
 801031c:	0801036f 	.word	0x0801036f
 8010320:	3b45      	subs	r3, #69	@ 0x45
 8010322:	2b02      	cmp	r3, #2
 8010324:	d8a6      	bhi.n	8010274 <__ssvfiscanf_r+0xd0>
 8010326:	2305      	movs	r3, #5
 8010328:	e031      	b.n	801038e <__ssvfiscanf_r+0x1ea>
 801032a:	6863      	ldr	r3, [r4, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	dd0d      	ble.n	801034c <__ssvfiscanf_r+0x1a8>
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	781a      	ldrb	r2, [r3, #0]
 8010334:	454a      	cmp	r2, r9
 8010336:	f040 80a6 	bne.w	8010486 <__ssvfiscanf_r+0x2e2>
 801033a:	3301      	adds	r3, #1
 801033c:	6862      	ldr	r2, [r4, #4]
 801033e:	6023      	str	r3, [r4, #0]
 8010340:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010342:	3a01      	subs	r2, #1
 8010344:	3301      	adds	r3, #1
 8010346:	6062      	str	r2, [r4, #4]
 8010348:	9345      	str	r3, [sp, #276]	@ 0x114
 801034a:	e753      	b.n	80101f4 <__ssvfiscanf_r+0x50>
 801034c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801034e:	4621      	mov	r1, r4
 8010350:	4630      	mov	r0, r6
 8010352:	4798      	blx	r3
 8010354:	2800      	cmp	r0, #0
 8010356:	d0eb      	beq.n	8010330 <__ssvfiscanf_r+0x18c>
 8010358:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801035a:	2800      	cmp	r0, #0
 801035c:	f040 808b 	bne.w	8010476 <__ssvfiscanf_r+0x2d2>
 8010360:	f04f 30ff 	mov.w	r0, #4294967295
 8010364:	e08b      	b.n	801047e <__ssvfiscanf_r+0x2da>
 8010366:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010368:	f042 0220 	orr.w	r2, r2, #32
 801036c:	9241      	str	r2, [sp, #260]	@ 0x104
 801036e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010374:	9241      	str	r2, [sp, #260]	@ 0x104
 8010376:	2210      	movs	r2, #16
 8010378:	2b6e      	cmp	r3, #110	@ 0x6e
 801037a:	9242      	str	r2, [sp, #264]	@ 0x108
 801037c:	d902      	bls.n	8010384 <__ssvfiscanf_r+0x1e0>
 801037e:	e005      	b.n	801038c <__ssvfiscanf_r+0x1e8>
 8010380:	2300      	movs	r3, #0
 8010382:	9342      	str	r3, [sp, #264]	@ 0x108
 8010384:	2303      	movs	r3, #3
 8010386:	e002      	b.n	801038e <__ssvfiscanf_r+0x1ea>
 8010388:	2308      	movs	r3, #8
 801038a:	9342      	str	r3, [sp, #264]	@ 0x108
 801038c:	2304      	movs	r3, #4
 801038e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010390:	6863      	ldr	r3, [r4, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	dd39      	ble.n	801040a <__ssvfiscanf_r+0x266>
 8010396:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010398:	0659      	lsls	r1, r3, #25
 801039a:	d404      	bmi.n	80103a6 <__ssvfiscanf_r+0x202>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	781a      	ldrb	r2, [r3, #0]
 80103a0:	5cba      	ldrb	r2, [r7, r2]
 80103a2:	0712      	lsls	r2, r2, #28
 80103a4:	d438      	bmi.n	8010418 <__ssvfiscanf_r+0x274>
 80103a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	dc47      	bgt.n	801043c <__ssvfiscanf_r+0x298>
 80103ac:	466b      	mov	r3, sp
 80103ae:	4622      	mov	r2, r4
 80103b0:	a941      	add	r1, sp, #260	@ 0x104
 80103b2:	4630      	mov	r0, r6
 80103b4:	f000 f9ae 	bl	8010714 <_scanf_chars>
 80103b8:	2801      	cmp	r0, #1
 80103ba:	d064      	beq.n	8010486 <__ssvfiscanf_r+0x2e2>
 80103bc:	2802      	cmp	r0, #2
 80103be:	f47f af19 	bne.w	80101f4 <__ssvfiscanf_r+0x50>
 80103c2:	e7c9      	b.n	8010358 <__ssvfiscanf_r+0x1b4>
 80103c4:	220a      	movs	r2, #10
 80103c6:	e7d7      	b.n	8010378 <__ssvfiscanf_r+0x1d4>
 80103c8:	4629      	mov	r1, r5
 80103ca:	4640      	mov	r0, r8
 80103cc:	f000 fc44 	bl	8010c58 <__sccl>
 80103d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80103d8:	4605      	mov	r5, r0
 80103da:	2301      	movs	r3, #1
 80103dc:	e7d7      	b.n	801038e <__ssvfiscanf_r+0x1ea>
 80103de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80103e6:	2300      	movs	r3, #0
 80103e8:	e7d1      	b.n	801038e <__ssvfiscanf_r+0x1ea>
 80103ea:	2302      	movs	r3, #2
 80103ec:	e7cf      	b.n	801038e <__ssvfiscanf_r+0x1ea>
 80103ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80103f0:	06c3      	lsls	r3, r0, #27
 80103f2:	f53f aeff 	bmi.w	80101f4 <__ssvfiscanf_r+0x50>
 80103f6:	9b00      	ldr	r3, [sp, #0]
 80103f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80103fa:	1d19      	adds	r1, r3, #4
 80103fc:	9100      	str	r1, [sp, #0]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	07c0      	lsls	r0, r0, #31
 8010402:	bf4c      	ite	mi
 8010404:	801a      	strhmi	r2, [r3, #0]
 8010406:	601a      	strpl	r2, [r3, #0]
 8010408:	e6f4      	b.n	80101f4 <__ssvfiscanf_r+0x50>
 801040a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801040c:	4621      	mov	r1, r4
 801040e:	4630      	mov	r0, r6
 8010410:	4798      	blx	r3
 8010412:	2800      	cmp	r0, #0
 8010414:	d0bf      	beq.n	8010396 <__ssvfiscanf_r+0x1f2>
 8010416:	e79f      	b.n	8010358 <__ssvfiscanf_r+0x1b4>
 8010418:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801041a:	3201      	adds	r2, #1
 801041c:	9245      	str	r2, [sp, #276]	@ 0x114
 801041e:	6862      	ldr	r2, [r4, #4]
 8010420:	3a01      	subs	r2, #1
 8010422:	2a00      	cmp	r2, #0
 8010424:	6062      	str	r2, [r4, #4]
 8010426:	dd02      	ble.n	801042e <__ssvfiscanf_r+0x28a>
 8010428:	3301      	adds	r3, #1
 801042a:	6023      	str	r3, [r4, #0]
 801042c:	e7b6      	b.n	801039c <__ssvfiscanf_r+0x1f8>
 801042e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010430:	4621      	mov	r1, r4
 8010432:	4630      	mov	r0, r6
 8010434:	4798      	blx	r3
 8010436:	2800      	cmp	r0, #0
 8010438:	d0b0      	beq.n	801039c <__ssvfiscanf_r+0x1f8>
 801043a:	e78d      	b.n	8010358 <__ssvfiscanf_r+0x1b4>
 801043c:	2b04      	cmp	r3, #4
 801043e:	dc0f      	bgt.n	8010460 <__ssvfiscanf_r+0x2bc>
 8010440:	466b      	mov	r3, sp
 8010442:	4622      	mov	r2, r4
 8010444:	a941      	add	r1, sp, #260	@ 0x104
 8010446:	4630      	mov	r0, r6
 8010448:	f000 f9be 	bl	80107c8 <_scanf_i>
 801044c:	e7b4      	b.n	80103b8 <__ssvfiscanf_r+0x214>
 801044e:	bf00      	nop
 8010450:	080100f1 	.word	0x080100f1
 8010454:	0801016b 	.word	0x0801016b
 8010458:	08011e71 	.word	0x08011e71
 801045c:	08011d7d 	.word	0x08011d7d
 8010460:	4b0a      	ldr	r3, [pc, #40]	@ (801048c <__ssvfiscanf_r+0x2e8>)
 8010462:	2b00      	cmp	r3, #0
 8010464:	f43f aec6 	beq.w	80101f4 <__ssvfiscanf_r+0x50>
 8010468:	466b      	mov	r3, sp
 801046a:	4622      	mov	r2, r4
 801046c:	a941      	add	r1, sp, #260	@ 0x104
 801046e:	4630      	mov	r0, r6
 8010470:	f3af 8000 	nop.w
 8010474:	e7a0      	b.n	80103b8 <__ssvfiscanf_r+0x214>
 8010476:	89a3      	ldrh	r3, [r4, #12]
 8010478:	065b      	lsls	r3, r3, #25
 801047a:	f53f af71 	bmi.w	8010360 <__ssvfiscanf_r+0x1bc>
 801047e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8010482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010486:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010488:	e7f9      	b.n	801047e <__ssvfiscanf_r+0x2da>
 801048a:	bf00      	nop
 801048c:	00000000 	.word	0x00000000

08010490 <__sfputc_r>:
 8010490:	6893      	ldr	r3, [r2, #8]
 8010492:	3b01      	subs	r3, #1
 8010494:	2b00      	cmp	r3, #0
 8010496:	b410      	push	{r4}
 8010498:	6093      	str	r3, [r2, #8]
 801049a:	da08      	bge.n	80104ae <__sfputc_r+0x1e>
 801049c:	6994      	ldr	r4, [r2, #24]
 801049e:	42a3      	cmp	r3, r4
 80104a0:	db01      	blt.n	80104a6 <__sfputc_r+0x16>
 80104a2:	290a      	cmp	r1, #10
 80104a4:	d103      	bne.n	80104ae <__sfputc_r+0x1e>
 80104a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104aa:	f7fc bbc4 	b.w	800cc36 <__swbuf_r>
 80104ae:	6813      	ldr	r3, [r2, #0]
 80104b0:	1c58      	adds	r0, r3, #1
 80104b2:	6010      	str	r0, [r2, #0]
 80104b4:	7019      	strb	r1, [r3, #0]
 80104b6:	4608      	mov	r0, r1
 80104b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104bc:	4770      	bx	lr

080104be <__sfputs_r>:
 80104be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104c0:	4606      	mov	r6, r0
 80104c2:	460f      	mov	r7, r1
 80104c4:	4614      	mov	r4, r2
 80104c6:	18d5      	adds	r5, r2, r3
 80104c8:	42ac      	cmp	r4, r5
 80104ca:	d101      	bne.n	80104d0 <__sfputs_r+0x12>
 80104cc:	2000      	movs	r0, #0
 80104ce:	e007      	b.n	80104e0 <__sfputs_r+0x22>
 80104d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104d4:	463a      	mov	r2, r7
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7ff ffda 	bl	8010490 <__sfputc_r>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d1f3      	bne.n	80104c8 <__sfputs_r+0xa>
 80104e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104e4 <_vfiprintf_r>:
 80104e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	460d      	mov	r5, r1
 80104ea:	b09d      	sub	sp, #116	@ 0x74
 80104ec:	4614      	mov	r4, r2
 80104ee:	4698      	mov	r8, r3
 80104f0:	4606      	mov	r6, r0
 80104f2:	b118      	cbz	r0, 80104fc <_vfiprintf_r+0x18>
 80104f4:	6a03      	ldr	r3, [r0, #32]
 80104f6:	b90b      	cbnz	r3, 80104fc <_vfiprintf_r+0x18>
 80104f8:	f7fc fa26 	bl	800c948 <__sinit>
 80104fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104fe:	07d9      	lsls	r1, r3, #31
 8010500:	d405      	bmi.n	801050e <_vfiprintf_r+0x2a>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	059a      	lsls	r2, r3, #22
 8010506:	d402      	bmi.n	801050e <_vfiprintf_r+0x2a>
 8010508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801050a:	f7fd fc2f 	bl	800dd6c <__retarget_lock_acquire_recursive>
 801050e:	89ab      	ldrh	r3, [r5, #12]
 8010510:	071b      	lsls	r3, r3, #28
 8010512:	d501      	bpl.n	8010518 <_vfiprintf_r+0x34>
 8010514:	692b      	ldr	r3, [r5, #16]
 8010516:	b99b      	cbnz	r3, 8010540 <_vfiprintf_r+0x5c>
 8010518:	4629      	mov	r1, r5
 801051a:	4630      	mov	r0, r6
 801051c:	f7fc fbca 	bl	800ccb4 <__swsetup_r>
 8010520:	b170      	cbz	r0, 8010540 <_vfiprintf_r+0x5c>
 8010522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010524:	07dc      	lsls	r4, r3, #31
 8010526:	d504      	bpl.n	8010532 <_vfiprintf_r+0x4e>
 8010528:	f04f 30ff 	mov.w	r0, #4294967295
 801052c:	b01d      	add	sp, #116	@ 0x74
 801052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010532:	89ab      	ldrh	r3, [r5, #12]
 8010534:	0598      	lsls	r0, r3, #22
 8010536:	d4f7      	bmi.n	8010528 <_vfiprintf_r+0x44>
 8010538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801053a:	f7fd fc19 	bl	800dd70 <__retarget_lock_release_recursive>
 801053e:	e7f3      	b.n	8010528 <_vfiprintf_r+0x44>
 8010540:	2300      	movs	r3, #0
 8010542:	9309      	str	r3, [sp, #36]	@ 0x24
 8010544:	2320      	movs	r3, #32
 8010546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801054a:	f8cd 800c 	str.w	r8, [sp, #12]
 801054e:	2330      	movs	r3, #48	@ 0x30
 8010550:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010700 <_vfiprintf_r+0x21c>
 8010554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010558:	f04f 0901 	mov.w	r9, #1
 801055c:	4623      	mov	r3, r4
 801055e:	469a      	mov	sl, r3
 8010560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010564:	b10a      	cbz	r2, 801056a <_vfiprintf_r+0x86>
 8010566:	2a25      	cmp	r2, #37	@ 0x25
 8010568:	d1f9      	bne.n	801055e <_vfiprintf_r+0x7a>
 801056a:	ebba 0b04 	subs.w	fp, sl, r4
 801056e:	d00b      	beq.n	8010588 <_vfiprintf_r+0xa4>
 8010570:	465b      	mov	r3, fp
 8010572:	4622      	mov	r2, r4
 8010574:	4629      	mov	r1, r5
 8010576:	4630      	mov	r0, r6
 8010578:	f7ff ffa1 	bl	80104be <__sfputs_r>
 801057c:	3001      	adds	r0, #1
 801057e:	f000 80a7 	beq.w	80106d0 <_vfiprintf_r+0x1ec>
 8010582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010584:	445a      	add	r2, fp
 8010586:	9209      	str	r2, [sp, #36]	@ 0x24
 8010588:	f89a 3000 	ldrb.w	r3, [sl]
 801058c:	2b00      	cmp	r3, #0
 801058e:	f000 809f 	beq.w	80106d0 <_vfiprintf_r+0x1ec>
 8010592:	2300      	movs	r3, #0
 8010594:	f04f 32ff 	mov.w	r2, #4294967295
 8010598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801059c:	f10a 0a01 	add.w	sl, sl, #1
 80105a0:	9304      	str	r3, [sp, #16]
 80105a2:	9307      	str	r3, [sp, #28]
 80105a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80105aa:	4654      	mov	r4, sl
 80105ac:	2205      	movs	r2, #5
 80105ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b2:	4853      	ldr	r0, [pc, #332]	@ (8010700 <_vfiprintf_r+0x21c>)
 80105b4:	f7ef fe24 	bl	8000200 <memchr>
 80105b8:	9a04      	ldr	r2, [sp, #16]
 80105ba:	b9d8      	cbnz	r0, 80105f4 <_vfiprintf_r+0x110>
 80105bc:	06d1      	lsls	r1, r2, #27
 80105be:	bf44      	itt	mi
 80105c0:	2320      	movmi	r3, #32
 80105c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105c6:	0713      	lsls	r3, r2, #28
 80105c8:	bf44      	itt	mi
 80105ca:	232b      	movmi	r3, #43	@ 0x2b
 80105cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105d0:	f89a 3000 	ldrb.w	r3, [sl]
 80105d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80105d6:	d015      	beq.n	8010604 <_vfiprintf_r+0x120>
 80105d8:	9a07      	ldr	r2, [sp, #28]
 80105da:	4654      	mov	r4, sl
 80105dc:	2000      	movs	r0, #0
 80105de:	f04f 0c0a 	mov.w	ip, #10
 80105e2:	4621      	mov	r1, r4
 80105e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105e8:	3b30      	subs	r3, #48	@ 0x30
 80105ea:	2b09      	cmp	r3, #9
 80105ec:	d94b      	bls.n	8010686 <_vfiprintf_r+0x1a2>
 80105ee:	b1b0      	cbz	r0, 801061e <_vfiprintf_r+0x13a>
 80105f0:	9207      	str	r2, [sp, #28]
 80105f2:	e014      	b.n	801061e <_vfiprintf_r+0x13a>
 80105f4:	eba0 0308 	sub.w	r3, r0, r8
 80105f8:	fa09 f303 	lsl.w	r3, r9, r3
 80105fc:	4313      	orrs	r3, r2
 80105fe:	9304      	str	r3, [sp, #16]
 8010600:	46a2      	mov	sl, r4
 8010602:	e7d2      	b.n	80105aa <_vfiprintf_r+0xc6>
 8010604:	9b03      	ldr	r3, [sp, #12]
 8010606:	1d19      	adds	r1, r3, #4
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	9103      	str	r1, [sp, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	bfbb      	ittet	lt
 8010610:	425b      	neglt	r3, r3
 8010612:	f042 0202 	orrlt.w	r2, r2, #2
 8010616:	9307      	strge	r3, [sp, #28]
 8010618:	9307      	strlt	r3, [sp, #28]
 801061a:	bfb8      	it	lt
 801061c:	9204      	strlt	r2, [sp, #16]
 801061e:	7823      	ldrb	r3, [r4, #0]
 8010620:	2b2e      	cmp	r3, #46	@ 0x2e
 8010622:	d10a      	bne.n	801063a <_vfiprintf_r+0x156>
 8010624:	7863      	ldrb	r3, [r4, #1]
 8010626:	2b2a      	cmp	r3, #42	@ 0x2a
 8010628:	d132      	bne.n	8010690 <_vfiprintf_r+0x1ac>
 801062a:	9b03      	ldr	r3, [sp, #12]
 801062c:	1d1a      	adds	r2, r3, #4
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	9203      	str	r2, [sp, #12]
 8010632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010636:	3402      	adds	r4, #2
 8010638:	9305      	str	r3, [sp, #20]
 801063a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010710 <_vfiprintf_r+0x22c>
 801063e:	7821      	ldrb	r1, [r4, #0]
 8010640:	2203      	movs	r2, #3
 8010642:	4650      	mov	r0, sl
 8010644:	f7ef fddc 	bl	8000200 <memchr>
 8010648:	b138      	cbz	r0, 801065a <_vfiprintf_r+0x176>
 801064a:	9b04      	ldr	r3, [sp, #16]
 801064c:	eba0 000a 	sub.w	r0, r0, sl
 8010650:	2240      	movs	r2, #64	@ 0x40
 8010652:	4082      	lsls	r2, r0
 8010654:	4313      	orrs	r3, r2
 8010656:	3401      	adds	r4, #1
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801065e:	4829      	ldr	r0, [pc, #164]	@ (8010704 <_vfiprintf_r+0x220>)
 8010660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010664:	2206      	movs	r2, #6
 8010666:	f7ef fdcb 	bl	8000200 <memchr>
 801066a:	2800      	cmp	r0, #0
 801066c:	d03f      	beq.n	80106ee <_vfiprintf_r+0x20a>
 801066e:	4b26      	ldr	r3, [pc, #152]	@ (8010708 <_vfiprintf_r+0x224>)
 8010670:	bb1b      	cbnz	r3, 80106ba <_vfiprintf_r+0x1d6>
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	3307      	adds	r3, #7
 8010676:	f023 0307 	bic.w	r3, r3, #7
 801067a:	3308      	adds	r3, #8
 801067c:	9303      	str	r3, [sp, #12]
 801067e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010680:	443b      	add	r3, r7
 8010682:	9309      	str	r3, [sp, #36]	@ 0x24
 8010684:	e76a      	b.n	801055c <_vfiprintf_r+0x78>
 8010686:	fb0c 3202 	mla	r2, ip, r2, r3
 801068a:	460c      	mov	r4, r1
 801068c:	2001      	movs	r0, #1
 801068e:	e7a8      	b.n	80105e2 <_vfiprintf_r+0xfe>
 8010690:	2300      	movs	r3, #0
 8010692:	3401      	adds	r4, #1
 8010694:	9305      	str	r3, [sp, #20]
 8010696:	4619      	mov	r1, r3
 8010698:	f04f 0c0a 	mov.w	ip, #10
 801069c:	4620      	mov	r0, r4
 801069e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106a2:	3a30      	subs	r2, #48	@ 0x30
 80106a4:	2a09      	cmp	r2, #9
 80106a6:	d903      	bls.n	80106b0 <_vfiprintf_r+0x1cc>
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d0c6      	beq.n	801063a <_vfiprintf_r+0x156>
 80106ac:	9105      	str	r1, [sp, #20]
 80106ae:	e7c4      	b.n	801063a <_vfiprintf_r+0x156>
 80106b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80106b4:	4604      	mov	r4, r0
 80106b6:	2301      	movs	r3, #1
 80106b8:	e7f0      	b.n	801069c <_vfiprintf_r+0x1b8>
 80106ba:	ab03      	add	r3, sp, #12
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	462a      	mov	r2, r5
 80106c0:	4b12      	ldr	r3, [pc, #72]	@ (801070c <_vfiprintf_r+0x228>)
 80106c2:	a904      	add	r1, sp, #16
 80106c4:	4630      	mov	r0, r6
 80106c6:	f7fb fcfd 	bl	800c0c4 <_printf_float>
 80106ca:	4607      	mov	r7, r0
 80106cc:	1c78      	adds	r0, r7, #1
 80106ce:	d1d6      	bne.n	801067e <_vfiprintf_r+0x19a>
 80106d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106d2:	07d9      	lsls	r1, r3, #31
 80106d4:	d405      	bmi.n	80106e2 <_vfiprintf_r+0x1fe>
 80106d6:	89ab      	ldrh	r3, [r5, #12]
 80106d8:	059a      	lsls	r2, r3, #22
 80106da:	d402      	bmi.n	80106e2 <_vfiprintf_r+0x1fe>
 80106dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106de:	f7fd fb47 	bl	800dd70 <__retarget_lock_release_recursive>
 80106e2:	89ab      	ldrh	r3, [r5, #12]
 80106e4:	065b      	lsls	r3, r3, #25
 80106e6:	f53f af1f 	bmi.w	8010528 <_vfiprintf_r+0x44>
 80106ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106ec:	e71e      	b.n	801052c <_vfiprintf_r+0x48>
 80106ee:	ab03      	add	r3, sp, #12
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	462a      	mov	r2, r5
 80106f4:	4b05      	ldr	r3, [pc, #20]	@ (801070c <_vfiprintf_r+0x228>)
 80106f6:	a904      	add	r1, sp, #16
 80106f8:	4630      	mov	r0, r6
 80106fa:	f7fb ff7b 	bl	800c5f4 <_printf_i>
 80106fe:	e7e4      	b.n	80106ca <_vfiprintf_r+0x1e6>
 8010700:	08011d77 	.word	0x08011d77
 8010704:	08011d81 	.word	0x08011d81
 8010708:	0800c0c5 	.word	0x0800c0c5
 801070c:	080104bf 	.word	0x080104bf
 8010710:	08011d7d 	.word	0x08011d7d

08010714 <_scanf_chars>:
 8010714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010718:	4615      	mov	r5, r2
 801071a:	688a      	ldr	r2, [r1, #8]
 801071c:	4680      	mov	r8, r0
 801071e:	460c      	mov	r4, r1
 8010720:	b932      	cbnz	r2, 8010730 <_scanf_chars+0x1c>
 8010722:	698a      	ldr	r2, [r1, #24]
 8010724:	2a00      	cmp	r2, #0
 8010726:	bf14      	ite	ne
 8010728:	f04f 32ff 	movne.w	r2, #4294967295
 801072c:	2201      	moveq	r2, #1
 801072e:	608a      	str	r2, [r1, #8]
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80107c4 <_scanf_chars+0xb0>
 8010736:	06d1      	lsls	r1, r2, #27
 8010738:	bf5f      	itttt	pl
 801073a:	681a      	ldrpl	r2, [r3, #0]
 801073c:	1d11      	addpl	r1, r2, #4
 801073e:	6019      	strpl	r1, [r3, #0]
 8010740:	6816      	ldrpl	r6, [r2, #0]
 8010742:	2700      	movs	r7, #0
 8010744:	69a0      	ldr	r0, [r4, #24]
 8010746:	b188      	cbz	r0, 801076c <_scanf_chars+0x58>
 8010748:	2801      	cmp	r0, #1
 801074a:	d107      	bne.n	801075c <_scanf_chars+0x48>
 801074c:	682b      	ldr	r3, [r5, #0]
 801074e:	781a      	ldrb	r2, [r3, #0]
 8010750:	6963      	ldr	r3, [r4, #20]
 8010752:	5c9b      	ldrb	r3, [r3, r2]
 8010754:	b953      	cbnz	r3, 801076c <_scanf_chars+0x58>
 8010756:	2f00      	cmp	r7, #0
 8010758:	d031      	beq.n	80107be <_scanf_chars+0xaa>
 801075a:	e022      	b.n	80107a2 <_scanf_chars+0x8e>
 801075c:	2802      	cmp	r0, #2
 801075e:	d120      	bne.n	80107a2 <_scanf_chars+0x8e>
 8010760:	682b      	ldr	r3, [r5, #0]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010768:	071b      	lsls	r3, r3, #28
 801076a:	d41a      	bmi.n	80107a2 <_scanf_chars+0x8e>
 801076c:	6823      	ldr	r3, [r4, #0]
 801076e:	06da      	lsls	r2, r3, #27
 8010770:	bf5e      	ittt	pl
 8010772:	682b      	ldrpl	r3, [r5, #0]
 8010774:	781b      	ldrbpl	r3, [r3, #0]
 8010776:	f806 3b01 	strbpl.w	r3, [r6], #1
 801077a:	682a      	ldr	r2, [r5, #0]
 801077c:	686b      	ldr	r3, [r5, #4]
 801077e:	3201      	adds	r2, #1
 8010780:	602a      	str	r2, [r5, #0]
 8010782:	68a2      	ldr	r2, [r4, #8]
 8010784:	3b01      	subs	r3, #1
 8010786:	3a01      	subs	r2, #1
 8010788:	606b      	str	r3, [r5, #4]
 801078a:	3701      	adds	r7, #1
 801078c:	60a2      	str	r2, [r4, #8]
 801078e:	b142      	cbz	r2, 80107a2 <_scanf_chars+0x8e>
 8010790:	2b00      	cmp	r3, #0
 8010792:	dcd7      	bgt.n	8010744 <_scanf_chars+0x30>
 8010794:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010798:	4629      	mov	r1, r5
 801079a:	4640      	mov	r0, r8
 801079c:	4798      	blx	r3
 801079e:	2800      	cmp	r0, #0
 80107a0:	d0d0      	beq.n	8010744 <_scanf_chars+0x30>
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	f013 0310 	ands.w	r3, r3, #16
 80107a8:	d105      	bne.n	80107b6 <_scanf_chars+0xa2>
 80107aa:	68e2      	ldr	r2, [r4, #12]
 80107ac:	3201      	adds	r2, #1
 80107ae:	60e2      	str	r2, [r4, #12]
 80107b0:	69a2      	ldr	r2, [r4, #24]
 80107b2:	b102      	cbz	r2, 80107b6 <_scanf_chars+0xa2>
 80107b4:	7033      	strb	r3, [r6, #0]
 80107b6:	6923      	ldr	r3, [r4, #16]
 80107b8:	443b      	add	r3, r7
 80107ba:	6123      	str	r3, [r4, #16]
 80107bc:	2000      	movs	r0, #0
 80107be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107c2:	bf00      	nop
 80107c4:	08011e71 	.word	0x08011e71

080107c8 <_scanf_i>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	4698      	mov	r8, r3
 80107ce:	4b74      	ldr	r3, [pc, #464]	@ (80109a0 <_scanf_i+0x1d8>)
 80107d0:	460c      	mov	r4, r1
 80107d2:	4682      	mov	sl, r0
 80107d4:	4616      	mov	r6, r2
 80107d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107da:	b087      	sub	sp, #28
 80107dc:	ab03      	add	r3, sp, #12
 80107de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80107e2:	4b70      	ldr	r3, [pc, #448]	@ (80109a4 <_scanf_i+0x1dc>)
 80107e4:	69a1      	ldr	r1, [r4, #24]
 80107e6:	4a70      	ldr	r2, [pc, #448]	@ (80109a8 <_scanf_i+0x1e0>)
 80107e8:	2903      	cmp	r1, #3
 80107ea:	bf08      	it	eq
 80107ec:	461a      	moveq	r2, r3
 80107ee:	68a3      	ldr	r3, [r4, #8]
 80107f0:	9201      	str	r2, [sp, #4]
 80107f2:	1e5a      	subs	r2, r3, #1
 80107f4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80107f8:	bf88      	it	hi
 80107fa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80107fe:	4627      	mov	r7, r4
 8010800:	bf82      	ittt	hi
 8010802:	eb03 0905 	addhi.w	r9, r3, r5
 8010806:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801080a:	60a3      	strhi	r3, [r4, #8]
 801080c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010810:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8010814:	bf98      	it	ls
 8010816:	f04f 0900 	movls.w	r9, #0
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	463d      	mov	r5, r7
 801081e:	f04f 0b00 	mov.w	fp, #0
 8010822:	6831      	ldr	r1, [r6, #0]
 8010824:	ab03      	add	r3, sp, #12
 8010826:	7809      	ldrb	r1, [r1, #0]
 8010828:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801082c:	2202      	movs	r2, #2
 801082e:	f7ef fce7 	bl	8000200 <memchr>
 8010832:	b328      	cbz	r0, 8010880 <_scanf_i+0xb8>
 8010834:	f1bb 0f01 	cmp.w	fp, #1
 8010838:	d159      	bne.n	80108ee <_scanf_i+0x126>
 801083a:	6862      	ldr	r2, [r4, #4]
 801083c:	b92a      	cbnz	r2, 801084a <_scanf_i+0x82>
 801083e:	6822      	ldr	r2, [r4, #0]
 8010840:	2108      	movs	r1, #8
 8010842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010846:	6061      	str	r1, [r4, #4]
 8010848:	6022      	str	r2, [r4, #0]
 801084a:	6822      	ldr	r2, [r4, #0]
 801084c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010850:	6022      	str	r2, [r4, #0]
 8010852:	68a2      	ldr	r2, [r4, #8]
 8010854:	1e51      	subs	r1, r2, #1
 8010856:	60a1      	str	r1, [r4, #8]
 8010858:	b192      	cbz	r2, 8010880 <_scanf_i+0xb8>
 801085a:	6832      	ldr	r2, [r6, #0]
 801085c:	1c51      	adds	r1, r2, #1
 801085e:	6031      	str	r1, [r6, #0]
 8010860:	7812      	ldrb	r2, [r2, #0]
 8010862:	f805 2b01 	strb.w	r2, [r5], #1
 8010866:	6872      	ldr	r2, [r6, #4]
 8010868:	3a01      	subs	r2, #1
 801086a:	2a00      	cmp	r2, #0
 801086c:	6072      	str	r2, [r6, #4]
 801086e:	dc07      	bgt.n	8010880 <_scanf_i+0xb8>
 8010870:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8010874:	4631      	mov	r1, r6
 8010876:	4650      	mov	r0, sl
 8010878:	4790      	blx	r2
 801087a:	2800      	cmp	r0, #0
 801087c:	f040 8085 	bne.w	801098a <_scanf_i+0x1c2>
 8010880:	f10b 0b01 	add.w	fp, fp, #1
 8010884:	f1bb 0f03 	cmp.w	fp, #3
 8010888:	d1cb      	bne.n	8010822 <_scanf_i+0x5a>
 801088a:	6863      	ldr	r3, [r4, #4]
 801088c:	b90b      	cbnz	r3, 8010892 <_scanf_i+0xca>
 801088e:	230a      	movs	r3, #10
 8010890:	6063      	str	r3, [r4, #4]
 8010892:	6863      	ldr	r3, [r4, #4]
 8010894:	4945      	ldr	r1, [pc, #276]	@ (80109ac <_scanf_i+0x1e4>)
 8010896:	6960      	ldr	r0, [r4, #20]
 8010898:	1ac9      	subs	r1, r1, r3
 801089a:	f000 f9dd 	bl	8010c58 <__sccl>
 801089e:	f04f 0b00 	mov.w	fp, #0
 80108a2:	68a3      	ldr	r3, [r4, #8]
 80108a4:	6822      	ldr	r2, [r4, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d03d      	beq.n	8010926 <_scanf_i+0x15e>
 80108aa:	6831      	ldr	r1, [r6, #0]
 80108ac:	6960      	ldr	r0, [r4, #20]
 80108ae:	f891 c000 	ldrb.w	ip, [r1]
 80108b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80108b6:	2800      	cmp	r0, #0
 80108b8:	d035      	beq.n	8010926 <_scanf_i+0x15e>
 80108ba:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80108be:	d124      	bne.n	801090a <_scanf_i+0x142>
 80108c0:	0510      	lsls	r0, r2, #20
 80108c2:	d522      	bpl.n	801090a <_scanf_i+0x142>
 80108c4:	f10b 0b01 	add.w	fp, fp, #1
 80108c8:	f1b9 0f00 	cmp.w	r9, #0
 80108cc:	d003      	beq.n	80108d6 <_scanf_i+0x10e>
 80108ce:	3301      	adds	r3, #1
 80108d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80108d4:	60a3      	str	r3, [r4, #8]
 80108d6:	6873      	ldr	r3, [r6, #4]
 80108d8:	3b01      	subs	r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	6073      	str	r3, [r6, #4]
 80108de:	dd1b      	ble.n	8010918 <_scanf_i+0x150>
 80108e0:	6833      	ldr	r3, [r6, #0]
 80108e2:	3301      	adds	r3, #1
 80108e4:	6033      	str	r3, [r6, #0]
 80108e6:	68a3      	ldr	r3, [r4, #8]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	60a3      	str	r3, [r4, #8]
 80108ec:	e7d9      	b.n	80108a2 <_scanf_i+0xda>
 80108ee:	f1bb 0f02 	cmp.w	fp, #2
 80108f2:	d1ae      	bne.n	8010852 <_scanf_i+0x8a>
 80108f4:	6822      	ldr	r2, [r4, #0]
 80108f6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80108fa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80108fe:	d1c4      	bne.n	801088a <_scanf_i+0xc2>
 8010900:	2110      	movs	r1, #16
 8010902:	6061      	str	r1, [r4, #4]
 8010904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010908:	e7a2      	b.n	8010850 <_scanf_i+0x88>
 801090a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801090e:	6022      	str	r2, [r4, #0]
 8010910:	780b      	ldrb	r3, [r1, #0]
 8010912:	f805 3b01 	strb.w	r3, [r5], #1
 8010916:	e7de      	b.n	80108d6 <_scanf_i+0x10e>
 8010918:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801091c:	4631      	mov	r1, r6
 801091e:	4650      	mov	r0, sl
 8010920:	4798      	blx	r3
 8010922:	2800      	cmp	r0, #0
 8010924:	d0df      	beq.n	80108e6 <_scanf_i+0x11e>
 8010926:	6823      	ldr	r3, [r4, #0]
 8010928:	05d9      	lsls	r1, r3, #23
 801092a:	d50d      	bpl.n	8010948 <_scanf_i+0x180>
 801092c:	42bd      	cmp	r5, r7
 801092e:	d909      	bls.n	8010944 <_scanf_i+0x17c>
 8010930:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010934:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010938:	4632      	mov	r2, r6
 801093a:	4650      	mov	r0, sl
 801093c:	4798      	blx	r3
 801093e:	f105 39ff 	add.w	r9, r5, #4294967295
 8010942:	464d      	mov	r5, r9
 8010944:	42bd      	cmp	r5, r7
 8010946:	d028      	beq.n	801099a <_scanf_i+0x1d2>
 8010948:	6822      	ldr	r2, [r4, #0]
 801094a:	f012 0210 	ands.w	r2, r2, #16
 801094e:	d113      	bne.n	8010978 <_scanf_i+0x1b0>
 8010950:	702a      	strb	r2, [r5, #0]
 8010952:	6863      	ldr	r3, [r4, #4]
 8010954:	9e01      	ldr	r6, [sp, #4]
 8010956:	4639      	mov	r1, r7
 8010958:	4650      	mov	r0, sl
 801095a:	47b0      	blx	r6
 801095c:	f8d8 3000 	ldr.w	r3, [r8]
 8010960:	6821      	ldr	r1, [r4, #0]
 8010962:	1d1a      	adds	r2, r3, #4
 8010964:	f8c8 2000 	str.w	r2, [r8]
 8010968:	f011 0f20 	tst.w	r1, #32
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	d00f      	beq.n	8010990 <_scanf_i+0x1c8>
 8010970:	6018      	str	r0, [r3, #0]
 8010972:	68e3      	ldr	r3, [r4, #12]
 8010974:	3301      	adds	r3, #1
 8010976:	60e3      	str	r3, [r4, #12]
 8010978:	6923      	ldr	r3, [r4, #16]
 801097a:	1bed      	subs	r5, r5, r7
 801097c:	445d      	add	r5, fp
 801097e:	442b      	add	r3, r5
 8010980:	6123      	str	r3, [r4, #16]
 8010982:	2000      	movs	r0, #0
 8010984:	b007      	add	sp, #28
 8010986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098a:	f04f 0b00 	mov.w	fp, #0
 801098e:	e7ca      	b.n	8010926 <_scanf_i+0x15e>
 8010990:	07ca      	lsls	r2, r1, #31
 8010992:	bf4c      	ite	mi
 8010994:	8018      	strhmi	r0, [r3, #0]
 8010996:	6018      	strpl	r0, [r3, #0]
 8010998:	e7eb      	b.n	8010972 <_scanf_i+0x1aa>
 801099a:	2001      	movs	r0, #1
 801099c:	e7f2      	b.n	8010984 <_scanf_i+0x1bc>
 801099e:	bf00      	nop
 80109a0:	080119b0 	.word	0x080119b0
 80109a4:	0800bf6d 	.word	0x0800bf6d
 80109a8:	0800fe11 	.word	0x0800fe11
 80109ac:	08011d98 	.word	0x08011d98

080109b0 <__sflush_r>:
 80109b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b8:	0716      	lsls	r6, r2, #28
 80109ba:	4605      	mov	r5, r0
 80109bc:	460c      	mov	r4, r1
 80109be:	d454      	bmi.n	8010a6a <__sflush_r+0xba>
 80109c0:	684b      	ldr	r3, [r1, #4]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	dc02      	bgt.n	80109cc <__sflush_r+0x1c>
 80109c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	dd48      	ble.n	8010a5e <__sflush_r+0xae>
 80109cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109ce:	2e00      	cmp	r6, #0
 80109d0:	d045      	beq.n	8010a5e <__sflush_r+0xae>
 80109d2:	2300      	movs	r3, #0
 80109d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109d8:	682f      	ldr	r7, [r5, #0]
 80109da:	6a21      	ldr	r1, [r4, #32]
 80109dc:	602b      	str	r3, [r5, #0]
 80109de:	d030      	beq.n	8010a42 <__sflush_r+0x92>
 80109e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109e2:	89a3      	ldrh	r3, [r4, #12]
 80109e4:	0759      	lsls	r1, r3, #29
 80109e6:	d505      	bpl.n	80109f4 <__sflush_r+0x44>
 80109e8:	6863      	ldr	r3, [r4, #4]
 80109ea:	1ad2      	subs	r2, r2, r3
 80109ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109ee:	b10b      	cbz	r3, 80109f4 <__sflush_r+0x44>
 80109f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109f2:	1ad2      	subs	r2, r2, r3
 80109f4:	2300      	movs	r3, #0
 80109f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109f8:	6a21      	ldr	r1, [r4, #32]
 80109fa:	4628      	mov	r0, r5
 80109fc:	47b0      	blx	r6
 80109fe:	1c43      	adds	r3, r0, #1
 8010a00:	89a3      	ldrh	r3, [r4, #12]
 8010a02:	d106      	bne.n	8010a12 <__sflush_r+0x62>
 8010a04:	6829      	ldr	r1, [r5, #0]
 8010a06:	291d      	cmp	r1, #29
 8010a08:	d82b      	bhi.n	8010a62 <__sflush_r+0xb2>
 8010a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8010ab4 <__sflush_r+0x104>)
 8010a0c:	40ca      	lsrs	r2, r1
 8010a0e:	07d6      	lsls	r6, r2, #31
 8010a10:	d527      	bpl.n	8010a62 <__sflush_r+0xb2>
 8010a12:	2200      	movs	r2, #0
 8010a14:	6062      	str	r2, [r4, #4]
 8010a16:	04d9      	lsls	r1, r3, #19
 8010a18:	6922      	ldr	r2, [r4, #16]
 8010a1a:	6022      	str	r2, [r4, #0]
 8010a1c:	d504      	bpl.n	8010a28 <__sflush_r+0x78>
 8010a1e:	1c42      	adds	r2, r0, #1
 8010a20:	d101      	bne.n	8010a26 <__sflush_r+0x76>
 8010a22:	682b      	ldr	r3, [r5, #0]
 8010a24:	b903      	cbnz	r3, 8010a28 <__sflush_r+0x78>
 8010a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a2a:	602f      	str	r7, [r5, #0]
 8010a2c:	b1b9      	cbz	r1, 8010a5e <__sflush_r+0xae>
 8010a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a32:	4299      	cmp	r1, r3
 8010a34:	d002      	beq.n	8010a3c <__sflush_r+0x8c>
 8010a36:	4628      	mov	r0, r5
 8010a38:	f7fe f83a 	bl	800eab0 <_free_r>
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a40:	e00d      	b.n	8010a5e <__sflush_r+0xae>
 8010a42:	2301      	movs	r3, #1
 8010a44:	4628      	mov	r0, r5
 8010a46:	47b0      	blx	r6
 8010a48:	4602      	mov	r2, r0
 8010a4a:	1c50      	adds	r0, r2, #1
 8010a4c:	d1c9      	bne.n	80109e2 <__sflush_r+0x32>
 8010a4e:	682b      	ldr	r3, [r5, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d0c6      	beq.n	80109e2 <__sflush_r+0x32>
 8010a54:	2b1d      	cmp	r3, #29
 8010a56:	d001      	beq.n	8010a5c <__sflush_r+0xac>
 8010a58:	2b16      	cmp	r3, #22
 8010a5a:	d11e      	bne.n	8010a9a <__sflush_r+0xea>
 8010a5c:	602f      	str	r7, [r5, #0]
 8010a5e:	2000      	movs	r0, #0
 8010a60:	e022      	b.n	8010aa8 <__sflush_r+0xf8>
 8010a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a66:	b21b      	sxth	r3, r3
 8010a68:	e01b      	b.n	8010aa2 <__sflush_r+0xf2>
 8010a6a:	690f      	ldr	r7, [r1, #16]
 8010a6c:	2f00      	cmp	r7, #0
 8010a6e:	d0f6      	beq.n	8010a5e <__sflush_r+0xae>
 8010a70:	0793      	lsls	r3, r2, #30
 8010a72:	680e      	ldr	r6, [r1, #0]
 8010a74:	bf08      	it	eq
 8010a76:	694b      	ldreq	r3, [r1, #20]
 8010a78:	600f      	str	r7, [r1, #0]
 8010a7a:	bf18      	it	ne
 8010a7c:	2300      	movne	r3, #0
 8010a7e:	eba6 0807 	sub.w	r8, r6, r7
 8010a82:	608b      	str	r3, [r1, #8]
 8010a84:	f1b8 0f00 	cmp.w	r8, #0
 8010a88:	dde9      	ble.n	8010a5e <__sflush_r+0xae>
 8010a8a:	6a21      	ldr	r1, [r4, #32]
 8010a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a8e:	4643      	mov	r3, r8
 8010a90:	463a      	mov	r2, r7
 8010a92:	4628      	mov	r0, r5
 8010a94:	47b0      	blx	r6
 8010a96:	2800      	cmp	r0, #0
 8010a98:	dc08      	bgt.n	8010aac <__sflush_r+0xfc>
 8010a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aa2:	81a3      	strh	r3, [r4, #12]
 8010aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aac:	4407      	add	r7, r0
 8010aae:	eba8 0800 	sub.w	r8, r8, r0
 8010ab2:	e7e7      	b.n	8010a84 <__sflush_r+0xd4>
 8010ab4:	20400001 	.word	0x20400001

08010ab8 <_fflush_r>:
 8010ab8:	b538      	push	{r3, r4, r5, lr}
 8010aba:	690b      	ldr	r3, [r1, #16]
 8010abc:	4605      	mov	r5, r0
 8010abe:	460c      	mov	r4, r1
 8010ac0:	b913      	cbnz	r3, 8010ac8 <_fflush_r+0x10>
 8010ac2:	2500      	movs	r5, #0
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	bd38      	pop	{r3, r4, r5, pc}
 8010ac8:	b118      	cbz	r0, 8010ad2 <_fflush_r+0x1a>
 8010aca:	6a03      	ldr	r3, [r0, #32]
 8010acc:	b90b      	cbnz	r3, 8010ad2 <_fflush_r+0x1a>
 8010ace:	f7fb ff3b 	bl	800c948 <__sinit>
 8010ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d0f3      	beq.n	8010ac2 <_fflush_r+0xa>
 8010ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010adc:	07d0      	lsls	r0, r2, #31
 8010ade:	d404      	bmi.n	8010aea <_fflush_r+0x32>
 8010ae0:	0599      	lsls	r1, r3, #22
 8010ae2:	d402      	bmi.n	8010aea <_fflush_r+0x32>
 8010ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ae6:	f7fd f941 	bl	800dd6c <__retarget_lock_acquire_recursive>
 8010aea:	4628      	mov	r0, r5
 8010aec:	4621      	mov	r1, r4
 8010aee:	f7ff ff5f 	bl	80109b0 <__sflush_r>
 8010af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010af4:	07da      	lsls	r2, r3, #31
 8010af6:	4605      	mov	r5, r0
 8010af8:	d4e4      	bmi.n	8010ac4 <_fflush_r+0xc>
 8010afa:	89a3      	ldrh	r3, [r4, #12]
 8010afc:	059b      	lsls	r3, r3, #22
 8010afe:	d4e1      	bmi.n	8010ac4 <_fflush_r+0xc>
 8010b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b02:	f7fd f935 	bl	800dd70 <__retarget_lock_release_recursive>
 8010b06:	e7dd      	b.n	8010ac4 <_fflush_r+0xc>

08010b08 <fiprintf>:
 8010b08:	b40e      	push	{r1, r2, r3}
 8010b0a:	b503      	push	{r0, r1, lr}
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	ab03      	add	r3, sp, #12
 8010b10:	4805      	ldr	r0, [pc, #20]	@ (8010b28 <fiprintf+0x20>)
 8010b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b16:	6800      	ldr	r0, [r0, #0]
 8010b18:	9301      	str	r3, [sp, #4]
 8010b1a:	f7ff fce3 	bl	80104e4 <_vfiprintf_r>
 8010b1e:	b002      	add	sp, #8
 8010b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b24:	b003      	add	sp, #12
 8010b26:	4770      	bx	lr
 8010b28:	200001a4 	.word	0x200001a4

08010b2c <__swhatbuf_r>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	460c      	mov	r4, r1
 8010b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b34:	2900      	cmp	r1, #0
 8010b36:	b096      	sub	sp, #88	@ 0x58
 8010b38:	4615      	mov	r5, r2
 8010b3a:	461e      	mov	r6, r3
 8010b3c:	da0d      	bge.n	8010b5a <__swhatbuf_r+0x2e>
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b44:	f04f 0100 	mov.w	r1, #0
 8010b48:	bf14      	ite	ne
 8010b4a:	2340      	movne	r3, #64	@ 0x40
 8010b4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b50:	2000      	movs	r0, #0
 8010b52:	6031      	str	r1, [r6, #0]
 8010b54:	602b      	str	r3, [r5, #0]
 8010b56:	b016      	add	sp, #88	@ 0x58
 8010b58:	bd70      	pop	{r4, r5, r6, pc}
 8010b5a:	466a      	mov	r2, sp
 8010b5c:	f000 f9e2 	bl	8010f24 <_fstat_r>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dbec      	blt.n	8010b3e <__swhatbuf_r+0x12>
 8010b64:	9901      	ldr	r1, [sp, #4]
 8010b66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b6e:	4259      	negs	r1, r3
 8010b70:	4159      	adcs	r1, r3
 8010b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b76:	e7eb      	b.n	8010b50 <__swhatbuf_r+0x24>

08010b78 <__smakebuf_r>:
 8010b78:	898b      	ldrh	r3, [r1, #12]
 8010b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b7c:	079d      	lsls	r5, r3, #30
 8010b7e:	4606      	mov	r6, r0
 8010b80:	460c      	mov	r4, r1
 8010b82:	d507      	bpl.n	8010b94 <__smakebuf_r+0x1c>
 8010b84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	6123      	str	r3, [r4, #16]
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	6163      	str	r3, [r4, #20]
 8010b90:	b003      	add	sp, #12
 8010b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b94:	ab01      	add	r3, sp, #4
 8010b96:	466a      	mov	r2, sp
 8010b98:	f7ff ffc8 	bl	8010b2c <__swhatbuf_r>
 8010b9c:	9f00      	ldr	r7, [sp, #0]
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	4639      	mov	r1, r7
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f7fe fb7e 	bl	800f2a4 <_malloc_r>
 8010ba8:	b948      	cbnz	r0, 8010bbe <__smakebuf_r+0x46>
 8010baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bae:	059a      	lsls	r2, r3, #22
 8010bb0:	d4ee      	bmi.n	8010b90 <__smakebuf_r+0x18>
 8010bb2:	f023 0303 	bic.w	r3, r3, #3
 8010bb6:	f043 0302 	orr.w	r3, r3, #2
 8010bba:	81a3      	strh	r3, [r4, #12]
 8010bbc:	e7e2      	b.n	8010b84 <__smakebuf_r+0xc>
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	6020      	str	r0, [r4, #0]
 8010bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bc6:	81a3      	strh	r3, [r4, #12]
 8010bc8:	9b01      	ldr	r3, [sp, #4]
 8010bca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010bce:	b15b      	cbz	r3, 8010be8 <__smakebuf_r+0x70>
 8010bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	f000 f9b7 	bl	8010f48 <_isatty_r>
 8010bda:	b128      	cbz	r0, 8010be8 <__smakebuf_r+0x70>
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	f023 0303 	bic.w	r3, r3, #3
 8010be2:	f043 0301 	orr.w	r3, r3, #1
 8010be6:	81a3      	strh	r3, [r4, #12]
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	431d      	orrs	r5, r3
 8010bec:	81a5      	strh	r5, [r4, #12]
 8010bee:	e7cf      	b.n	8010b90 <__smakebuf_r+0x18>

08010bf0 <_putc_r>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	460d      	mov	r5, r1
 8010bf4:	4614      	mov	r4, r2
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	b118      	cbz	r0, 8010c02 <_putc_r+0x12>
 8010bfa:	6a03      	ldr	r3, [r0, #32]
 8010bfc:	b90b      	cbnz	r3, 8010c02 <_putc_r+0x12>
 8010bfe:	f7fb fea3 	bl	800c948 <__sinit>
 8010c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c04:	07d8      	lsls	r0, r3, #31
 8010c06:	d405      	bmi.n	8010c14 <_putc_r+0x24>
 8010c08:	89a3      	ldrh	r3, [r4, #12]
 8010c0a:	0599      	lsls	r1, r3, #22
 8010c0c:	d402      	bmi.n	8010c14 <_putc_r+0x24>
 8010c0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c10:	f7fd f8ac 	bl	800dd6c <__retarget_lock_acquire_recursive>
 8010c14:	68a3      	ldr	r3, [r4, #8]
 8010c16:	3b01      	subs	r3, #1
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	60a3      	str	r3, [r4, #8]
 8010c1c:	da05      	bge.n	8010c2a <_putc_r+0x3a>
 8010c1e:	69a2      	ldr	r2, [r4, #24]
 8010c20:	4293      	cmp	r3, r2
 8010c22:	db12      	blt.n	8010c4a <_putc_r+0x5a>
 8010c24:	b2eb      	uxtb	r3, r5
 8010c26:	2b0a      	cmp	r3, #10
 8010c28:	d00f      	beq.n	8010c4a <_putc_r+0x5a>
 8010c2a:	6823      	ldr	r3, [r4, #0]
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	6022      	str	r2, [r4, #0]
 8010c30:	701d      	strb	r5, [r3, #0]
 8010c32:	b2ed      	uxtb	r5, r5
 8010c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c36:	07da      	lsls	r2, r3, #31
 8010c38:	d405      	bmi.n	8010c46 <_putc_r+0x56>
 8010c3a:	89a3      	ldrh	r3, [r4, #12]
 8010c3c:	059b      	lsls	r3, r3, #22
 8010c3e:	d402      	bmi.n	8010c46 <_putc_r+0x56>
 8010c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c42:	f7fd f895 	bl	800dd70 <__retarget_lock_release_recursive>
 8010c46:	4628      	mov	r0, r5
 8010c48:	bd70      	pop	{r4, r5, r6, pc}
 8010c4a:	4629      	mov	r1, r5
 8010c4c:	4622      	mov	r2, r4
 8010c4e:	4630      	mov	r0, r6
 8010c50:	f7fb fff1 	bl	800cc36 <__swbuf_r>
 8010c54:	4605      	mov	r5, r0
 8010c56:	e7ed      	b.n	8010c34 <_putc_r+0x44>

08010c58 <__sccl>:
 8010c58:	b570      	push	{r4, r5, r6, lr}
 8010c5a:	780b      	ldrb	r3, [r1, #0]
 8010c5c:	4604      	mov	r4, r0
 8010c5e:	2b5e      	cmp	r3, #94	@ 0x5e
 8010c60:	bf0b      	itete	eq
 8010c62:	784b      	ldrbeq	r3, [r1, #1]
 8010c64:	1c4a      	addne	r2, r1, #1
 8010c66:	1c8a      	addeq	r2, r1, #2
 8010c68:	2100      	movne	r1, #0
 8010c6a:	bf08      	it	eq
 8010c6c:	2101      	moveq	r1, #1
 8010c6e:	3801      	subs	r0, #1
 8010c70:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8010c74:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010c78:	42a8      	cmp	r0, r5
 8010c7a:	d1fb      	bne.n	8010c74 <__sccl+0x1c>
 8010c7c:	b90b      	cbnz	r3, 8010c82 <__sccl+0x2a>
 8010c7e:	1e50      	subs	r0, r2, #1
 8010c80:	bd70      	pop	{r4, r5, r6, pc}
 8010c82:	f081 0101 	eor.w	r1, r1, #1
 8010c86:	54e1      	strb	r1, [r4, r3]
 8010c88:	4610      	mov	r0, r2
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010c90:	2d2d      	cmp	r5, #45	@ 0x2d
 8010c92:	d005      	beq.n	8010ca0 <__sccl+0x48>
 8010c94:	2d5d      	cmp	r5, #93	@ 0x5d
 8010c96:	d016      	beq.n	8010cc6 <__sccl+0x6e>
 8010c98:	2d00      	cmp	r5, #0
 8010c9a:	d0f1      	beq.n	8010c80 <__sccl+0x28>
 8010c9c:	462b      	mov	r3, r5
 8010c9e:	e7f2      	b.n	8010c86 <__sccl+0x2e>
 8010ca0:	7846      	ldrb	r6, [r0, #1]
 8010ca2:	2e5d      	cmp	r6, #93	@ 0x5d
 8010ca4:	d0fa      	beq.n	8010c9c <__sccl+0x44>
 8010ca6:	42b3      	cmp	r3, r6
 8010ca8:	dcf8      	bgt.n	8010c9c <__sccl+0x44>
 8010caa:	3002      	adds	r0, #2
 8010cac:	461a      	mov	r2, r3
 8010cae:	3201      	adds	r2, #1
 8010cb0:	4296      	cmp	r6, r2
 8010cb2:	54a1      	strb	r1, [r4, r2]
 8010cb4:	dcfb      	bgt.n	8010cae <__sccl+0x56>
 8010cb6:	1af2      	subs	r2, r6, r3
 8010cb8:	3a01      	subs	r2, #1
 8010cba:	1c5d      	adds	r5, r3, #1
 8010cbc:	42b3      	cmp	r3, r6
 8010cbe:	bfa8      	it	ge
 8010cc0:	2200      	movge	r2, #0
 8010cc2:	18ab      	adds	r3, r5, r2
 8010cc4:	e7e1      	b.n	8010c8a <__sccl+0x32>
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	e7da      	b.n	8010c80 <__sccl+0x28>

08010cca <__submore>:
 8010cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cce:	460c      	mov	r4, r1
 8010cd0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010cd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cd6:	4299      	cmp	r1, r3
 8010cd8:	d11d      	bne.n	8010d16 <__submore+0x4c>
 8010cda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010cde:	f7fe fae1 	bl	800f2a4 <_malloc_r>
 8010ce2:	b918      	cbnz	r0, 8010cec <__submore+0x22>
 8010ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cf0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010cf2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8010cf6:	6360      	str	r0, [r4, #52]	@ 0x34
 8010cf8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010cfc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010d00:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8010d04:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010d08:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010d0c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010d10:	6020      	str	r0, [r4, #0]
 8010d12:	2000      	movs	r0, #0
 8010d14:	e7e8      	b.n	8010ce8 <__submore+0x1e>
 8010d16:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010d18:	0077      	lsls	r7, r6, #1
 8010d1a:	463a      	mov	r2, r7
 8010d1c:	f000 f95c 	bl	8010fd8 <_realloc_r>
 8010d20:	4605      	mov	r5, r0
 8010d22:	2800      	cmp	r0, #0
 8010d24:	d0de      	beq.n	8010ce4 <__submore+0x1a>
 8010d26:	eb00 0806 	add.w	r8, r0, r6
 8010d2a:	4601      	mov	r1, r0
 8010d2c:	4632      	mov	r2, r6
 8010d2e:	4640      	mov	r0, r8
 8010d30:	f7fd f827 	bl	800dd82 <memcpy>
 8010d34:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010d38:	f8c4 8000 	str.w	r8, [r4]
 8010d3c:	e7e9      	b.n	8010d12 <__submore+0x48>
	...

08010d40 <asctime>:
 8010d40:	4b0d      	ldr	r3, [pc, #52]	@ (8010d78 <asctime+0x38>)
 8010d42:	b570      	push	{r4, r5, r6, lr}
 8010d44:	681d      	ldr	r5, [r3, #0]
 8010d46:	6bae      	ldr	r6, [r5, #56]	@ 0x38
 8010d48:	4604      	mov	r4, r0
 8010d4a:	b976      	cbnz	r6, 8010d6a <asctime+0x2a>
 8010d4c:	201a      	movs	r0, #26
 8010d4e:	f7fe fa77 	bl	800f240 <malloc>
 8010d52:	4602      	mov	r2, r0
 8010d54:	63a8      	str	r0, [r5, #56]	@ 0x38
 8010d56:	b920      	cbnz	r0, 8010d62 <asctime+0x22>
 8010d58:	4b08      	ldr	r3, [pc, #32]	@ (8010d7c <asctime+0x3c>)
 8010d5a:	4809      	ldr	r0, [pc, #36]	@ (8010d80 <asctime+0x40>)
 8010d5c:	213b      	movs	r1, #59	@ 0x3b
 8010d5e:	f7fd f827 	bl	800ddb0 <__assert_func>
 8010d62:	221a      	movs	r2, #26
 8010d64:	4631      	mov	r1, r6
 8010d66:	f7fc f815 	bl	800cd94 <memset>
 8010d6a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d72:	f000 b807 	b.w	8010d84 <asctime_r>
 8010d76:	bf00      	nop
 8010d78:	200001a4 	.word	0x200001a4
 8010d7c:	08011aec 	.word	0x08011aec
 8010d80:	08011da3 	.word	0x08011da3

08010d84 <asctime_r>:
 8010d84:	b510      	push	{r4, lr}
 8010d86:	460c      	mov	r4, r1
 8010d88:	6941      	ldr	r1, [r0, #20]
 8010d8a:	6903      	ldr	r3, [r0, #16]
 8010d8c:	6982      	ldr	r2, [r0, #24]
 8010d8e:	b086      	sub	sp, #24
 8010d90:	f201 716c 	addw	r1, r1, #1900	@ 0x76c
 8010d94:	9104      	str	r1, [sp, #16]
 8010d96:	6801      	ldr	r1, [r0, #0]
 8010d98:	9103      	str	r1, [sp, #12]
 8010d9a:	6841      	ldr	r1, [r0, #4]
 8010d9c:	9102      	str	r1, [sp, #8]
 8010d9e:	6881      	ldr	r1, [r0, #8]
 8010da0:	9101      	str	r1, [sp, #4]
 8010da2:	68c1      	ldr	r1, [r0, #12]
 8010da4:	9100      	str	r1, [sp, #0]
 8010da6:	4907      	ldr	r1, [pc, #28]	@ (8010dc4 <asctime_r+0x40>)
 8010da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010dac:	440b      	add	r3, r1
 8010dae:	4906      	ldr	r1, [pc, #24]	@ (8010dc8 <asctime_r+0x44>)
 8010db0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010db4:	440a      	add	r2, r1
 8010db6:	4620      	mov	r0, r4
 8010db8:	4904      	ldr	r1, [pc, #16]	@ (8010dcc <asctime_r+0x48>)
 8010dba:	f7fb fea9 	bl	800cb10 <siprintf>
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	b006      	add	sp, #24
 8010dc2:	bd10      	pop	{r4, pc}
 8010dc4:	08012130 	.word	0x08012130
 8010dc8:	08012154 	.word	0x08012154
 8010dcc:	08011dfc 	.word	0x08011dfc

08010dd0 <__gettzinfo>:
 8010dd0:	4800      	ldr	r0, [pc, #0]	@ (8010dd4 <__gettzinfo+0x4>)
 8010dd2:	4770      	bx	lr
 8010dd4:	200001f8 	.word	0x200001f8

08010dd8 <gmtime_r>:
 8010dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8010f14 <gmtime_r+0x13c>)
 8010dde:	460c      	mov	r4, r1
 8010de0:	2300      	movs	r3, #0
 8010de2:	e9d0 0100 	ldrd	r0, r1, [r0]
 8010de6:	f7ef ff67 	bl	8000cb8 <__aeabi_ldivmod>
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	bfbc      	itt	lt
 8010dee:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 8010df2:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 8010df6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8010dfa:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8010dfe:	fbb2 f3f1 	udiv	r3, r2, r1
 8010e02:	fb01 2213 	mls	r2, r1, r3, r2
 8010e06:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8010e0a:	bfac      	ite	ge
 8010e0c:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8010e10:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8010e14:	60a3      	str	r3, [r4, #8]
 8010e16:	fbb2 f3f1 	udiv	r3, r2, r1
 8010e1a:	fb01 2213 	mls	r2, r1, r3, r2
 8010e1e:	6063      	str	r3, [r4, #4]
 8010e20:	6022      	str	r2, [r4, #0]
 8010e22:	1cc3      	adds	r3, r0, #3
 8010e24:	2207      	movs	r2, #7
 8010e26:	fb93 f2f2 	sdiv	r2, r3, r2
 8010e2a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010e2e:	1a9b      	subs	r3, r3, r2
 8010e30:	4939      	ldr	r1, [pc, #228]	@ (8010f18 <gmtime_r+0x140>)
 8010e32:	d555      	bpl.n	8010ee0 <gmtime_r+0x108>
 8010e34:	3307      	adds	r3, #7
 8010e36:	61a3      	str	r3, [r4, #24]
 8010e38:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 8010e3c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8010e40:	fb93 f1f1 	sdiv	r1, r3, r1
 8010e44:	4b35      	ldr	r3, [pc, #212]	@ (8010f1c <gmtime_r+0x144>)
 8010e46:	fb03 0001 	mla	r0, r3, r1, r0
 8010e4a:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8010e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8010e52:	4403      	add	r3, r0
 8010e54:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8010e58:	fbb0 f2fc 	udiv	r2, r0, ip
 8010e5c:	1a9b      	subs	r3, r3, r2
 8010e5e:	f240 176d 	movw	r7, #365	@ 0x16d
 8010e62:	4a2f      	ldr	r2, [pc, #188]	@ (8010f20 <gmtime_r+0x148>)
 8010e64:	fbb0 f2f2 	udiv	r2, r0, r2
 8010e68:	2664      	movs	r6, #100	@ 0x64
 8010e6a:	1a9b      	subs	r3, r3, r2
 8010e6c:	fbb3 f2f7 	udiv	r2, r3, r7
 8010e70:	fbb3 f3fc 	udiv	r3, r3, ip
 8010e74:	fbb2 f5f6 	udiv	r5, r2, r6
 8010e78:	1aeb      	subs	r3, r5, r3
 8010e7a:	4403      	add	r3, r0
 8010e7c:	fb07 3312 	mls	r3, r7, r2, r3
 8010e80:	2099      	movs	r0, #153	@ 0x99
 8010e82:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8010e86:	3702      	adds	r7, #2
 8010e88:	f103 0e01 	add.w	lr, r3, #1
 8010e8c:	fbb7 fcf0 	udiv	ip, r7, r0
 8010e90:	fb00 f00c 	mul.w	r0, r0, ip
 8010e94:	3002      	adds	r0, #2
 8010e96:	f04f 0805 	mov.w	r8, #5
 8010e9a:	fbb0 f0f8 	udiv	r0, r0, r8
 8010e9e:	ebae 0000 	sub.w	r0, lr, r0
 8010ea2:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8010ea6:	4577      	cmp	r7, lr
 8010ea8:	bf8c      	ite	hi
 8010eaa:	f06f 0709 	mvnhi.w	r7, #9
 8010eae:	2702      	movls	r7, #2
 8010eb0:	4467      	add	r7, ip
 8010eb2:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8010eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eba:	2f01      	cmp	r7, #1
 8010ebc:	bf98      	it	ls
 8010ebe:	3101      	addls	r1, #1
 8010ec0:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8010ec4:	d312      	bcc.n	8010eec <gmtime_r+0x114>
 8010ec6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010eca:	61e3      	str	r3, [r4, #28]
 8010ecc:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	60e0      	str	r0, [r4, #12]
 8010ed4:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8010ed8:	6223      	str	r3, [r4, #32]
 8010eda:	4620      	mov	r0, r4
 8010edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	61a3      	str	r3, [r4, #24]
 8010ee4:	dba8      	blt.n	8010e38 <gmtime_r+0x60>
 8010ee6:	fb90 f1f1 	sdiv	r1, r0, r1
 8010eea:	e7ab      	b.n	8010e44 <gmtime_r+0x6c>
 8010eec:	f012 0f03 	tst.w	r2, #3
 8010ef0:	d102      	bne.n	8010ef8 <gmtime_r+0x120>
 8010ef2:	fb06 2515 	mls	r5, r6, r5, r2
 8010ef6:	b95d      	cbnz	r5, 8010f10 <gmtime_r+0x138>
 8010ef8:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8010efc:	fbb2 f6f5 	udiv	r6, r2, r5
 8010f00:	fb05 2216 	mls	r2, r5, r6, r2
 8010f04:	fab2 f282 	clz	r2, r2
 8010f08:	0952      	lsrs	r2, r2, #5
 8010f0a:	333b      	adds	r3, #59	@ 0x3b
 8010f0c:	4413      	add	r3, r2
 8010f0e:	e7dc      	b.n	8010eca <gmtime_r+0xf2>
 8010f10:	2201      	movs	r2, #1
 8010f12:	e7fa      	b.n	8010f0a <gmtime_r+0x132>
 8010f14:	00015180 	.word	0x00015180
 8010f18:	00023ab1 	.word	0x00023ab1
 8010f1c:	fffdc54f 	.word	0xfffdc54f
 8010f20:	00023ab0 	.word	0x00023ab0

08010f24 <_fstat_r>:
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	4d07      	ldr	r5, [pc, #28]	@ (8010f44 <_fstat_r+0x20>)
 8010f28:	2300      	movs	r3, #0
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	4608      	mov	r0, r1
 8010f2e:	4611      	mov	r1, r2
 8010f30:	602b      	str	r3, [r5, #0]
 8010f32:	f7f2 fdab 	bl	8003a8c <_fstat>
 8010f36:	1c43      	adds	r3, r0, #1
 8010f38:	d102      	bne.n	8010f40 <_fstat_r+0x1c>
 8010f3a:	682b      	ldr	r3, [r5, #0]
 8010f3c:	b103      	cbz	r3, 8010f40 <_fstat_r+0x1c>
 8010f3e:	6023      	str	r3, [r4, #0]
 8010f40:	bd38      	pop	{r3, r4, r5, pc}
 8010f42:	bf00      	nop
 8010f44:	20006f00 	.word	0x20006f00

08010f48 <_isatty_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	4d06      	ldr	r5, [pc, #24]	@ (8010f64 <_isatty_r+0x1c>)
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4608      	mov	r0, r1
 8010f52:	602b      	str	r3, [r5, #0]
 8010f54:	f7f2 fdaa 	bl	8003aac <_isatty>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	d102      	bne.n	8010f62 <_isatty_r+0x1a>
 8010f5c:	682b      	ldr	r3, [r5, #0]
 8010f5e:	b103      	cbz	r3, 8010f62 <_isatty_r+0x1a>
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	bd38      	pop	{r3, r4, r5, pc}
 8010f64:	20006f00 	.word	0x20006f00

08010f68 <_sbrk_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4d06      	ldr	r5, [pc, #24]	@ (8010f84 <_sbrk_r+0x1c>)
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4604      	mov	r4, r0
 8010f70:	4608      	mov	r0, r1
 8010f72:	602b      	str	r3, [r5, #0]
 8010f74:	f7f2 fdc8 	bl	8003b08 <_sbrk>
 8010f78:	1c43      	adds	r3, r0, #1
 8010f7a:	d102      	bne.n	8010f82 <_sbrk_r+0x1a>
 8010f7c:	682b      	ldr	r3, [r5, #0]
 8010f7e:	b103      	cbz	r3, 8010f82 <_sbrk_r+0x1a>
 8010f80:	6023      	str	r3, [r4, #0]
 8010f82:	bd38      	pop	{r3, r4, r5, pc}
 8010f84:	20006f00 	.word	0x20006f00

08010f88 <abort>:
 8010f88:	b508      	push	{r3, lr}
 8010f8a:	2006      	movs	r0, #6
 8010f8c:	f000 f87a 	bl	8011084 <raise>
 8010f90:	2001      	movs	r0, #1
 8010f92:	f7f2 fd2b 	bl	80039ec <_exit>

08010f96 <_calloc_r>:
 8010f96:	b570      	push	{r4, r5, r6, lr}
 8010f98:	fba1 5402 	umull	r5, r4, r1, r2
 8010f9c:	b934      	cbnz	r4, 8010fac <_calloc_r+0x16>
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	f7fe f980 	bl	800f2a4 <_malloc_r>
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	b928      	cbnz	r0, 8010fb4 <_calloc_r+0x1e>
 8010fa8:	4630      	mov	r0, r6
 8010faa:	bd70      	pop	{r4, r5, r6, pc}
 8010fac:	220c      	movs	r2, #12
 8010fae:	6002      	str	r2, [r0, #0]
 8010fb0:	2600      	movs	r6, #0
 8010fb2:	e7f9      	b.n	8010fa8 <_calloc_r+0x12>
 8010fb4:	462a      	mov	r2, r5
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	f7fb feec 	bl	800cd94 <memset>
 8010fbc:	e7f4      	b.n	8010fa8 <_calloc_r+0x12>
	...

08010fc0 <__env_lock>:
 8010fc0:	4801      	ldr	r0, [pc, #4]	@ (8010fc8 <__env_lock+0x8>)
 8010fc2:	f7fc bed3 	b.w	800dd6c <__retarget_lock_acquire_recursive>
 8010fc6:	bf00      	nop
 8010fc8:	20006f05 	.word	0x20006f05

08010fcc <__env_unlock>:
 8010fcc:	4801      	ldr	r0, [pc, #4]	@ (8010fd4 <__env_unlock+0x8>)
 8010fce:	f7fc becf 	b.w	800dd70 <__retarget_lock_release_recursive>
 8010fd2:	bf00      	nop
 8010fd4:	20006f05 	.word	0x20006f05

08010fd8 <_realloc_r>:
 8010fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fdc:	4607      	mov	r7, r0
 8010fde:	4614      	mov	r4, r2
 8010fe0:	460d      	mov	r5, r1
 8010fe2:	b921      	cbnz	r1, 8010fee <_realloc_r+0x16>
 8010fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe8:	4611      	mov	r1, r2
 8010fea:	f7fe b95b 	b.w	800f2a4 <_malloc_r>
 8010fee:	b92a      	cbnz	r2, 8010ffc <_realloc_r+0x24>
 8010ff0:	f7fd fd5e 	bl	800eab0 <_free_r>
 8010ff4:	4625      	mov	r5, r4
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ffc:	f000 f85e 	bl	80110bc <_malloc_usable_size_r>
 8011000:	4284      	cmp	r4, r0
 8011002:	4606      	mov	r6, r0
 8011004:	d802      	bhi.n	801100c <_realloc_r+0x34>
 8011006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801100a:	d8f4      	bhi.n	8010ff6 <_realloc_r+0x1e>
 801100c:	4621      	mov	r1, r4
 801100e:	4638      	mov	r0, r7
 8011010:	f7fe f948 	bl	800f2a4 <_malloc_r>
 8011014:	4680      	mov	r8, r0
 8011016:	b908      	cbnz	r0, 801101c <_realloc_r+0x44>
 8011018:	4645      	mov	r5, r8
 801101a:	e7ec      	b.n	8010ff6 <_realloc_r+0x1e>
 801101c:	42b4      	cmp	r4, r6
 801101e:	4622      	mov	r2, r4
 8011020:	4629      	mov	r1, r5
 8011022:	bf28      	it	cs
 8011024:	4632      	movcs	r2, r6
 8011026:	f7fc feac 	bl	800dd82 <memcpy>
 801102a:	4629      	mov	r1, r5
 801102c:	4638      	mov	r0, r7
 801102e:	f7fd fd3f 	bl	800eab0 <_free_r>
 8011032:	e7f1      	b.n	8011018 <_realloc_r+0x40>

08011034 <_raise_r>:
 8011034:	291f      	cmp	r1, #31
 8011036:	b538      	push	{r3, r4, r5, lr}
 8011038:	4605      	mov	r5, r0
 801103a:	460c      	mov	r4, r1
 801103c:	d904      	bls.n	8011048 <_raise_r+0x14>
 801103e:	2316      	movs	r3, #22
 8011040:	6003      	str	r3, [r0, #0]
 8011042:	f04f 30ff 	mov.w	r0, #4294967295
 8011046:	bd38      	pop	{r3, r4, r5, pc}
 8011048:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801104a:	b112      	cbz	r2, 8011052 <_raise_r+0x1e>
 801104c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011050:	b94b      	cbnz	r3, 8011066 <_raise_r+0x32>
 8011052:	4628      	mov	r0, r5
 8011054:	f000 f830 	bl	80110b8 <_getpid_r>
 8011058:	4622      	mov	r2, r4
 801105a:	4601      	mov	r1, r0
 801105c:	4628      	mov	r0, r5
 801105e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011062:	f000 b817 	b.w	8011094 <_kill_r>
 8011066:	2b01      	cmp	r3, #1
 8011068:	d00a      	beq.n	8011080 <_raise_r+0x4c>
 801106a:	1c59      	adds	r1, r3, #1
 801106c:	d103      	bne.n	8011076 <_raise_r+0x42>
 801106e:	2316      	movs	r3, #22
 8011070:	6003      	str	r3, [r0, #0]
 8011072:	2001      	movs	r0, #1
 8011074:	e7e7      	b.n	8011046 <_raise_r+0x12>
 8011076:	2100      	movs	r1, #0
 8011078:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801107c:	4620      	mov	r0, r4
 801107e:	4798      	blx	r3
 8011080:	2000      	movs	r0, #0
 8011082:	e7e0      	b.n	8011046 <_raise_r+0x12>

08011084 <raise>:
 8011084:	4b02      	ldr	r3, [pc, #8]	@ (8011090 <raise+0xc>)
 8011086:	4601      	mov	r1, r0
 8011088:	6818      	ldr	r0, [r3, #0]
 801108a:	f7ff bfd3 	b.w	8011034 <_raise_r>
 801108e:	bf00      	nop
 8011090:	200001a4 	.word	0x200001a4

08011094 <_kill_r>:
 8011094:	b538      	push	{r3, r4, r5, lr}
 8011096:	4d07      	ldr	r5, [pc, #28]	@ (80110b4 <_kill_r+0x20>)
 8011098:	2300      	movs	r3, #0
 801109a:	4604      	mov	r4, r0
 801109c:	4608      	mov	r0, r1
 801109e:	4611      	mov	r1, r2
 80110a0:	602b      	str	r3, [r5, #0]
 80110a2:	f7f2 fc93 	bl	80039cc <_kill>
 80110a6:	1c43      	adds	r3, r0, #1
 80110a8:	d102      	bne.n	80110b0 <_kill_r+0x1c>
 80110aa:	682b      	ldr	r3, [r5, #0]
 80110ac:	b103      	cbz	r3, 80110b0 <_kill_r+0x1c>
 80110ae:	6023      	str	r3, [r4, #0]
 80110b0:	bd38      	pop	{r3, r4, r5, pc}
 80110b2:	bf00      	nop
 80110b4:	20006f00 	.word	0x20006f00

080110b8 <_getpid_r>:
 80110b8:	f7f2 bc80 	b.w	80039bc <_getpid>

080110bc <_malloc_usable_size_r>:
 80110bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110c0:	1f18      	subs	r0, r3, #4
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	bfbc      	itt	lt
 80110c6:	580b      	ldrlt	r3, [r1, r0]
 80110c8:	18c0      	addlt	r0, r0, r3
 80110ca:	4770      	bx	lr

080110cc <_init>:
 80110cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ce:	bf00      	nop
 80110d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110d2:	bc08      	pop	{r3}
 80110d4:	469e      	mov	lr, r3
 80110d6:	4770      	bx	lr

080110d8 <_fini>:
 80110d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110da:	bf00      	nop
 80110dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110de:	bc08      	pop	{r3}
 80110e0:	469e      	mov	lr, r3
 80110e2:	4770      	bx	lr
