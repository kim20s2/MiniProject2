
Project1_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009bf8  08009bf8  0000abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  0000b074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f98  08009f98  0000af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa0  08009fa0  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa0  08009fa0  0000afa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fa4  08009fa4  0000afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009fa8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf4  20000074  0800a01c  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d68  0800a01c  0000bd68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1fa  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c00  00000000  00000000  0002929e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0002dea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149b  00000000  00000000  0002f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf3b  00000000  00000000  00030dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022415  00000000  00000000  0004dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9886  00000000  00000000  00070123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001199a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad8  00000000  00000000  001199ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001214c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009be0 	.word	0x08009be0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009be0 	.word	0x08009be0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BT_UART6_StartIT>:

#define ARR_CNT 5
#define CMD_SIZE 50

// 1바이트 인터럽트 수신 시작
void BT_UART6_StartIT(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  s_idx = 0;
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <BT_UART6_StartIT+0x20>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
  s_line_ready = 0;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <BT_UART6_StartIT+0x24>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart6, (uint8_t*)&s_rx_byte, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	4905      	ldr	r1, [pc, #20]	@ (8000604 <BT_UART6_StartIT+0x28>)
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <BT_UART6_StartIT+0x2c>)
 80005f2:	f004 f982 	bl	80048fa <HAL_UART_Receive_IT>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000d4 	.word	0x200000d4
 8000600:	20000091 	.word	0x20000091
 8000604:	20000090 	.word	0x20000090
 8000608:	20000280 	.word	0x20000280

0800060c <MX_GPIO_LED_ON>:

void MX_GPIO_LED_ON(int pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	b29b      	uxth	r3, r3
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <MX_GPIO_LED_ON+0x20>)
 800061e:	f002 fc9d 	bl	8002f5c <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	b29b      	uxth	r3, r3
 800063c:	2200      	movs	r2, #0
 800063e:	4619      	mov	r1, r3
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <MX_GPIO_LED_OFF+0x20>)
 8000642:	f002 fc8b 	bl	8002f5c <HAL_GPIO_WritePin>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000

08000654 <HAL_UART_RxCpltCallback>:

// IRQ 콜백(한 파일에서만 정의되도록 주의)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART6)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <HAL_UART_RxCpltCallback+0x6c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d128      	bne.n	80006b8 <HAL_UART_RxCpltCallback+0x64>
  {
  	static int i=0;
  	s_line[i] = s_rx_byte;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a17      	ldr	r2, [pc, #92]	@ (80006c8 <HAL_UART_RxCpltCallback+0x74>)
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	b2d1      	uxtb	r1, r2
 8000670:	4a16      	ldr	r2, [pc, #88]	@ (80006cc <HAL_UART_RxCpltCallback+0x78>)
 8000672:	54d1      	strb	r1, [r2, r3]
  	if((s_line[i] == '\n') || s_line[i] == '\r')
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <HAL_UART_RxCpltCallback+0x78>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d005      	beq.n	800068c <HAL_UART_RxCpltCallback+0x38>
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <HAL_UART_RxCpltCallback+0x78>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	2b0d      	cmp	r3, #13
 800068a:	d10b      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x50>
  	{
  		s_line[i] = '\0';
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0e      	ldr	r2, [pc, #56]	@ (80006cc <HAL_UART_RxCpltCallback+0x78>)
 8000692:	2100      	movs	r1, #0
 8000694:	54d1      	strb	r1, [r2, r3]
  		i = 0;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
  		s_line_ready = 1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <HAL_UART_RxCpltCallback+0x7c>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e004      	b.n	80006ae <HAL_UART_RxCpltCallback+0x5a>
  	}
  	else
  	{
  		i++;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a06      	ldr	r2, [pc, #24]	@ (80006c4 <HAL_UART_RxCpltCallback+0x70>)
 80006ac:	6013      	str	r3, [r2, #0]
  	}
  	HAL_UART_Receive_IT(&huart6, &s_rx_byte,1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	4905      	ldr	r1, [pc, #20]	@ (80006c8 <HAL_UART_RxCpltCallback+0x74>)
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <HAL_UART_RxCpltCallback+0x80>)
 80006b4:	f004 f921 	bl	80048fa <HAL_UART_Receive_IT>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40011400 	.word	0x40011400
 80006c4:	200000d8 	.word	0x200000d8
 80006c8:	20000090 	.word	0x20000090
 80006cc:	20000094 	.word	0x20000094
 80006d0:	20000091 	.word	0x20000091
 80006d4:	20000280 	.word	0x20000280

080006d8 <bt_puts>:

// 간단 송신 헬퍼
static inline void bt_puts(const char *s) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart6, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fd87 	bl	80001f4 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <bt_puts+0x28>)
 80006f2:	f004 f877 	bl	80047e4 <HAL_UART_Transmit>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000280 	.word	0x20000280

08000704 <bluetooth_Event>:

// 아주 단순한 커맨드 처리: LED, PING, LCD 알람 트리거 등

void bluetooth_Event()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0a4      	sub	sp, #144	@ 0x90
 8000708:	af02      	add	r7, sp, #8

  int i=0;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000710:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8000720:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000724:	2232      	movs	r2, #50	@ 0x32
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f008 f9a4 	bl	8008a76 <memset>
  char sendBuf[CMD_SIZE]={0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2232      	movs	r2, #50	@ 0x32
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f008 f99e 	bl	8008a76 <memset>
  strcpy(recvBuf,s_line);
 800073a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800073e:	493c      	ldr	r1, [pc, #240]	@ (8000830 <bluetooth_Event+0x12c>)
 8000740:	4618      	mov	r0, r3
 8000742:	f008 fa70 	bl	8008c26 <strcpy>

  printf("btData : %s\r\n",s_line);
 8000746:	493a      	ldr	r1, [pc, #232]	@ (8000830 <bluetooth_Event+0x12c>)
 8000748:	483a      	ldr	r0, [pc, #232]	@ (8000834 <bluetooth_Event+0x130>)
 800074a:	f008 f8d7 	bl	80088fc <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800074e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000752:	4939      	ldr	r1, [pc, #228]	@ (8000838 <bluetooth_Event+0x134>)
 8000754:	4618      	mov	r0, r3
 8000756:	f008 f997 	bl	8008a88 <strtok>
 800075a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 800075e:	e017      	b.n	8000790 <bluetooth_Event+0x8c>
  {
    pArray[i] =  pToken;
 8000760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	3388      	adds	r3, #136	@ 0x88
 8000768:	443b      	add	r3, r7
 800076a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800076e:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000772:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000776:	3301      	adds	r3, #1
 8000778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800077c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000780:	2b04      	cmp	r3, #4
 8000782:	dc0a      	bgt.n	800079a <bluetooth_Event+0x96>
      break;
    pToken = strtok(NULL,"[@]");
 8000784:	492c      	ldr	r1, [pc, #176]	@ (8000838 <bluetooth_Event+0x134>)
 8000786:	2000      	movs	r0, #0
 8000788:	f008 f97e 	bl	8008a88 <strtok>
 800078c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000790:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1e3      	bne.n	8000760 <bluetooth_Event+0x5c>
 8000798:	e000      	b.n	800079c <bluetooth_Event+0x98>
      break;
 800079a:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 800079c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800079e:	4927      	ldr	r1, [pc, #156]	@ (800083c <bluetooth_Event+0x138>)
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd1d 	bl	80001e0 <strcmp>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d117      	bne.n	80007dc <bluetooth_Event+0xd8>
  {
		if(!strcmp(pArray[2],"ON"))
 80007ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007ae:	4924      	ldr	r1, [pc, #144]	@ (8000840 <bluetooth_Event+0x13c>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd15 	bl	80001e0 <strcmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <bluetooth_Event+0xc0>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 80007bc:	2020      	movs	r0, #32
 80007be:	f7ff ff25 	bl	800060c <MX_GPIO_LED_ON>
 80007c2:	e01b      	b.n	80007fc <bluetooth_Event+0xf8>
		}
		else if(!strcmp(pArray[2],"OFF"))
 80007c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c6:	491f      	ldr	r1, [pc, #124]	@ (8000844 <bluetooth_Event+0x140>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd09 	bl	80001e0 <strcmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <bluetooth_Event+0xf8>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 80007d4:	2020      	movs	r0, #32
 80007d6:	f7ff ff2b 	bl	8000630 <MX_GPIO_LED_OFF>
 80007da:	e00f      	b.n	80007fc <bluetooth_Event+0xf8>
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80007dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007de:	491a      	ldr	r1, [pc, #104]	@ (8000848 <bluetooth_Event+0x144>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcfd 	bl	80001e0 <strcmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d01d      	beq.n	8000828 <bluetooth_Event+0x124>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 80007ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007ee:	4917      	ldr	r1, [pc, #92]	@ (800084c <bluetooth_Event+0x148>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fcf5 	bl	80001e0 <strcmp>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 80007fa:	e016      	b.n	800082a <bluetooth_Event+0x126>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 80007fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80007fe:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000800:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000802:	1d38      	adds	r0, r7, #4
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	460b      	mov	r3, r1
 8000808:	4911      	ldr	r1, [pc, #68]	@ (8000850 <bluetooth_Event+0x14c>)
 800080a:	f008 f8bf 	bl	800898c <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fcef 	bl	80001f4 <strlen>
 8000816:	4603      	mov	r3, r0
 8000818:	b29a      	uxth	r2, r3
 800081a:	1d39      	adds	r1, r7, #4
 800081c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <bluetooth_Event+0x150>)
 8000822:	f003 ffdf 	bl	80047e4 <HAL_UART_Transmit>
 8000826:	e000      	b.n	800082a <bluetooth_Event+0x126>
      return;
 8000828:	bf00      	nop

}
 800082a:	3788      	adds	r7, #136	@ 0x88
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000094 	.word	0x20000094
 8000834:	08009bf8 	.word	0x08009bf8
 8000838:	08009c08 	.word	0x08009c08
 800083c:	08009c0c 	.word	0x08009c0c
 8000840:	08009c10 	.word	0x08009c10
 8000844:	08009c14 	.word	0x08009c14
 8000848:	08009c18 	.word	0x08009c18
 800084c:	08009c24 	.word	0x08009c24
 8000850:	08009c34 	.word	0x08009c34
 8000854:	20000280 	.word	0x20000280

08000858 <BT_Task>:

void BT_Task(void *argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  (void)argument;
  bt_puts("BT Ready (USART6)\r\n");  // 시작 알림
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <BT_Task+0x2c>)
 8000862:	f7ff ff39 	bl	80006d8 <bt_puts>

  for (;;) {
    if (s_line_ready) {
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <BT_Task+0x30>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <BT_Task+0x24>
      s_line_ready = 0;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <BT_Task+0x30>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
      bluetooth_Event((const char*)s_line);
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <BT_Task+0x34>)
 8000878:	f7ff ff44 	bl	8000704 <bluetooth_Event>
    }
    osDelay(10); // 가벼운 폴링
 800087c:	200a      	movs	r0, #10
 800087e:	f005 f8e6 	bl	8005a4e <osDelay>
    if (s_line_ready) {
 8000882:	e7f0      	b.n	8000866 <BT_Task+0xe>
 8000884:	08009c40 	.word	0x08009c40
 8000888:	20000091 	.word	0x20000091
 800088c:	20000094 	.word	0x20000094

08000890 <make_fixed16>:
#include <string.h>

extern osMessageQueueId_t g_lcdQueue;

// 16자 고정 폭으로 패딩
static void make_fixed16(char out[17], const char* in) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
    // 좌측 정렬, 남는 칸은 공백
    snprintf(out, 17, "%-16s", in);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <make_fixed16+0x28>)
 800089e:	2111      	movs	r1, #17
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f008 f83d 	bl	8008920 <sniprintf>
    out[16] = '\0';
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3310      	adds	r3, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08009c54 	.word	0x08009c54

080008bc <lcd_update_line>:

// 바뀐 구간만 덮어쓰기 (라인 클리어 금지!)
static void lcd_update_line(uint8_t row, char new16[17], char prev16[17]) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	73fb      	strb	r3, [r7, #15]
    if (memcmp(prev16, new16, 16) == 0) return; // 동일하면 아무 것도 안 함
 80008ca:	2210      	movs	r2, #16
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f008 f8c1 	bl	8008a56 <memcmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d054      	beq.n	8000984 <lcd_update_line+0xc8>

    // 첫 번째 차이 위치 탐색
    int start = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (start < 16 && prev16[start] == new16[start]) start++;
 80008de:	e002      	b.n	80008e6 <lcd_update_line+0x2a>
 80008e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008e2:	3301      	adds	r3, #1
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	dc09      	bgt.n	8000900 <lcd_update_line+0x44>
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f6:	68b9      	ldr	r1, [r7, #8]
 80008f8:	440b      	add	r3, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d0ef      	beq.n	80008e0 <lcd_update_line+0x24>

    // 마지막 차이 뒤(미포함) 위치 탐색
    int end = 15;
 8000900:	230f      	movs	r3, #15
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (end >= start && prev16[end] == new16[end]) end--;
 8000904:	e002      	b.n	800090c <lcd_update_line+0x50>
 8000906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000908:	3b01      	subs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800090c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800090e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000910:	429a      	cmp	r2, r3
 8000912:	db09      	blt.n	8000928 <lcd_update_line+0x6c>
 8000914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091e:	68b9      	ldr	r1, [r7, #8]
 8000920:	440b      	add	r3, r1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d0ee      	beq.n	8000906 <lcd_update_line+0x4a>

    // 바뀐 부분만 커서 이동 후 덮어쓰기
    LCD_SetCursor(row, (uint8_t)start);
 8000928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800092a:	b2da      	uxtb	r2, r3
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fec7 	bl	80016c4 <LCD_SetCursor>
    // 필요한 부분만 출력
    char segment[17] = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	741a      	strb	r2, [r3, #16]
    int len = end - start + 1;
 8000946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	3301      	adds	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
    memcpy(segment, &new16[start], len);
 8000950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	18d1      	adds	r1, r2, r3
 8000956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4618      	mov	r0, r3
 800095e:	f008 f96a 	bl	8008c36 <memcpy>
    segment[len] = '\0';
 8000962:	f107 0210 	add.w	r2, r7, #16
 8000966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000968:	4413      	add	r3, r2
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
    LCD_Print(segment);
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fec8 	bl	8001708 <LCD_Print>

    // 캐시 갱신
    memcpy(prev16, new16, 16);
 8000978:	2210      	movs	r2, #16
 800097a:	68b9      	ldr	r1, [r7, #8]
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f008 f95a 	bl	8008c36 <memcpy>
 8000982:	e000      	b.n	8000986 <lcd_update_line+0xca>
    if (memcmp(prev16, new16, 16) == 0) return; // 동일하면 아무 것도 안 함
 8000984:	bf00      	nop
}
 8000986:	3730      	adds	r7, #48	@ 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <LCD_Task>:

void LCD_Task(void *argument)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b0ae      	sub	sp, #184	@ 0xb8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    (void)argument;
    app_msg_t msg;

    // 부팅 1회만 초기화/클리어
    LCD_Init();
 8000994:	f000 fe62 	bl	800165c <LCD_Init>
    LCD_Clear();
 8000998:	f000 fe8a 	bl	80016b0 <LCD_Clear>

    // 캐시 버퍼(이전 표시 내용)
    char prev1[17] = "                ";
 800099c:	4b79      	ldr	r3, [pc, #484]	@ (8000b84 <LCD_Task+0x1f8>)
 800099e:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80009a2:	461d      	mov	r5, r3
 80009a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	7023      	strb	r3, [r4, #0]
    char prev2[17] = "                ";
 80009ac:	4b75      	ldr	r3, [pc, #468]	@ (8000b84 <LCD_Task+0x1f8>)
 80009ae:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80009b2:	461d      	mov	r5, r3
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	7023      	strb	r3, [r4, #0]

    // 최초 화면
    char line1_16[17], line2_16[17];
    make_fixed16(line1_16, "Normal");
 80009bc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009c0:	4971      	ldr	r1, [pc, #452]	@ (8000b88 <LCD_Task+0x1fc>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff64 	bl	8000890 <make_fixed16>
    make_fixed16(line2_16, "G:0   V:0 F:0");
 80009c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009cc:	496f      	ldr	r1, [pc, #444]	@ (8000b8c <LCD_Task+0x200>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff5e 	bl	8000890 <make_fixed16>
    lcd_update_line(0, line1_16, prev1);
 80009d4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80009d8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009dc:	4619      	mov	r1, r3
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff6c 	bl	80008bc <lcd_update_line>
    lcd_update_line(1, line2_16, prev2);
 80009e4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80009e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009ec:	4619      	mov	r1, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff ff64 	bl	80008bc <lcd_update_line>

    for(;;) {
        if (osMessageQueueGet(g_lcdQueue, &msg, NULL, osWaitForever) == osOK) {
 80009f4:	4b66      	ldr	r3, [pc, #408]	@ (8000b90 <LCD_Task+0x204>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	2200      	movs	r2, #0
 8000a02:	f005 f913 	bl	8005c2c <osMessageQueueGet>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f3      	bne.n	80009f4 <LCD_Task+0x68>
            // 1행: 상태
        	char line1[32] = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f008 f82e 	bl	8008a76 <memset>
        	char line1_16[17], line2_16[17];

        	/* ===== 1행: 우선순위 없이 조합 (30초 래치된 msg.line1_mask 사용) ===== */
        	if (msg.line1_mask == 0) {
 8000a1a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d107      	bne.n	8000a32 <LCD_Task+0xa6>
        	    snprintf(line1, sizeof(line1), "NORMAL");
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4a5b      	ldr	r2, [pc, #364]	@ (8000b94 <LCD_Task+0x208>)
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f007 ff78 	bl	8008920 <sniprintf>
 8000a30:	e082      	b.n	8000b38 <LCD_Task+0x1ac>
        	} else {
        	    size_t pos = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        	    pos += snprintf(&line1[pos], sizeof(line1)-pos, "ALARM:");
 8000a38:	f107 020c 	add.w	r2, r7, #12
 8000a3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a40:	18d0      	adds	r0, r2, r3
 8000a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a46:	f1c3 0320 	rsb	r3, r3, #32
 8000a4a:	4a53      	ldr	r2, [pc, #332]	@ (8000b98 <LCD_Task+0x20c>)
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f007 ff67 	bl	8008920 <sniprintf>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        	    int first = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        	    if (msg.line1_mask & 0x01) { pos += snprintf(&line1[pos], sizeof(line1)-pos, "%sGAS", first?"":"/"); first=0; }
 8000a66:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d01c      	beq.n	8000aac <LCD_Task+0x120>
 8000a72:	f107 020c 	add.w	r2, r7, #12
 8000a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a7a:	18d0      	adds	r0, r2, r3
 8000a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a80:	f1c3 0120 	rsb	r1, r3, #32
 8000a84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <LCD_Task+0x104>
 8000a8c:	4b43      	ldr	r3, [pc, #268]	@ (8000b9c <LCD_Task+0x210>)
 8000a8e:	e000      	b.n	8000a92 <LCD_Task+0x106>
 8000a90:	4b43      	ldr	r3, [pc, #268]	@ (8000ba0 <LCD_Task+0x214>)
 8000a92:	4a44      	ldr	r2, [pc, #272]	@ (8000ba4 <LCD_Task+0x218>)
 8000a94:	f007 ff44 	bl	8008920 <sniprintf>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000aa0:	4413      	add	r3, r2
 8000aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        	    if (msg.line1_mask & 0x02) { pos += snprintf(&line1[pos], sizeof(line1)-pos, "%sVIB", first?"":"/"); first=0; }
 8000aac:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01c      	beq.n	8000af2 <LCD_Task+0x166>
 8000ab8:	f107 020c 	add.w	r2, r7, #12
 8000abc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ac0:	18d0      	adds	r0, r2, r3
 8000ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ac6:	f1c3 0120 	rsb	r1, r3, #32
 8000aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <LCD_Task+0x14a>
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <LCD_Task+0x210>)
 8000ad4:	e000      	b.n	8000ad8 <LCD_Task+0x14c>
 8000ad6:	4b32      	ldr	r3, [pc, #200]	@ (8000ba0 <LCD_Task+0x214>)
 8000ad8:	4a33      	ldr	r2, [pc, #204]	@ (8000ba8 <LCD_Task+0x21c>)
 8000ada:	f007 ff21 	bl	8008920 <sniprintf>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ae6:	4413      	add	r3, r2
 8000ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        	    if (msg.line1_mask & 0x04) { pos += snprintf(&line1[pos], sizeof(line1)-pos, "%sFLM", first?"":"/"); first=0; }
 8000af2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01c      	beq.n	8000b38 <LCD_Task+0x1ac>
 8000afe:	f107 020c 	add.w	r2, r7, #12
 8000b02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b06:	18d0      	adds	r0, r2, r3
 8000b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <LCD_Task+0x190>
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <LCD_Task+0x210>)
 8000b1a:	e000      	b.n	8000b1e <LCD_Task+0x192>
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <LCD_Task+0x214>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <LCD_Task+0x220>)
 8000b20:	f007 fefe 	bl	8008920 <sniprintf>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b2c:	4413      	add	r3, r2
 8000b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b32:	2300      	movs	r3, #0
 8000b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        	}
        	snprintf(line1_16, sizeof(line1_16), "%-16.16s", line1);
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000b40:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <LCD_Task+0x224>)
 8000b42:	2111      	movs	r1, #17
 8000b44:	f007 feec 	bl	8008920 <sniprintf>

        	// 2행: PIR 래치 결과
        	snprintf(line2_16, sizeof(line2_16), "%-16s", msg.pir ? "Someone HERE!!" : "No one HERE");
 8000b48:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <LCD_Task+0x1c8>
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <LCD_Task+0x228>)
 8000b52:	e000      	b.n	8000b56 <LCD_Task+0x1ca>
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <LCD_Task+0x22c>)
 8000b56:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000b5a:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <LCD_Task+0x230>)
 8000b5c:	2111      	movs	r1, #17
 8000b5e:	f007 fedf 	bl	8008920 <sniprintf>

        	// 깜빡임 방지 부분 갱신 사용 중이면 아래로
        	lcd_update_line(0, line1_16, prev1);
 8000b62:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8000b66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fea5 	bl	80008bc <lcd_update_line>
        	lcd_update_line(1, line2_16, prev2);
 8000b72:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fe9d 	bl	80008bc <lcd_update_line>
        if (osMessageQueueGet(g_lcdQueue, &msg, NULL, osWaitForever) == osOK) {
 8000b82:	e737      	b.n	80009f4 <LCD_Task+0x68>
 8000b84:	08009ccc 	.word	0x08009ccc
 8000b88:	08009c5c 	.word	0x08009c5c
 8000b8c:	08009c64 	.word	0x08009c64
 8000b90:	20000134 	.word	0x20000134
 8000b94:	08009c74 	.word	0x08009c74
 8000b98:	08009c7c 	.word	0x08009c7c
 8000b9c:	08009c84 	.word	0x08009c84
 8000ba0:	08009c88 	.word	0x08009c88
 8000ba4:	08009c8c 	.word	0x08009c8c
 8000ba8:	08009c94 	.word	0x08009c94
 8000bac:	08009c9c 	.word	0x08009c9c
 8000bb0:	08009ca4 	.word	0x08009ca4
 8000bb4:	08009cb0 	.word	0x08009cb0
 8000bb8:	08009cc0 	.word	0x08009cc0
 8000bbc:	08009c54 	.word	0x08009c54

08000bc0 <MS2T>:
#include "cmsis_os2.h"
#include "gpio.h"

volatile uint8_t g_pir_detected = 0;  // ★ 전역 정의(여기 1곳)

static inline uint32_t MS2T(uint32_t ms){
 8000bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
    return (uint32_t)((((uint64_t)ms) * osKernelGetTickFreq()) / 1000U);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	469a      	mov	sl, r3
 8000bd0:	4693      	mov	fp, r2
 8000bd2:	f004 fea1 	bl	8005918 <osKernelGetTickFreq>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4698      	mov	r8, r3
 8000bdc:	4691      	mov	r9, r2
 8000bde:	fb08 f20b 	mul.w	r2, r8, fp
 8000be2:	fb0a f309 	mul.w	r3, sl, r9
 8000be6:	4413      	add	r3, r2
 8000be8:	fbaa 4508 	umull	r4, r5, sl, r8
 8000bec:	442b      	add	r3, r5
 8000bee:	461d      	mov	r5, r3
 8000bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	f7ff fb58 	bl	80002b0 <__aeabi_uldivmod>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4613      	mov	r3, r2
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000c10 <PIR_Task>:

void PIR_Task(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    (void)argument;

    // PIR 모듈 워밍업이 필요한 경우 사용 (필요없으면 주석)
    // osDelay(30000);

    const uint32_t period = MS2T(50);  // 50ms 주기
 8000c18:	2032      	movs	r0, #50	@ 0x32
 8000c1a:	f7ff ffd1 	bl	8000bc0 <MS2T>
 8000c1e:	6138      	str	r0, [r7, #16]
    const uint8_t  HI_THR = 4;         // 200ms 이상 HIGH면 감지로 인정
 8000c20:	2304      	movs	r3, #4
 8000c22:	73fb      	strb	r3, [r7, #15]
    const uint8_t  LO_THR = 10;        // 500ms 이상 LOW면 미감지로 인정
 8000c24:	230a      	movs	r3, #10
 8000c26:	73bb      	strb	r3, [r7, #14]

    uint8_t hi_cnt = 0, lo_cnt = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	75fb      	strb	r3, [r7, #23]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75bb      	strb	r3, [r7, #22]

    for(;;){
        GPIO_PinState s = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 8000c30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c34:	4815      	ldr	r0, [pc, #84]	@ (8000c8c <PIR_Task+0x7c>)
 8000c36:	f002 f979 	bl	8002f2c <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	737b      	strb	r3, [r7, #13]

        if (s == GPIO_PIN_SET) {     // 보통 HIGH = 감지
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10f      	bne.n	8000c64 <PIR_Task+0x54>
            if (hi_cnt < 255) hi_cnt++;
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	2bff      	cmp	r3, #255	@ 0xff
 8000c48:	d002      	beq.n	8000c50 <PIR_Task+0x40>
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	75fb      	strb	r3, [r7, #23]
            lo_cnt = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	75bb      	strb	r3, [r7, #22]
            if (hi_cnt >= HI_THR) g_pir_detected = 1;
 8000c54:	7dfa      	ldrb	r2, [r7, #23]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d312      	bcc.n	8000c82 <PIR_Task+0x72>
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <PIR_Task+0x80>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e00e      	b.n	8000c82 <PIR_Task+0x72>
        } else {
            if (lo_cnt < 255) lo_cnt++;
 8000c64:	7dbb      	ldrb	r3, [r7, #22]
 8000c66:	2bff      	cmp	r3, #255	@ 0xff
 8000c68:	d002      	beq.n	8000c70 <PIR_Task+0x60>
 8000c6a:	7dbb      	ldrb	r3, [r7, #22]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	75bb      	strb	r3, [r7, #22]
            hi_cnt = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
            if (lo_cnt >= LO_THR) g_pir_detected = 0;
 8000c74:	7dba      	ldrb	r2, [r7, #22]
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d302      	bcc.n	8000c82 <PIR_Task+0x72>
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <PIR_Task+0x80>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
        }

        osDelay(period);
 8000c82:	6938      	ldr	r0, [r7, #16]
 8000c84:	f004 fee3 	bl	8005a4e <osDelay>
    for(;;){
 8000c88:	e7d2      	b.n	8000c30 <PIR_Task+0x20>
 8000c8a:	bf00      	nop
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	200000dc 	.word	0x200000dc

08000c94 <outputs_set>:
static uint32_t flm_disp_until = 0;

// PIR 2행 래치 타이머는 기존 pir_display_until 그대로 사용


static inline void outputs_set(bool on){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, LED_Alarm_Pin,    on ? LED_ON_LEVEL : LED_OFF_LEVEL);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <outputs_set+0x2c>)
 8000ca8:	f002 f958 	bl	8002f5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Buzzer_Alarm_Pin, on ? BUZ_ON_LEVEL : BUZ_OFF_LEVEL);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2140      	movs	r1, #64	@ 0x40
 8000cb2:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <outputs_set+0x2c>)
 8000cb4:	f002 f952 	bl	8002f5c <HAL_GPIO_WritePin>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <ms_now>:

static inline uint32_t ms_now(void){ return HAL_GetTick(); }
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	f001 f9e6 	bl	8002098 <HAL_GetTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <Sensor_Task>:

extern volatile uint8_t g_pir_detected;   // PIR_Task가 갱신(0/1)

void Sensor_Task(void *argument)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b0cd      	sub	sp, #308	@ 0x134
 8000cd8:	af0c      	add	r7, sp, #48	@ 0x30
 8000cda:	61f8      	str	r0, [r7, #28]
    // 2초 연속 감지용 상태
    uint32_t gas_t0=0, vib_t0=0, flm_t0=0, pir_t0=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    uint8_t  gas_hold=0, vib_hold=0, flm_hold=0, pir_hold=0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec

    // LED/부저 타임아웃
    bool     outputs_on    = false;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
    uint32_t last_alarm_ms = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    // ★ 1행(가스/진동/플레임) 표시 래치
    uint32_t line1_until = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    uint8_t  line1_mask  = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

    // ★ PIR 표시 래치: 이 시각까지는 2행에 "PIR ALARM" 유지
    uint32_t pir_display_until = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

    for(;;){
        const uint32_t now = ms_now();
 8000d2a:	f7ff ffcb 	bl	8000cc4 <ms_now>
 8000d2e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

        // --- GAS (PA0) ---
        uint16_t gas = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
        HAL_ADC_Start(&hadc1);
 8000d38:	48b3      	ldr	r0, [pc, #716]	@ (8001008 <Sensor_Task+0x334>)
 8000d3a:	f001 fa21 	bl	8002180 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8000d3e:	2105      	movs	r1, #5
 8000d40:	48b1      	ldr	r0, [pc, #708]	@ (8001008 <Sensor_Task+0x334>)
 8000d42:	f001 fb04 	bl	800234e <HAL_ADC_PollForConversion>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <Sensor_Task+0x84>
            gas = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000d4c:	48ae      	ldr	r0, [pc, #696]	@ (8001008 <Sensor_Task+0x334>)
 8000d4e:	f001 fb89 	bl	8002464 <HAL_ADC_GetValue>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
        HAL_ADC_Stop(&hadc1);
 8000d58:	48ab      	ldr	r0, [pc, #684]	@ (8001008 <Sensor_Task+0x334>)
 8000d5a:	f001 fac5 	bl	80022e8 <HAL_ADC_Stop>

        // --- VIB/FLM (PB5/PB4) ---
        const uint8_t vib_raw = (uint8_t)HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000d5e:	2120      	movs	r1, #32
 8000d60:	48aa      	ldr	r0, [pc, #680]	@ (800100c <Sensor_Task+0x338>)
 8000d62:	f002 f8e3 	bl	8002f2c <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
        const uint8_t flm_raw = (uint8_t)HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	48a7      	ldr	r0, [pc, #668]	@ (800100c <Sensor_Task+0x338>)
 8000d70:	f002 f8dc 	bl	8002f2c <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
        const uint8_t vib_det = (vib_raw == VIB_ACTIVE_LEVEL); // 1=감지
 8000d7a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
        const uint8_t flm_det = (flm_raw == FLM_ACTIVE_LEVEL); // 1=감지
 8000d8c:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc

        // --- PIR (PIR_Task 결과 사용) ---
        const uint8_t pir_det = g_pir_detected ? 1 : 0;
 8000d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8001010 <Sensor_Task+0x33c>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf14      	ite	ne
 8000da8:	2301      	movne	r3, #1
 8000daa:	2300      	moveq	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

        // --- 2초 연속 감지 유지 ---
        // GAS
        if (gas >= GAS_THRESHOLD) {
 8000db2:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8000db6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dba:	d317      	bcc.n	8000dec <Sensor_Task+0x118>
            if (!gas_hold) { if (!gas_t0) gas_t0 = now; if (now - gas_t0 >= SUSTAIN_MS) gas_hold = 1; }
 8000dbc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d119      	bne.n	8000df8 <Sensor_Task+0x124>
 8000dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d103      	bne.n	8000dd4 <Sensor_Task+0x100>
 8000dcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000dd4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000de2:	d309      	bcc.n	8000df8 <Sensor_Task+0x124>
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8000dea:	e005      	b.n	8000df8 <Sensor_Task+0x124>
        } else { gas_t0 = 0; gas_hold = 0; }
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

        // VIB
        if (vib_det) {
 8000df8:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d017      	beq.n	8000e30 <Sensor_Task+0x15c>
            if (!vib_hold) { if (!vib_t0) vib_t0 = now; if (now - vib_t0 >= SUSTAIN_MS) vib_hold = 1; }
 8000e00:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d119      	bne.n	8000e3c <Sensor_Task+0x168>
 8000e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d103      	bne.n	8000e18 <Sensor_Task+0x144>
 8000e10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000e14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000e18:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000e1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e26:	d309      	bcc.n	8000e3c <Sensor_Task+0x168>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
 8000e2e:	e005      	b.n	8000e3c <Sensor_Task+0x168>
        } else { vib_t0 = 0; vib_hold = 0; }
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

        // FLM
        if (flm_det) {
 8000e3c:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d017      	beq.n	8000e74 <Sensor_Task+0x1a0>
            if (!flm_hold) { if (!flm_t0) flm_t0 = now; if (now - flm_t0 >= SUSTAIN_MS) flm_hold = 1; }
 8000e44:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d119      	bne.n	8000e80 <Sensor_Task+0x1ac>
 8000e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d103      	bne.n	8000e5c <Sensor_Task+0x188>
 8000e54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000e58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000e5c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e6a:	d309      	bcc.n	8000e80 <Sensor_Task+0x1ac>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
 8000e72:	e005      	b.n	8000e80 <Sensor_Task+0x1ac>
        } else { flm_t0 = 0; flm_hold = 0; }
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed

        // PIR
        if (pir_det) {
 8000e80:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d017      	beq.n	8000eb8 <Sensor_Task+0x1e4>
            if (!pir_hold) { if (!pir_t0) pir_t0 = now; if (now - pir_t0 >= SUSTAIN_PIR_MS) pir_hold = 1; }
 8000e88:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d119      	bne.n	8000ec4 <Sensor_Task+0x1f0>
 8000e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <Sensor_Task+0x1cc>
 8000e98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000e9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000ea0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000eae:	d309      	bcc.n	8000ec4 <Sensor_Task+0x1f0>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
 8000eb6:	e005      	b.n	8000ec4 <Sensor_Task+0x1f0>
        } else { pir_t0 = 0; pir_hold = 0; }
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec

        // --- 2행 PIR 표시 래치 (기존 그대로) ---
        if (pir_hold) pir_display_until = now + ALARM_LATCH_MS;
 8000ec4:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <Sensor_Task+0x206>
 8000ecc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ed0:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8000ed4:	3330      	adds	r3, #48	@ 0x30
 8000ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        uint8_t pir_show = (now <= pir_display_until) ? 1U : 0U;
 8000eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d801      	bhi.n	8000eea <Sensor_Task+0x216>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <Sensor_Task+0x218>
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca

        // --- ★ 1행: 센서별 표시 래치 연장 ---
        if (gas_hold) gas_disp_until = now + ALARM_LATCH_MS;
 8000ef0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <Sensor_Task+0x232>
 8000ef8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000efc:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8000f00:	3330      	adds	r3, #48	@ 0x30
 8000f02:	4a44      	ldr	r2, [pc, #272]	@ (8001014 <Sensor_Task+0x340>)
 8000f04:	6013      	str	r3, [r2, #0]
        if (vib_hold) vib_disp_until = now + ALARM_LATCH_MS;
 8000f06:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <Sensor_Task+0x248>
 8000f0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f12:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8000f16:	3330      	adds	r3, #48	@ 0x30
 8000f18:	4a3f      	ldr	r2, [pc, #252]	@ (8001018 <Sensor_Task+0x344>)
 8000f1a:	6013      	str	r3, [r2, #0]
        if (flm_hold) flm_disp_until = now + ALARM_LATCH_MS;
 8000f1c:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <Sensor_Task+0x25e>
 8000f24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000f28:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8000f2c:	3330      	adds	r3, #48	@ 0x30
 8000f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800101c <Sensor_Task+0x348>)
 8000f30:	6013      	str	r3, [r2, #0]

        // --- ★ 1행 마스크를 '살아있는 래치'로 조합 (우선순위 없음, 누적 표시) ---
        uint8_t line1_mask = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
        if (now <= gas_disp_until) line1_mask |= MASK_GAS;
 8000f38:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <Sensor_Task+0x340>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d805      	bhi.n	8000f50 <Sensor_Task+0x27c>
 8000f44:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
        if (now <= vib_disp_until) line1_mask |= MASK_VIB;
 8000f50:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <Sensor_Task+0x344>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d805      	bhi.n	8000f68 <Sensor_Task+0x294>
 8000f5c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
        if (now <= flm_disp_until) line1_mask |= MASK_FLM;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <Sensor_Task+0x348>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d805      	bhi.n	8000f80 <Sensor_Task+0x2ac>
 8000f74:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9


        // ★ 1행 현재 마스크: 우선순위 없이 조합
        uint8_t curr_mask = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
        if (gas_hold) curr_mask |= 0x01; // GAS
 8000f86:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <Sensor_Task+0x2c6>
 8000f8e:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
        if (vib_hold) curr_mask |= 0x02; // VIB
 8000f9a:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <Sensor_Task+0x2da>
 8000fa2:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
        if (flm_hold) curr_mask |= 0x04; // FLM
 8000fae:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <Sensor_Task+0x2ee>
 8000fb6:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8

	    // ★ 1행 표시 래치: 현재 마스크가 있으면 즉시 교체 + 30초 연장,
		// 없으면 만료 전까지 유지, 만료되면 Normal 복귀
        if (curr_mask) {
 8000fc2:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d02a      	beq.n	8001020 <Sensor_Task+0x34c>
            if (line1_mask && (now <= line1_until)) {
 8000fca:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00d      	beq.n	8000fee <Sensor_Task+0x31a>
 8000fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d807      	bhi.n	8000fee <Sensor_Task+0x31a>
                // 래치 유지 중 → 새 감지(예: 10초 후 FLM) 누적
                line1_mask |= curr_mask;
 8000fde:	f897 20d9 	ldrb.w	r2, [r7, #217]	@ 0xd9
 8000fe2:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
 8000fec:	e003      	b.n	8000ff6 <Sensor_Task+0x322>
            } else {
                // 래치 만료/비어있음 → 새 조합으로 시작
                line1_mask  = curr_mask;
 8000fee:	f897 30d8 	ldrb.w	r3, [r7, #216]	@ 0xd8
 8000ff2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
            }
            // 누적/시작과 상관없이 30초 연장
            line1_until = now + ALARM_LATCH_MS;
 8000ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000ffa:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8000ffe:	3330      	adds	r3, #48	@ 0x30
 8001000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001004:	e015      	b.n	8001032 <Sensor_Task+0x35e>
 8001006:	bf00      	nop
 8001008:	200000ec 	.word	0x200000ec
 800100c:	40020400 	.word	0x40020400
 8001010:	200000dc 	.word	0x200000dc
 8001014:	200000e0 	.word	0x200000e0
 8001018:	200000e4 	.word	0x200000e4
 800101c:	200000e8 	.word	0x200000e8
        } else {
            // 새 감지가 없으면 타임아웃 확인
            if (now > line1_until) {
 8001020:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001028:	429a      	cmp	r2, r3
 800102a:	d902      	bls.n	8001032 <Sensor_Task+0x35e>
                line1_mask = 0;  // 30초 지나면 Normal
 800102c:	2300      	movs	r3, #0
 800102e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
            }
        }

        // --- LCD 메시지 구성 ---
        // 1행은 가스/진동/플레임 중 우선순위로만 표시 (PIR은 2행 전용)
        app_msg_t msg = (app_msg_t){0};
 8001032:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	811a      	strh	r2, [r3, #8]
        msg.gas        = gas;
 800103e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8001042:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        msg.vib        = vib_det;        // 즉시 det(0/1) 그대로 표시용
 8001046:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 800104a:	b29b      	uxth	r3, r3
 800104c:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        msg.flm        = flm_det;        // 표시용
 8001050:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8001054:	b29b      	uxth	r3, r3
 8001056:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
        msg.pir        = pir_show;       // 2행 표시 래치 결과
 800105a:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 800105e:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
        msg.line1_mask = line1_mask;     // ★ 1행 표시 래치 결과(조합)
 8001062:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8001066:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

        // msg.type은 안 써도 되지만 호환용으로 두려면:
        msg.type = (line1_mask ? EVT_GAS_ALARM : EVT_NONE);
 800106a:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc

        if      (gas_hold) msg.type = EVT_GAS_ALARM;
 800107c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <Sensor_Task+0x3b8>
 8001084:	2301      	movs	r3, #1
 8001086:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
 800108a:	e012      	b.n	80010b2 <Sensor_Task+0x3de>
        else if (vib_hold) msg.type = EVT_VIB_ALARM;
 800108c:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <Sensor_Task+0x3c8>
 8001094:	2302      	movs	r3, #2
 8001096:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
 800109a:	e00a      	b.n	80010b2 <Sensor_Task+0x3de>
        else if (flm_hold) msg.type = EVT_FLM_ALARM;
 800109c:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <Sensor_Task+0x3d8>
 80010a4:	2303      	movs	r3, #3
 80010a6:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
 80010aa:	e002      	b.n	80010b2 <Sensor_Task+0x3de>
        else               msg.type = EVT_NONE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc

        // --- LED/부저: 4개 중 어느 하나라도 hold면 ON, 30초 무감지면 OFF ---
        const bool any_hold = (gas_hold || vib_hold || flm_hold || pir_hold);
 80010b2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10b      	bne.n	80010d2 <Sensor_Task+0x3fe>
 80010ba:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d107      	bne.n	80010d2 <Sensor_Task+0x3fe>
 80010c2:	f897 30ed 	ldrb.w	r3, [r7, #237]	@ 0xed
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <Sensor_Task+0x3fe>
 80010ca:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <Sensor_Task+0x402>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <Sensor_Task+0x404>
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
 80010dc:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
		if (any_hold) {
 80010e8:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d011      	beq.n	8001114 <Sensor_Task+0x440>
			if (!outputs_on) { outputs_set(true); outputs_on = true; }
 80010f0:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80010f4:	f083 0301 	eor.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <Sensor_Task+0x436>
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fdc8 	bl	8000c94 <outputs_set>
 8001104:	2301      	movs	r3, #1
 8001106:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
			last_alarm_ms = now;
 800110a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001112:	e019      	b.n	8001148 <Sensor_Task+0x474>
		} else {
			if (outputs_on && last_alarm_ms && (now - last_alarm_ms) >= ALARM_LATCH_MS) {
 8001114:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8001118:	2b00      	cmp	r3, #0
 800111a:	d015      	beq.n	8001148 <Sensor_Task+0x474>
 800111c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d011      	beq.n	8001148 <Sensor_Task+0x474>
 8001124:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001132:	4293      	cmp	r3, r2
 8001134:	d908      	bls.n	8001148 <Sensor_Task+0x474>
				outputs_set(false);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fdac 	bl	8000c94 <outputs_set>
				outputs_on = false;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
				last_alarm_ms = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			char CamCommand[20] = "";
			sprintf(sendBuf, "[%s]%s\n", "카메라모듈ID", CamCommand);
			HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
		}
		*/
        osMessageQueuePut(g_lcdQueue, &msg, 0, 0);
 8001148:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <Sensor_Task+0x54c>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001150:	2300      	movs	r3, #0
 8001152:	2200      	movs	r2, #0
 8001154:	f004 fd0a 	bl	8005b6c <osMessageQueuePut>

        char buf[140];

        snprintf(buf, sizeof(buf),
           "[%s] gas=%u gH=%u vib=%u vH=%u flm=%u fH=%u pirDet=%u pirH=%u pirShow=%u Alarm=%d idle=%lu\r\n",
           (msg.type==EVT_GAS_ALARM)?"ALARM:GAS":(msg.type==EVT_VIB_ALARM)?"ALARM:VIB":
 8001158:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
        snprintf(buf, sizeof(buf),
 800115c:	2b01      	cmp	r3, #1
 800115e:	d00d      	beq.n	800117c <Sensor_Task+0x4a8>
           (msg.type==EVT_GAS_ALARM)?"ALARM:GAS":(msg.type==EVT_VIB_ALARM)?"ALARM:VIB":
 8001160:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001164:	2b02      	cmp	r3, #2
 8001166:	d007      	beq.n	8001178 <Sensor_Task+0x4a4>
           (msg.type==EVT_FLM_ALARM)?"ALARM:FLM":"NORMAL",
 8001168:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800116c:	2b03      	cmp	r3, #3
 800116e:	d101      	bne.n	8001174 <Sensor_Task+0x4a0>
 8001170:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <Sensor_Task+0x550>)
 8001172:	e004      	b.n	800117e <Sensor_Task+0x4aa>
 8001174:	4b2c      	ldr	r3, [pc, #176]	@ (8001228 <Sensor_Task+0x554>)
 8001176:	e002      	b.n	800117e <Sensor_Task+0x4aa>
           (msg.type==EVT_GAS_ALARM)?"ALARM:GAS":(msg.type==EVT_VIB_ALARM)?"ALARM:VIB":
 8001178:	4b2c      	ldr	r3, [pc, #176]	@ (800122c <Sensor_Task+0x558>)
 800117a:	e000      	b.n	800117e <Sensor_Task+0x4aa>
        snprintf(buf, sizeof(buf),
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <Sensor_Task+0x55c>)
 800117e:	f8b7 20da 	ldrh.w	r2, [r7, #218]	@ 0xda
 8001182:	61ba      	str	r2, [r7, #24]
 8001184:	f897 00ef 	ldrb.w	r0, [r7, #239]	@ 0xef
 8001188:	f897 40cd 	ldrb.w	r4, [r7, #205]	@ 0xcd
 800118c:	f897 50ee 	ldrb.w	r5, [r7, #238]	@ 0xee
 8001190:	f897 60cc 	ldrb.w	r6, [r7, #204]	@ 0xcc
 8001194:	f897 20ed 	ldrb.w	r2, [r7, #237]	@ 0xed
 8001198:	617a      	str	r2, [r7, #20]
 800119a:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 800119e:	613a      	str	r2, [r7, #16]
 80011a0:	f897 20ec 	ldrb.w	r2, [r7, #236]	@ 0xec
 80011a4:	60fa      	str	r2, [r7, #12]
 80011a6:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 80011aa:	60ba      	str	r2, [r7, #8]
 80011ac:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d006      	beq.n	80011c8 <Sensor_Task+0x4f4>
 80011ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80011be:	4611      	mov	r1, r2
 80011c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80011c4:	1a8a      	subs	r2, r1, r2
 80011c6:	e000      	b.n	80011ca <Sensor_Task+0x4f6>
 80011c8:	2200      	movs	r2, #0
 80011ca:	f107 0c24 	add.w	ip, r7, #36	@ 0x24
 80011ce:	920a      	str	r2, [sp, #40]	@ 0x28
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	9208      	str	r2, [sp, #32]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	9207      	str	r2, [sp, #28]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	9206      	str	r2, [sp, #24]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	9205      	str	r2, [sp, #20]
 80011e4:	9604      	str	r6, [sp, #16]
 80011e6:	9503      	str	r5, [sp, #12]
 80011e8:	9402      	str	r4, [sp, #8]
 80011ea:	9001      	str	r0, [sp, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	9200      	str	r2, [sp, #0]
 80011f0:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <Sensor_Task+0x560>)
 80011f2:	218c      	movs	r1, #140	@ 0x8c
 80011f4:	4660      	mov	r0, ip
 80011f6:	f007 fb93 	bl	8008920 <sniprintf>
        HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
        memset(sendBuf, 0, sizeof(sendBuf));
		sprintf(sendBuf, "[%s]SETDB@%s@%u,%u\n", "SQL", "sensor", gas, vib_det);
		HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
		*/
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80011fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe fff8 	bl	80001f4 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <Sensor_Task+0x564>)
 8001212:	f003 fae7 	bl	80047e4 <HAL_UART_Transmit>

        osDelay(SAMPLE_PERIOD_MS);
 8001216:	20c8      	movs	r0, #200	@ 0xc8
 8001218:	f004 fc19 	bl	8005a4e <osDelay>
    for(;;){
 800121c:	e585      	b.n	8000d2a <Sensor_Task+0x56>
 800121e:	bf00      	nop
 8001220:	20000134 	.word	0x20000134
 8001224:	08009ce0 	.word	0x08009ce0
 8001228:	08009cec 	.word	0x08009cec
 800122c:	08009cf4 	.word	0x08009cf4
 8001230:	08009d00 	.word	0x08009d00
 8001234:	08009d0c 	.word	0x08009d0c
 8001238:	20000238 	.word	0x20000238

0800123c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001250:	4a21      	ldr	r2, [pc, #132]	@ (80012d8 <MX_ADC1_Init+0x9c>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001256:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800125a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_ADC1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_ADC1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_ADC1_Init+0x98>)
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <MX_ADC1_Init+0xa0>)
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001282:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <MX_ADC1_Init+0x98>)
 800128a:	2201      	movs	r2, #1
 800128c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_ADC1_Init+0x98>)
 8001298:	2201      	movs	r2, #1
 800129a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129c:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_ADC1_Init+0x98>)
 800129e:	f000 ff2b 	bl	80020f8 <HAL_ADC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012a8:	f000 fb70 	bl	800198c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_ADC1_Init+0x98>)
 80012be:	f001 f8df 	bl	8002480 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012c8:	f000 fb60 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200000ec 	.word	0x200000ec
 80012d8:	40012000 	.word	0x40012000
 80012dc:	0f000001 	.word	0x0f000001

080012e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	@ (800135c <HAL_ADC_MspInit+0x7c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d127      	bne.n	8001352 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_ADC_MspInit+0x80>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a15      	ldr	r2, [pc, #84]	@ (8001360 <HAL_ADC_MspInit+0x80>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <HAL_ADC_MspInit+0x80>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_ADC_MspInit+0x80>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_ADC_MspInit+0x80>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_ADC_MspInit+0x80>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800133a:	2301      	movs	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <HAL_ADC_MspInit+0x84>)
 800134e:	f001 fc69 	bl	8002c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40012000 	.word	0x40012000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  const osMessageQueueAttr_t qattr = { .name = "lcdQueue" };
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_FREERTOS_Init+0x94>)
 8001380:	603b      	str	r3, [r7, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of lcdQueue */
  lcdQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &lcdQueue_attributes);
 8001382:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <MX_FREERTOS_Init+0x98>)
 8001384:	2102      	movs	r1, #2
 8001386:	2010      	movs	r0, #16
 8001388:	f004 fb7c 	bl	8005a84 <osMessageQueueNew>
 800138c:	4603      	mov	r3, r0
 800138e:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <MX_FREERTOS_Init+0x9c>)
 8001390:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  g_lcdQueue = osMessageQueueNew(16, sizeof(app_msg_t), &qattr);
 8001392:	463b      	mov	r3, r7
 8001394:	461a      	mov	r2, r3
 8001396:	210a      	movs	r1, #10
 8001398:	2010      	movs	r0, #16
 800139a:	f004 fb73 	bl	8005a84 <osMessageQueueNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a19      	ldr	r2, [pc, #100]	@ (8001408 <MX_FREERTOS_Init+0xa0>)
 80013a2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BTTask */
  BTTaskHandle = osThreadNew(BT_Task, NULL, &BTTask_attributes);
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <MX_FREERTOS_Init+0xa4>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4819      	ldr	r0, [pc, #100]	@ (8001410 <MX_FREERTOS_Init+0xa8>)
 80013aa:	f004 fabe 	bl	800592a <osThreadNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <MX_FREERTOS_Init+0xac>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(Sensor_Task, NULL, &SensorTask_attributes);
 80013b4:	4a18      	ldr	r2, [pc, #96]	@ (8001418 <MX_FREERTOS_Init+0xb0>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4818      	ldr	r0, [pc, #96]	@ (800141c <MX_FREERTOS_Init+0xb4>)
 80013ba:	f004 fab6 	bl	800592a <osThreadNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <MX_FREERTOS_Init+0xb8>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(LCD_Task, NULL, &LCDTask_attributes);
 80013c4:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <MX_FREERTOS_Init+0xbc>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4817      	ldr	r0, [pc, #92]	@ (8001428 <MX_FREERTOS_Init+0xc0>)
 80013ca:	f004 faae 	bl	800592a <osThreadNew>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a16      	ldr	r2, [pc, #88]	@ (800142c <MX_FREERTOS_Init+0xc4>)
 80013d2:	6013      	str	r3, [r2, #0]

  /* creation of PIRTask */
  PIRTaskHandle = osThreadNew(PIR_Task, NULL, &PIRTask_attributes);
 80013d4:	4a16      	ldr	r2, [pc, #88]	@ (8001430 <MX_FREERTOS_Init+0xc8>)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4816      	ldr	r0, [pc, #88]	@ (8001434 <MX_FREERTOS_Init+0xcc>)
 80013da:	f004 faa6 	bl	800592a <osThreadNew>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <MX_FREERTOS_Init+0xd0>)
 80013e2:	6013      	str	r3, [r2, #0]

  /* creation of AlarmCamTask */
  AlarmCamTaskHandle = osThreadNew(AlarmCam_Task, NULL, &AlarmCamTask_attributes);
 80013e4:	4a15      	ldr	r2, [pc, #84]	@ (800143c <MX_FREERTOS_Init+0xd4>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4815      	ldr	r0, [pc, #84]	@ (8001440 <MX_FREERTOS_Init+0xd8>)
 80013ea:	f004 fa9e 	bl	800592a <osThreadNew>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <MX_FREERTOS_Init+0xdc>)
 80013f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	08009da0 	.word	0x08009da0
 8001400:	08009e88 	.word	0x08009e88
 8001404:	2000014c 	.word	0x2000014c
 8001408:	20000134 	.word	0x20000134
 800140c:	08009dd4 	.word	0x08009dd4
 8001410:	08000859 	.word	0x08000859
 8001414:	20000138 	.word	0x20000138
 8001418:	08009df8 	.word	0x08009df8
 800141c:	08000cd5 	.word	0x08000cd5
 8001420:	2000013c 	.word	0x2000013c
 8001424:	08009e1c 	.word	0x08009e1c
 8001428:	0800098d 	.word	0x0800098d
 800142c:	20000140 	.word	0x20000140
 8001430:	08009e40 	.word	0x08009e40
 8001434:	08000c11 	.word	0x08000c11
 8001438:	20000144 	.word	0x20000144
 800143c:	08009e64 	.word	0x08009e64
 8001440:	08001449 	.word	0x08001449
 8001444:	20000148 	.word	0x20000148

08001448 <AlarmCam_Task>:

/* USER CODE END Header_AlarmCam_Task */
void AlarmCam_Task(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AlarmCam_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f004 fafc 	bl	8005a4e <osDelay>
 8001456:	e7fb      	b.n	8001450 <AlarmCam_Task+0x8>

08001458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <MX_GPIO_Init+0x108>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a3a      	ldr	r2, [pc, #232]	@ (8001560 <MX_GPIO_Init+0x108>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b38      	ldr	r3, [pc, #224]	@ (8001560 <MX_GPIO_Init+0x108>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <MX_GPIO_Init+0x108>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <MX_GPIO_Init+0x108>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <MX_GPIO_Init+0x108>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <MX_GPIO_Init+0x108>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001560 <MX_GPIO_Init+0x108>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <MX_GPIO_Init+0x108>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <MX_GPIO_Init+0x108>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <MX_GPIO_Init+0x108>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <MX_GPIO_Init+0x108>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Buzzer_Alarm_Pin|CAM_EN_Pin|LED_Alarm_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80014e4:	481f      	ldr	r0, [pc, #124]	@ (8001564 <MX_GPIO_Init+0x10c>)
 80014e6:	f001 fd39 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4819      	ldr	r0, [pc, #100]	@ (8001568 <MX_GPIO_Init+0x110>)
 8001502:	f001 fb8f 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Buzzer_Alarm_Pin CAM_EN_Pin LED_Alarm_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Buzzer_Alarm_Pin|CAM_EN_Pin|LED_Alarm_Pin;
 8001506:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4811      	ldr	r0, [pc, #68]	@ (8001564 <MX_GPIO_Init+0x10c>)
 8001520:	f001 fb80 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Sensor_Pin */
  GPIO_InitStruct.Pin = PIR_Sensor_Pin;
 8001524:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800152e:	2302      	movs	r3, #2
 8001530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_Sensor_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <MX_GPIO_Init+0x10c>)
 800153a:	f001 fb73 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Flame_Sensor_Pin VIB_Sensor_Pin */
  GPIO_InitStruct.Pin = Flame_Sensor_Pin|VIB_Sensor_Pin;
 800153e:	2330      	movs	r3, #48	@ 0x30
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001546:	2301      	movs	r3, #1
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	@ (800156c <MX_GPIO_Init+0x114>)
 8001552:	f001 fb67 	bl	8002c24 <HAL_GPIO_Init>

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000
 8001568:	40020800 	.word	0x40020800
 800156c:	40020400 	.word	0x40020400

08001570 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <MX_I2C1_Init+0x50>)
 8001576:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <MX_I2C1_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_I2C1_Init+0x50>)
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <MX_I2C1_Init+0x58>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_I2C1_Init+0x50>)
 800158e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	@ (80015c0 <MX_I2C1_Init+0x50>)
 80015ae:	f001 fcef 	bl	8002f90 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 f9e8 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000150 	.word	0x20000150
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	@ (8001650 <HAL_I2C_MspInit+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12c      	bne.n	8001648 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a17      	ldr	r2, [pc, #92]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480c      	ldr	r0, [pc, #48]	@ (8001658 <HAL_I2C_MspInit+0x8c>)
 8001628:	f001 fafc 	bl	8002c24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 8001636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	@ 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40005400 	.word	0x40005400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400

0800165c <LCD_Init>:
// 전역 상태
static uint8_t backlight = 0x08; // 기본 백라이트 ON

// 초기화
void LCD_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    HAL_Delay(50);  // 전원 안정화 대기
 8001660:	2032      	movs	r0, #50	@ 0x32
 8001662:	f000 fd25 	bl	80020b0 <HAL_Delay>

    // 4비트 모드 진입 시퀀스
    LCD_Write4Bits(0x30);
 8001666:	2030      	movs	r0, #48	@ 0x30
 8001668:	f000 f8b1 	bl	80017ce <LCD_Write4Bits>
    HAL_Delay(5);
 800166c:	2005      	movs	r0, #5
 800166e:	f000 fd1f 	bl	80020b0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 8001672:	2030      	movs	r0, #48	@ 0x30
 8001674:	f000 f8ab 	bl	80017ce <LCD_Write4Bits>
    HAL_Delay(5);
 8001678:	2005      	movs	r0, #5
 800167a:	f000 fd19 	bl	80020b0 <HAL_Delay>
    LCD_Write4Bits(0x30);
 800167e:	2030      	movs	r0, #48	@ 0x30
 8001680:	f000 f8a5 	bl	80017ce <LCD_Write4Bits>
    HAL_Delay(5);
 8001684:	2005      	movs	r0, #5
 8001686:	f000 fd13 	bl	80020b0 <HAL_Delay>
    LCD_Write4Bits(0x20);  // 4bit 모드
 800168a:	2020      	movs	r0, #32
 800168c:	f000 f89f 	bl	80017ce <LCD_Write4Bits>

    // 기능 설정
    LCD_SendCmd(LCD_CMD_FUNCTION_SET | LCD_FUNCTION_2LINE | LCD_FUNCTION_5x8);
 8001690:	2028      	movs	r0, #40	@ 0x28
 8001692:	f000 f84f 	bl	8001734 <LCD_SendCmd>
    // 표시 켜기
    LCD_SendCmd(LCD_CMD_DISPLAY_CTRL | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF);
 8001696:	200c      	movs	r0, #12
 8001698:	f000 f84c 	bl	8001734 <LCD_SendCmd>
    // 화면 지우기
    LCD_Clear();
 800169c:	f000 f808 	bl	80016b0 <LCD_Clear>
    // 엔트리 모드 설정
    LCD_SendCmd(LCD_CMD_ENTRY_MODE | LCD_ENTRY_LEFT | LCD_ENTRY_SHIFT_DEC);
 80016a0:	2006      	movs	r0, #6
 80016a2:	f000 f847 	bl	8001734 <LCD_SendCmd>

    HAL_Delay(100);
 80016a6:	2064      	movs	r0, #100	@ 0x64
 80016a8:	f000 fd02 	bl	80020b0 <HAL_Delay>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <LCD_Clear>:

void LCD_Clear(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    LCD_SendCmd(LCD_CMD_CLEAR);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f000 f83d 	bl	8001734 <LCD_SendCmd>
    HAL_Delay(2);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f000 fcf8 	bl	80020b0 <HAL_Delay>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	460a      	mov	r2, r1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71bb      	strb	r3, [r7, #6]
    static uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
    if (row > 1) row = 1; // 1602는 2라인
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d901      	bls.n	80016de <LCD_SetCursor+0x1a>
 80016da:	2301      	movs	r3, #1
 80016dc:	71fb      	strb	r3, [r7, #7]
    LCD_SendCmd(LCD_CMD_SET_DDRAM | (col + row_offsets[row]));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <LCD_SetCursor+0x40>)
 80016e2:	5cd2      	ldrb	r2, [r2, r3]
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f81d 	bl	8001734 <LCD_SendCmd>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000004 	.word	0x20000004

08001708 <LCD_Print>:

void LCD_Print(const char *str)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001710:	e007      	b.n	8001722 <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f81a 	bl	8001750 <LCD_SendData>
        str++;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f3      	bne.n	8001712 <LCD_Print+0xa>
    }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <LCD_SendCmd>:
    LCD_Print(buf);
}

// 내부 함수 ===========================
static void LCD_SendCmd(uint8_t cmd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f812 	bl	800176c <LCD_Send>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <LCD_SendData>:

static void LCD_SendData(uint8_t data)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2101      	movs	r1, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f804 	bl	800176c <LCD_Send>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <LCD_Send>:

static void LCD_Send(uint8_t data, uint8_t mode)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
    uint8_t highNib = data & 0xF0;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f023 030f 	bic.w	r3, r3, #15
 8001782:	73fb      	strb	r3, [r7, #15]
    uint8_t lowNib  = (data << 4) & 0xF0;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	73bb      	strb	r3, [r7, #14]

    LCD_Write4Bits(highNib | (mode ? 0x01 : 0x00));
 800178a:	79bb      	ldrb	r3, [r7, #6]
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	b25a      	sxtb	r2, r3
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179c:	4313      	orrs	r3, r2
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f813 	bl	80017ce <LCD_Write4Bits>
    LCD_Write4Bits(lowNib  | (mode ? 0x01 : 0x00));
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	b25a      	sxtb	r2, r3
 80017b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f804 	bl	80017ce <LCD_Write4Bits>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <LCD_Write4Bits>:

static void LCD_Write4Bits(uint8_t data)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f808 	bl	80017f0 <LCD_ExpanderWrite>
    LCD_PulseEnable(data);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f820 	bl	8001828 <LCD_PulseEnable>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <LCD_ExpanderWrite>:

static void LCD_ExpanderWrite(uint8_t data)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    uint8_t val = data | backlight;
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <LCD_ExpanderWrite+0x30>)
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4313      	orrs	r3, r2
 8001802:	b2db      	uxtb	r3, r3
 8001804:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &val, 1, 10);
 8001806:	f107 020f 	add.w	r2, r7, #15
 800180a:	230a      	movs	r3, #10
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	214e      	movs	r1, #78	@ 0x4e
 8001812:	4804      	ldr	r0, [pc, #16]	@ (8001824 <LCD_ExpanderWrite+0x34>)
 8001814:	f001 fd00 	bl	8003218 <HAL_I2C_Master_Transmit>
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000000 	.word	0x20000000
 8001824:	20000150 	.word	0x20000150

08001828 <LCD_PulseEnable>:

static void LCD_PulseEnable(uint8_t data)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
    LCD_ExpanderWrite(data | 0x04); // EN=1
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffd8 	bl	80017f0 <LCD_ExpanderWrite>
    HAL_Delay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f000 fc35 	bl	80020b0 <HAL_Delay>
    LCD_ExpanderWrite(data & ~0x04); // EN=0
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffce 	bl	80017f0 <LCD_ExpanderWrite>
    HAL_Delay(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 fc2b 	bl	80020b0 <HAL_Delay>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001868:	f000 fbb0 	bl	8001fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186c:	f000 f824 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f7ff fdf2 	bl	8001458 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001874:	f000 fa6a 	bl	8001d4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001878:	f7ff fce0 	bl	800123c <MX_ADC1_Init>
  MX_I2C1_Init();
 800187c:	f7ff fe78 	bl	8001570 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001880:	f000 f9ca 	bl	8001c18 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001884:	f000 fa8c 	bl	8001da0 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001888:	f000 fa36 	bl	8001cf8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)"Hello UART2\r\n", 13, HAL_MAX_DELAY);
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	220d      	movs	r2, #13
 8001892:	4907      	ldr	r1, [pc, #28]	@ (80018b0 <main+0x4c>)
 8001894:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <main+0x50>)
 8001896:	f002 ffa5 	bl	80047e4 <HAL_UART_Transmit>
  BT_UART6_StartIT();
 800189a:	f7fe fe9f 	bl	80005dc <BT_UART6_StartIT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 800189e:	f003 fff1 	bl	8005884 <osKernelInitialize>
  MX_FREERTOS_Init();
 80018a2:	f7ff fd61 	bl	8001368 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018a6:	f004 f811 	bl	80058cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <main+0x46>
 80018ae:	bf00      	nop
 80018b0:	08009dac 	.word	0x08009dac
 80018b4:	20000238 	.word	0x20000238

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b094      	sub	sp, #80	@ 0x50
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	2230      	movs	r2, #48	@ 0x30
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f007 f8d5 	bl	8008a76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <SystemClock_Config+0xcc>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a27      	ldr	r2, [pc, #156]	@ (8001984 <SystemClock_Config+0xcc>)
 80018e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ec:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <SystemClock_Config+0xcc>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <SystemClock_Config+0xd0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a21      	ldr	r2, [pc, #132]	@ (8001988 <SystemClock_Config+0xd0>)
 8001902:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <SystemClock_Config+0xd0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2310      	movs	r3, #16
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001920:	2302      	movs	r3, #2
 8001922:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001928:	2310      	movs	r3, #16
 800192a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800192c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001930:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001932:	2304      	movs	r3, #4
 8001934:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001936:	2304      	movs	r3, #4
 8001938:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	4618      	mov	r0, r3
 8001940:	f001 ffc4 	bl	80038cc <HAL_RCC_OscConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800194a:	f000 f81f 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194e:	230f      	movs	r3, #15
 8001950:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001952:	2302      	movs	r3, #2
 8001954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800195e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2102      	movs	r1, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fa26 	bl	8003dbc <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001976:	f000 f809 	bl	800198c <Error_Handler>
  }
}
 800197a:	bf00      	nop
 800197c:	3750      	adds	r7, #80	@ 0x50
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <Error_Handler+0x8>

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_MspInit+0x54>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_MspInit+0x54>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_MspInit+0x54>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_MspInit+0x54>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	210f      	movs	r1, #15
 80019da:	f06f 0001 	mvn.w	r0, #1
 80019de:	f001 f858 	bl	8002a92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <NMI_Handler+0x4>

080019f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <MemManage_Handler+0x4>

08001a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2a:	f000 fb21 	bl	8002070 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a2e:	f005 fe25 	bl	800767c <xTaskGetSchedulerState>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d001      	beq.n	8001a3c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a38:	f006 fc1e 	bl	8008278 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <USART2_IRQHandler+0x10>)
 8001a46:	f002 ff7d 	bl	8004944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000238 	.word	0x20000238

08001a54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <USART6_IRQHandler+0x10>)
 8001a5a:	f002 ff73 	bl	8004944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000280 	.word	0x20000280

08001a68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return 1;
 8001a6c:	2301      	movs	r3, #1
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_kill>:

int _kill(int pid, int sig)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a82:	f007 f8a3 	bl	8008bcc <__errno>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2216      	movs	r2, #22
 8001a8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_exit>:

void _exit (int status)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ffe7 	bl	8001a78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aaa:	bf00      	nop
 8001aac:	e7fd      	b.n	8001aaa <_exit+0x12>

08001aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e00a      	b.n	8001ad6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac0:	f3af 8000 	nop.w
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbf0      	blt.n	8001ac0 <_read+0x12>
  }

  return len;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e009      	b.n	8001b0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf1      	blt.n	8001afa <_write+0x12>
  }
  return len;
 8001b16:	687b      	ldr	r3, [r7, #4]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_close>:

int _close(int file)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b48:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_isatty>:

int _isatty(int file)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f007 f808 	bl	8008bcc <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	@ (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20020000 	.word	0x20020000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	200001a4 	.word	0x200001a4
 8001bf0:	20004d68 	.word	0x20004d68

08001bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <SystemInit+0x20>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <SystemInit+0x20>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c36:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <MX_TIM3_Init+0x98>)
 8001c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c3c:	2253      	movs	r2, #83	@ 0x53
 8001c3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c48:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c5a:	4814      	ldr	r0, [pc, #80]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c5c:	f002 face 	bl	80041fc <HAL_TIM_Base_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c66:	f7ff fe91 	bl	800198c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	4619      	mov	r1, r3
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c78:	f002 fb0f 	bl	800429a <HAL_TIM_ConfigClockSource>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c82:	f7ff fe83 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <MX_TIM3_Init+0x94>)
 8001c94:	f002 fce8 	bl	8004668 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c9e:	f7ff fe75 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200001a8 	.word	0x200001a8
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x40>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a09      	ldr	r2, [pc, #36]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x40>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x40>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	@ (8001d48 <MX_USART1_UART_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_USART1_UART_Init+0x4c>)
 8001d30:	f002 fd08 	bl	8004744 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f7ff fe27 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001f0 	.word	0x200001f0
 8001d48:	40011000 	.word	0x40011000

08001d4c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <MX_USART2_UART_Init+0x50>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_USART2_UART_Init+0x4c>)
 8001d84:	f002 fcde 	bl	8004744 <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d8e:	f7ff fdfd 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000238 	.word	0x20000238
 8001d9c:	40004400 	.word	0x40004400

08001da0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <MX_USART6_UART_Init+0x50>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001db0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_USART6_UART_Init+0x4c>)
 8001dd8:	f002 fcb4 	bl	8004744 <HAL_UART_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001de2:	f7ff fdd3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000280 	.word	0x20000280
 8001df0:	40011400 	.word	0x40011400

08001df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	@ 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a53      	ldr	r2, [pc, #332]	@ (8001f60 <HAL_UART_MspInit+0x16c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d12d      	bne.n	8001e72 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
 8001e1a:	4b52      	ldr	r3, [pc, #328]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a51      	ldr	r2, [pc, #324]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b4f      	ldr	r3, [pc, #316]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	4b4b      	ldr	r3, [pc, #300]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4b48      	ldr	r3, [pc, #288]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e60:	2307      	movs	r3, #7
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	483f      	ldr	r0, [pc, #252]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001e6c:	f000 feda 	bl	8002c24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001e70:	e072      	b.n	8001f58 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a3d      	ldr	r2, [pc, #244]	@ (8001f6c <HAL_UART_MspInit+0x178>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d134      	bne.n	8001ee6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8c:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4826      	ldr	r0, [pc, #152]	@ (8001f68 <HAL_UART_MspInit+0x174>)
 8001ed0:	f000 fea8 	bl	8002c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	2026      	movs	r0, #38	@ 0x26
 8001eda:	f000 fdda 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ede:	2026      	movs	r0, #38	@ 0x26
 8001ee0:	f000 fdf3 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8001ee4:	e038      	b.n	8001f58 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_UART_MspInit+0x17c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d133      	bne.n	8001f58 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	4a13      	ldr	r2, [pc, #76]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_UART_MspInit+0x170>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f28:	23c0      	movs	r3, #192	@ 0xc0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <HAL_UART_MspInit+0x180>)
 8001f44:	f000 fe6e 	bl	8002c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	2047      	movs	r0, #71	@ 0x47
 8001f4e:	f000 fda0 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f52:	2047      	movs	r0, #71	@ 0x47
 8001f54:	f000 fdb9 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3738      	adds	r7, #56	@ 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40011400 	.word	0x40011400
 8001f74:	40020800 	.word	0x40020800

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7c:	f7ff fe3a 	bl	8001bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f006 fe17 	bl	8008bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7ff fc5b 	bl	8001864 <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fbc:	08009fa8 	.word	0x08009fa8
  ldr r2, =_sbss
 8001fc0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fc4:	20004d68 	.word	0x20004d68

08001fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <HAL_Init+0x40>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_Init+0x40>)
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	@ (800200c <HAL_Init+0x40>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 fd41 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fcca 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fd59 	bl	8002ae6 <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f000 fd21 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	@ (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000008 	.word	0x20000008
 8002068:	20000010 	.word	0x20000010
 800206c:	2000000c 	.word	0x2000000c

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000010 	.word	0x20000010
 8002094:	200002c8 	.word	0x200002c8

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200002c8 	.word	0x200002c8

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff ffee 	bl	8002098 <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffde 	bl	8002098 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000010 	.word	0x20000010

080020f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e033      	b.n	8002176 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff f8e2 	bl	80012e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d118      	bne.n	8002168 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800213e:	f023 0302 	bic.w	r3, r3, #2
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 faca 	bl	80026e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	f043 0201 	orr.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
 8002166:	e001      	b.n	800216c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_Start+0x1a>
 8002196:	2302      	movs	r3, #2
 8002198:	e097      	b.n	80022ca <HAL_ADC_Start+0x14a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d018      	beq.n	80021e2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021c0:	4b45      	ldr	r3, [pc, #276]	@ (80022d8 <HAL_ADC_Start+0x158>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a45      	ldr	r2, [pc, #276]	@ (80022dc <HAL_ADC_Start+0x15c>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9a      	lsrs	r2, r3, #18
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d15f      	bne.n	80022b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800221a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800222a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800222e:	d106      	bne.n	800223e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	f023 0206 	bic.w	r2, r3, #6
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	645a      	str	r2, [r3, #68]	@ 0x44
 800223c:	e002      	b.n	8002244 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224c:	4b24      	ldr	r3, [pc, #144]	@ (80022e0 <HAL_ADC_Start+0x160>)
 800224e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002258:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d129      	bne.n	80022c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e020      	b.n	80022c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <HAL_ADC_Start+0x164>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11b      	bne.n	80022c8 <HAL_ADC_Start+0x148>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000008 	.word	0x20000008
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	40012300 	.word	0x40012300
 80022e4:	40012000 	.word	0x40012000

080022e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Stop+0x16>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e021      	b.n	8002342 <HAL_ADC_Stop+0x5a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236a:	d113      	bne.n	8002394 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237a:	d10b      	bne.n	8002394 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e063      	b.n	800245c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002394:	f7ff fe80 	bl	8002098 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800239a:	e021      	b.n	80023e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d01d      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_PollForConversion+0x6c>
 80023aa:	f7ff fe75 	bl	8002098 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d212      	bcs.n	80023e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d00b      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03d      	b.n	800245c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d1d6      	bne.n	800239c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0212 	mvn.w	r2, #18
 80023f6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d123      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11f      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d111      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e113      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x244>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d925      	bls.n	80024f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d9      	ldr	r1, [r3, #12]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4403      	add	r3, r0
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e022      	b.n	800253e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	2207      	movs	r2, #7
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	409a      	lsls	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	@ 0x34
 800258e:	e04c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b23      	subs	r3, #35	@ 0x23
 80025aa:	221f      	movs	r2, #31
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43da      	mvns	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	@ 0x23
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e0:	e023      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	@ 0x41
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	@ 0x41
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_ADC_ConfigChannel+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b11      	cmp	r3, #17
 8002672:	d122      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_ADC_ConfigChannel+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_ConfigChannel+0x260>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	10000012 	.word	0x10000012
 80026dc:	20000008 	.word	0x20000008
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	@ (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	@ (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	@ (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	@ 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	@ 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f7ff ff8e 	bl	800297c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff29 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff3e 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff8e 	bl	80029d0 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5d 	bl	800297c <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff31 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa2 	bl	8002a38 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff fac4 	bl	8002098 <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d008      	beq.n	8002b30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2280      	movs	r2, #128	@ 0x80
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e052      	b.n	8002bd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0216 	bic.w	r2, r2, #22
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <HAL_DMA_Abort+0x62>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0208 	bic.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	e013      	b.n	8002baa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b82:	f7ff fa89 	bl	8002098 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d90c      	bls.n	8002baa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e015      	b.n	8002bd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e4      	bne.n	8002b82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	223f      	movs	r2, #63	@ 0x3f
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e00c      	b.n	8002c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2205      	movs	r2, #5
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e159      	b.n	8002ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8148 	bne.w	8002eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d130      	bne.n	8002cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d017      	beq.n	8002d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d123      	bne.n	8002d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a2 	beq.w	8002eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b57      	ldr	r3, [pc, #348]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dba:	4b54      	ldr	r3, [pc, #336]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc6:	4a52      	ldr	r2, [pc, #328]	@ (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x202>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_GPIO_Init+0x2f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x1fe>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a47      	ldr	r2, [pc, #284]	@ (8002f1c <HAL_GPIO_Init+0x2f8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a46      	ldr	r2, [pc, #280]	@ (8002f20 <HAL_GPIO_Init+0x2fc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x1f6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <HAL_GPIO_Init+0x300>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x1f2>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e26:	2300      	movs	r3, #0
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	@ (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a24      	ldr	r2, [pc, #144]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9a:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	f67f aea2 	bls.w	8002c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e001      	b.n	8002f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fb08 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	@ 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f001 f8da 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	@ (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	@ (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	@ (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	@ (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	460b      	mov	r3, r1
 8003226:	817b      	strh	r3, [r7, #10]
 8003228:	4613      	mov	r3, r2
 800322a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7fe ff34 	bl	8002098 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b20      	cmp	r3, #32
 800323c:	f040 80e0 	bne.w	8003400 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2319      	movs	r3, #25
 8003246:	2201      	movs	r2, #1
 8003248:	4970      	ldr	r1, [pc, #448]	@ (800340c <HAL_I2C_Master_Transmit+0x1f4>)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f964 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	e0d3      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_I2C_Master_Transmit+0x50>
 8003264:	2302      	movs	r3, #2
 8003266:	e0cc      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d007      	beq.n	800328e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	@ 0x21
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2210      	movs	r2, #16
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	893a      	ldrh	r2, [r7, #8]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a50      	ldr	r2, [pc, #320]	@ (8003410 <HAL_I2C_Master_Transmit+0x1f8>)
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f89c 	bl	8003414 <I2C_MasterRequestWrite>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e08d      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032fc:	e066      	b.n	80033cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fa22 	bl	800374c <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_I2C_Master_Transmit+0x188>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	6a39      	ldr	r1, [r7, #32]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fa19 	bl	80037dc <I2C_WaitOnBTFFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01a      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d194      	bne.n	80032fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000

08003414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	460b      	mov	r3, r1
 8003422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d006      	beq.n	800343e <I2C_MasterRequestWrite+0x2a>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d003      	beq.n	800343e <I2C_MasterRequestWrite+0x2a>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800343c:	d108      	bne.n	8003450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e00b      	b.n	8003468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	2b12      	cmp	r3, #18
 8003456:	d107      	bne.n	8003468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f84f 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348e:	d103      	bne.n	8003498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e035      	b.n	8003508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034a4:	d108      	bne.n	80034b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e01b      	b.n	80034f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	11db      	asrs	r3, r3, #7
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f063 030f 	orn	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	490e      	ldr	r1, [pc, #56]	@ (8003510 <I2C_MasterRequestWrite+0xfc>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f898 	bl	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e010      	b.n	8003508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4907      	ldr	r1, [pc, #28]	@ (8003514 <I2C_MasterRequestWrite+0x100>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f888 	bl	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	00010008 	.word	0x00010008
 8003514:	00010002 	.word	0x00010002

08003518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003528:	e048      	b.n	80035bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d044      	beq.n	80035bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fdb1 	bl	8002098 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d139      	bne.n	80035bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10d      	bne.n	800356e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	43da      	mvns	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	e00c      	b.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x70>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	43da      	mvns	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	429a      	cmp	r2, r3
 800358c:	d116      	bne.n	80035bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e023      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10d      	bne.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	43da      	mvns	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	e00c      	b.n	80035fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	43da      	mvns	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d093      	beq.n	800352a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800361a:	e071      	b.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800362a:	d123      	bne.n	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	f043 0204 	orr.w	r2, r3, #4
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e067      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d041      	beq.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367c:	f7fe fd0c 	bl	8002098 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d136      	bne.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4013      	ands	r3, r2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf14      	ite	ne
 80036ae:	2301      	movne	r3, #1
 80036b0:	2300      	moveq	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	e00b      	b.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e021      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d10c      	bne.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e00b      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f af6d 	bne.w	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003758:	e034      	b.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f886 	bl	800386c <I2C_IsAcknowledgeFailed>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e034      	b.n	80037d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d028      	beq.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fe fc91 	bl	8002098 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11d      	bne.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d016      	beq.n	80037c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e007      	b.n	80037d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ce:	2b80      	cmp	r3, #128	@ 0x80
 80037d0:	d1c3      	bne.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e8:	e034      	b.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f83e 	bl	800386c <I2C_IsAcknowledgeFailed>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e034      	b.n	8003864 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d028      	beq.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe fc49 	bl	8002098 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11d      	bne.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d016      	beq.n	8003854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e007      	b.n	8003864 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d1c3      	bne.n	80037ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003882:	d11b      	bne.n	80038bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800388c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f043 0204 	orr.w	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e267      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d075      	beq.n	80039d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d00c      	beq.n	8003910 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003902:	4b82      	ldr	r3, [pc, #520]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390e:	d10b      	bne.n	8003928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	4b7e      	ldr	r3, [pc, #504]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d05b      	beq.n	80039d4 <HAL_RCC_OscConfig+0x108>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d157      	bne.n	80039d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e242      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003930:	d106      	bne.n	8003940 <HAL_RCC_OscConfig+0x74>
 8003932:	4b76      	ldr	r3, [pc, #472]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b70      	ldr	r3, [pc, #448]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6f      	ldr	r2, [pc, #444]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6d      	ldr	r3, [pc, #436]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xb0>
 8003964:	4b69      	ldr	r3, [pc, #420]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a68      	ldr	r2, [pc, #416]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b66      	ldr	r3, [pc, #408]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a65      	ldr	r2, [pc, #404]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fb88 	bl	8002098 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe fb84 	bl	8002098 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e207      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xc0>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fb74 	bl	8002098 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fb70 	bl	8002098 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1f3      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0xe8>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b47      	ldr	r3, [pc, #284]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fa:	4b44      	ldr	r3, [pc, #272]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c7      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4937      	ldr	r1, [pc, #220]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe fb29 	bl	8002098 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fb25 	bl	8002098 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a8      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4925      	ldr	r1, [pc, #148]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <HAL_RCC_OscConfig+0x244>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb08 	bl	8002098 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fe fb04 	bl	8002098 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e187      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7fe fae8 	bl	8002098 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fe fae4 	bl	8002098 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e167      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x200>
 8003aea:	e01b      	b.n	8003b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aec:	4b09      	ldr	r3, [pc, #36]	@ (8003b14 <HAL_RCC_OscConfig+0x248>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fad1 	bl	8002098 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	e00e      	b.n	8003b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fe facd 	bl	8002098 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d907      	bls.n	8003b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e150      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	42470000 	.word	0x42470000
 8003b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	4b88      	ldr	r3, [pc, #544]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ea      	bne.n	8003afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8097 	beq.w	8003c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b81      	ldr	r3, [pc, #516]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	4b7d      	ldr	r3, [pc, #500]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b52:	4b7a      	ldr	r3, [pc, #488]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b77      	ldr	r3, [pc, #476]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d118      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4b74      	ldr	r3, [pc, #464]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a73      	ldr	r2, [pc, #460]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fa8d 	bl	8002098 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fe fa89 	bl	8002098 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e10c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	4b6a      	ldr	r3, [pc, #424]	@ (8003d40 <HAL_RCC_OscConfig+0x474>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x2ea>
 8003ba8:	4b64      	ldr	r3, [pc, #400]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a63      	ldr	r2, [pc, #396]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x30c>
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bca:	4b5c      	ldr	r3, [pc, #368]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a5b      	ldr	r2, [pc, #364]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x324>
 8003bd8:	4b58      	ldr	r3, [pc, #352]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bdc:	4a57      	ldr	r2, [pc, #348]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be4:	4b55      	ldr	r3, [pc, #340]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a54      	ldr	r2, [pc, #336]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fe fa4e 	bl	8002098 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fe fa4a 	bl	8002098 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0cb      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c16:	4b49      	ldr	r3, [pc, #292]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCC_OscConfig+0x334>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fe fa38 	bl	8002098 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fa34 	bl	8002098 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0b5      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c54:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	4a38      	ldr	r2, [pc, #224]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a1 	beq.w	8003dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c6a:	4b34      	ldr	r3, [pc, #208]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d05c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d141      	bne.n	8003d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b31      	ldr	r3, [pc, #196]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe fa08 	bl	8002098 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fe fa04 	bl	8002098 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e087      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b27      	ldr	r3, [pc, #156]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	041b      	lsls	r3, r3, #16
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	491b      	ldr	r1, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fe f9dd 	bl	8002098 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fe f9d9 	bl	8002098 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e05c      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf4:	4b11      	ldr	r3, [pc, #68]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x416>
 8003d00:	e054      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <HAL_RCC_OscConfig+0x478>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe f9c6 	bl	8002098 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fe f9c2 	bl	8002098 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e045      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCC_OscConfig+0x470>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x444>
 8003d2e:	e03d      	b.n	8003dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e038      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40007000 	.word	0x40007000
 8003d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <HAL_RCC_OscConfig+0x4ec>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d028      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d121      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d11a      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d111      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0cc      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b68      	ldr	r3, [pc, #416]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d90c      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b65      	ldr	r3, [pc, #404]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a58      	ldr	r2, [pc, #352]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d044      	beq.n	8003edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d119      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e067      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e9a:	4b37      	ldr	r3, [pc, #220]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4934      	ldr	r1, [pc, #208]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eac:	f7fe f8f4 	bl	8002098 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb4:	f7fe f8f0 	bl	8002098 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e04f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 020c 	and.w	r2, r3, #12
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d1eb      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d20c      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe f854 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40023c00 	.word	0x40023c00
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	08009ea0 	.word	0x08009ea0
 8003f80:	20000008 	.word	0x20000008
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b094      	sub	sp, #80	@ 0x50
 8003f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa0:	4b79      	ldr	r3, [pc, #484]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d00d      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	f200 80e1 	bhi.w	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x34>
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fba:	e0db      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b73      	ldr	r3, [pc, #460]	@ (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc0:	e0db      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc2:	4b73      	ldr	r3, [pc, #460]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc6:	e0d8      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b6a      	ldr	r3, [pc, #424]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	462b      	mov	r3, r5
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	0159      	lsls	r1, r3, #5
 8004008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800400c:	0150      	lsls	r0, r2, #5
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4621      	mov	r1, r4
 8004014:	1a51      	subs	r1, r2, r1
 8004016:	6139      	str	r1, [r7, #16]
 8004018:	4629      	mov	r1, r5
 800401a:	eb63 0301 	sbc.w	r3, r3, r1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800402c:	4659      	mov	r1, fp
 800402e:	018b      	lsls	r3, r1, #6
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004036:	4651      	mov	r1, sl
 8004038:	018a      	lsls	r2, r1, #6
 800403a:	4651      	mov	r1, sl
 800403c:	ebb2 0801 	subs.w	r8, r2, r1
 8004040:	4659      	mov	r1, fp
 8004042:	eb63 0901 	sbc.w	r9, r3, r1
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405a:	4690      	mov	r8, r2
 800405c:	4699      	mov	r9, r3
 800405e:	4623      	mov	r3, r4
 8004060:	eb18 0303 	adds.w	r3, r8, r3
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	462b      	mov	r3, r5
 8004068:	eb49 0303 	adc.w	r3, r9, r3
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800407a:	4629      	mov	r1, r5
 800407c:	024b      	lsls	r3, r1, #9
 800407e:	4621      	mov	r1, r4
 8004080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004084:	4621      	mov	r1, r4
 8004086:	024a      	lsls	r2, r1, #9
 8004088:	4610      	mov	r0, r2
 800408a:	4619      	mov	r1, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408e:	2200      	movs	r2, #0
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004098:	f7fc f90a 	bl	80002b0 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a4:	e058      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b38      	ldr	r3, [pc, #224]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	2200      	movs	r2, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	4611      	mov	r1, r2
 80040b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	2300      	movs	r3, #0
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0159      	lsls	r1, r3, #5
 80040ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d2:	0150      	lsls	r0, r2, #5
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4641      	mov	r1, r8
 80040da:	ebb2 0a01 	subs.w	sl, r2, r1
 80040de:	4649      	mov	r1, r9
 80040e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f8:	ebb2 040a 	subs.w	r4, r2, sl
 80040fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	00eb      	lsls	r3, r5, #3
 800410a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410e:	00e2      	lsls	r2, r4, #3
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	4643      	mov	r3, r8
 8004116:	18e3      	adds	r3, r4, r3
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	464b      	mov	r3, r9
 800411c:	eb45 0303 	adc.w	r3, r5, r3
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412e:	4629      	mov	r1, r5
 8004130:	028b      	lsls	r3, r1, #10
 8004132:	4621      	mov	r1, r4
 8004134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004138:	4621      	mov	r1, r4
 800413a:	028a      	lsls	r2, r1, #10
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004142:	2200      	movs	r2, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	61fa      	str	r2, [r7, #28]
 8004148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414c:	f7fc f8b0 	bl	80002b0 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4613      	mov	r3, r2
 8004156:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	3301      	adds	r3, #1
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800416a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004172:	e002      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <HAL_RCC_GetSysClockFreq+0x204>)
 8004176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800417c:	4618      	mov	r0, r3
 800417e:	3750      	adds	r7, #80	@ 0x50
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200

08004194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000008 	.word	0x20000008

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff0 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08009eb0 	.word	0x08009eb0

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d8:	f7ff ffdc 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0b5b      	lsrs	r3, r3, #13
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08009eb0 	.word	0x08009eb0

080041fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e041      	b.n	8004292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fd46 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 f8f4 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_ConfigClockSource+0x1c>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0b4      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x186>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ee:	d03e      	beq.n	800436e <HAL_TIM_ConfigClockSource+0xd4>
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f4:	f200 8087 	bhi.w	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fc:	f000 8086 	beq.w	800440c <HAL_TIM_ConfigClockSource+0x172>
 8004300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004304:	d87f      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 8004306:	2b70      	cmp	r3, #112	@ 0x70
 8004308:	d01a      	beq.n	8004340 <HAL_TIM_ConfigClockSource+0xa6>
 800430a:	2b70      	cmp	r3, #112	@ 0x70
 800430c:	d87b      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 800430e:	2b60      	cmp	r3, #96	@ 0x60
 8004310:	d050      	beq.n	80043b4 <HAL_TIM_ConfigClockSource+0x11a>
 8004312:	2b60      	cmp	r3, #96	@ 0x60
 8004314:	d877      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 8004316:	2b50      	cmp	r3, #80	@ 0x50
 8004318:	d03c      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xfa>
 800431a:	2b50      	cmp	r3, #80	@ 0x50
 800431c:	d873      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d058      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0x13a>
 8004322:	2b40      	cmp	r3, #64	@ 0x40
 8004324:	d86f      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 8004326:	2b30      	cmp	r3, #48	@ 0x30
 8004328:	d064      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0x15a>
 800432a:	2b30      	cmp	r3, #48	@ 0x30
 800432c:	d86b      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d060      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0x15a>
 8004332:	2b20      	cmp	r3, #32
 8004334:	d867      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d05c      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0x15a>
 800433a:	2b10      	cmp	r3, #16
 800433c:	d05a      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0x15a>
 800433e:	e062      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004350:	f000 f96a 	bl	8004628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004362:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
      break;
 800436c:	e04f      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	f000 f953 	bl	8004628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e03c      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a0:	461a      	mov	r2, r3
 80043a2:	f000 f8c7 	bl	8004534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2150      	movs	r1, #80	@ 0x50
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f920 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 80043b2:	e02c      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c0:	461a      	mov	r2, r3
 80043c2:	f000 f8e6 	bl	8004592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2160      	movs	r1, #96	@ 0x60
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f910 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 80043d2:	e01c      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e0:	461a      	mov	r2, r3
 80043e2:	f000 f8a7 	bl	8004534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2140      	movs	r1, #64	@ 0x40
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f900 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 80043f2:	e00c      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f000 f8f7 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 8004404:	e003      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
      break;
 800440a:	e000      	b.n	800440e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800440c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a37      	ldr	r2, [pc, #220]	@ (8004518 <TIM_Base_SetConfig+0xf0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00f      	beq.n	8004460 <TIM_Base_SetConfig+0x38>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004446:	d00b      	beq.n	8004460 <TIM_Base_SetConfig+0x38>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a34      	ldr	r2, [pc, #208]	@ (800451c <TIM_Base_SetConfig+0xf4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d007      	beq.n	8004460 <TIM_Base_SetConfig+0x38>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a33      	ldr	r2, [pc, #204]	@ (8004520 <TIM_Base_SetConfig+0xf8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0x38>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a32      	ldr	r2, [pc, #200]	@ (8004524 <TIM_Base_SetConfig+0xfc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a28      	ldr	r2, [pc, #160]	@ (8004518 <TIM_Base_SetConfig+0xf0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01b      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004480:	d017      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a25      	ldr	r2, [pc, #148]	@ (800451c <TIM_Base_SetConfig+0xf4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a24      	ldr	r2, [pc, #144]	@ (8004520 <TIM_Base_SetConfig+0xf8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00f      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <TIM_Base_SetConfig+0xfc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a22      	ldr	r2, [pc, #136]	@ (8004528 <TIM_Base_SetConfig+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a21      	ldr	r2, [pc, #132]	@ (800452c <TIM_Base_SetConfig+0x104>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a20      	ldr	r2, [pc, #128]	@ (8004530 <TIM_Base_SetConfig+0x108>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d108      	bne.n	80044c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004518 <TIM_Base_SetConfig+0xf0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d103      	bne.n	80044f2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f043 0204 	orr.w	r2, r3, #4
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	601a      	str	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40014000 	.word	0x40014000
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800

08004534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0201 	bic.w	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800455e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 030a 	bic.w	r3, r3, #10
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004592:	b480      	push	{r7}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f023 0210 	bic.w	r2, r3, #16
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	f043 0307 	orr.w	r3, r3, #7
 8004614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	021a      	lsls	r2, r3, #8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	431a      	orrs	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e050      	b.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1c      	ldr	r2, [pc, #112]	@ (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d013      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a16      	ldr	r2, [pc, #88]	@ (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a13      	ldr	r2, [pc, #76]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10c      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	4313      	orrs	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40014000 	.word	0x40014000

08004744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e042      	b.n	80047dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd fb42 	bl	8001df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	@ 0x24
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fdd3 	bl	8005334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800479c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	@ 0x28
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b20      	cmp	r3, #32
 8004802:	d175      	bne.n	80048f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_UART_Transmit+0x2c>
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e06e      	b.n	80048f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2221      	movs	r2, #33	@ 0x21
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004822:	f7fd fc39 	bl	8002098 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483c:	d108      	bne.n	8004850 <HAL_UART_Transmit+0x6c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e003      	b.n	8004858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004858:	e02e      	b.n	80048b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2180      	movs	r1, #128	@ 0x80
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fb37 	bl	8004ed8 <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e03a      	b.n	80048f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3302      	adds	r3, #2
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e007      	b.n	80048aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1cb      	bne.n	800485a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2140      	movs	r1, #64	@ 0x40
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fb03 	bl	8004ed8 <UART_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e006      	b.n	80048f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	4613      	mov	r3, r2
 8004906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b20      	cmp	r3, #32
 8004912:	d112      	bne.n	800493a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Receive_IT+0x26>
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e00b      	b.n	800493c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	461a      	mov	r2, r3
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fb2a 	bl	8004f8a <UART_Start_Receive_IT>
 8004936:	4603      	mov	r3, r0
 8004938:	e000      	b.n	800493c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b0ba      	sub	sp, #232	@ 0xe8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800496a:	2300      	movs	r3, #0
 800496c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10f      	bne.n	80049aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_UART_IRQHandler+0x66>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fc07 	bl	80051b6 <UART_Receive_IT>
      return;
 80049a8:	e273      	b.n	8004e92 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80de 	beq.w	8004b70 <HAL_UART_IRQHandler+0x22c>
 80049b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 80d1 	beq.w	8004b70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_UART_IRQHandler+0xae>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	f043 0201 	orr.w	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_UART_IRQHandler+0xd2>
 80049fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_UART_IRQHandler+0xf6>
 8004a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	f043 0204 	orr.w	r2, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d011      	beq.n	8004a6a <HAL_UART_IRQHandler+0x126>
 8004a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d105      	bne.n	8004a5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a62:	f043 0208 	orr.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 820a 	beq.w	8004e88 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_UART_IRQHandler+0x14e>
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fb92 	bl	80051b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_UART_IRQHandler+0x17a>
 8004ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d04f      	beq.n	8004b5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa9d 	bl	8004ffe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ace:	2b40      	cmp	r3, #64	@ 0x40
 8004ad0:	d141      	bne.n	8004b56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3314      	adds	r3, #20
 8004afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004afe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1d9      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d013      	beq.n	8004b4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	4a8a      	ldr	r2, [pc, #552]	@ (8004d54 <HAL_UART_IRQHandler+0x410>)
 8004b2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe f853 	bl	8002bde <HAL_DMA_Abort_IT>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4c:	e00e      	b.n	8004b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9ac 	bl	8004eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b54:	e00a      	b.n	8004b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9a8 	bl	8004eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	e006      	b.n	8004b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9a4 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b6a:	e18d      	b.n	8004e88 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	bf00      	nop
    return;
 8004b6e:	e18b      	b.n	8004e88 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 8167 	bne.w	8004e48 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8160 	beq.w	8004e48 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8159 	beq.w	8004e48 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	f040 80ce 	bne.w	8004d58 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80a9 	beq.w	8004d24 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	f080 80a2 	bcs.w	8004d24 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004be6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bf2:	f000 8088 	beq.w	8004d06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1d9      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3314      	adds	r3, #20
 8004c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e1      	bne.n	8004c42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3314      	adds	r3, #20
 8004c84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004caa:	e841 2300 	strex	r3, r2, [r1]
 8004cae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e3      	bne.n	8004c7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd6:	f023 0310 	bic.w	r3, r3, #16
 8004cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ce8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e3      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fd fefc 	bl	8002afe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8cf 	bl	8004ec0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d22:	e0b3      	b.n	8004e8c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	f040 80ad 	bne.w	8004e8c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d3c:	f040 80a6 	bne.w	8004e8c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8b7 	bl	8004ec0 <HAL_UARTEx_RxEventCallback>
      return;
 8004d52:	e09b      	b.n	8004e8c <HAL_UART_IRQHandler+0x548>
 8004d54:	080050c5 	.word	0x080050c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 808e 	beq.w	8004e90 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8089 	beq.w	8004e90 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004da2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3314      	adds	r3, #20
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3314      	adds	r3, #20
 8004dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dda:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e3      	bne.n	8004db6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0310 	bic.w	r3, r3, #16
 8004e12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e20:	61fa      	str	r2, [r7, #28]
 8004e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e3      	bne.n	8004dfc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f83d 	bl	8004ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e46:	e023      	b.n	8004e90 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_UART_IRQHandler+0x524>
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f940 	bl	80050e6 <UART_Transmit_IT>
    return;
 8004e66:	e014      	b.n	8004e92 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <HAL_UART_IRQHandler+0x54e>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f980 	bl	8005186 <UART_EndTransmit_IT>
    return;
 8004e86:	e004      	b.n	8004e92 <HAL_UART_IRQHandler+0x54e>
    return;
 8004e88:	bf00      	nop
 8004e8a:	e002      	b.n	8004e92 <HAL_UART_IRQHandler+0x54e>
      return;
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_IRQHandler+0x54e>
      return;
 8004e90:	bf00      	nop
  }
}
 8004e92:	37e8      	adds	r7, #232	@ 0xe8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee8:	e03b      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d037      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fd f8d1 	bl	8002098 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e03a      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d023      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b80      	cmp	r3, #128	@ 0x80
 8004f1e:	d020      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b40      	cmp	r3, #64	@ 0x40
 8004f24:	d01d      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d116      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f857 	bl	8004ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2208      	movs	r2, #8
 8004f54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e00f      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d0b4      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	4613      	mov	r3, r2
 8004f96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2222      	movs	r2, #34	@ 0x22
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0220 	orr.w	r2, r2, #32
 8004fee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b095      	sub	sp, #84	@ 0x54
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800501c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005026:	643a      	str	r2, [r7, #64]	@ 0x40
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800502c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	61fb      	str	r3, [r7, #28]
   return(result);
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3314      	adds	r3, #20
 8005058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800505a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	2b01      	cmp	r3, #1
 8005074:	d119      	bne.n	80050aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	60bb      	str	r3, [r7, #8]
   return(result);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f023 0310 	bic.w	r3, r3, #16
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005096:	61ba      	str	r2, [r7, #24]
 8005098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6979      	ldr	r1, [r7, #20]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	613b      	str	r3, [r7, #16]
   return(result);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050b8:	bf00      	nop
 80050ba:	3754      	adds	r7, #84	@ 0x54
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff fee7 	bl	8004eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b21      	cmp	r3, #33	@ 0x21
 80050f8:	d13e      	bne.n	8005178 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005102:	d114      	bne.n	800512e <UART_Transmit_IT+0x48>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d110      	bne.n	800512e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005120:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	621a      	str	r2, [r3, #32]
 800512c:	e008      	b.n	8005140 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	1c59      	adds	r1, r3, #1
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6211      	str	r1, [r2, #32]
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4619      	mov	r1, r3
 800514e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fe76 	bl	8004e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b08c      	sub	sp, #48	@ 0x30
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b22      	cmp	r3, #34	@ 0x22
 80051d0:	f040 80aa 	bne.w	8005328 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051dc:	d115      	bne.n	800520a <UART_Receive_IT+0x54>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d111      	bne.n	800520a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
 8005208:	e024      	b.n	8005254 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005218:	d007      	beq.n	800522a <UART_Receive_IT+0x74>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <UART_Receive_IT+0x82>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e008      	b.n	800524a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005244:	b2da      	uxtb	r2, r3
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4619      	mov	r1, r3
 8005262:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005264:	2b00      	cmp	r3, #0
 8005266:	d15d      	bne.n	8005324 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0220 	bic.w	r2, r2, #32
 8005276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d135      	bne.n	800531a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	613b      	str	r3, [r7, #16]
   return(result);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d4:	623a      	str	r2, [r7, #32]
 80052d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d10a      	bne.n	800530c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fdd4 	bl	8004ec0 <HAL_UARTEx_RxEventCallback>
 8005318:	e002      	b.n	8005320 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fb f99a 	bl	8000654 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e002      	b.n	800532a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3730      	adds	r7, #48	@ 0x30
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005338:	b0c0      	sub	sp, #256	@ 0x100
 800533a:	af00      	add	r7, sp, #0
 800533c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	68d9      	ldr	r1, [r3, #12]
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	ea40 0301 	orr.w	r3, r0, r1
 800535c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	431a      	orrs	r2, r3
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	431a      	orrs	r2, r3
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800538c:	f021 010c 	bic.w	r1, r1, #12
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800539a:	430b      	orrs	r3, r1
 800539c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ae:	6999      	ldr	r1, [r3, #24]
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	ea40 0301 	orr.w	r3, r0, r1
 80053ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005600 <UART_SetConfig+0x2cc>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d005      	beq.n	80053d4 <UART_SetConfig+0xa0>
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005604 <UART_SetConfig+0x2d0>)
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d104      	bne.n	80053de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053d4:	f7fe fefe 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 80053d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053dc:	e003      	b.n	80053e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053de:	f7fe fee5 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 80053e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f0:	f040 810c 	bne.w	800560c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005406:	4622      	mov	r2, r4
 8005408:	462b      	mov	r3, r5
 800540a:	1891      	adds	r1, r2, r2
 800540c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800540e:	415b      	adcs	r3, r3
 8005410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005416:	4621      	mov	r1, r4
 8005418:	eb12 0801 	adds.w	r8, r2, r1
 800541c:	4629      	mov	r1, r5
 800541e:	eb43 0901 	adc.w	r9, r3, r1
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800542e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005436:	4690      	mov	r8, r2
 8005438:	4699      	mov	r9, r3
 800543a:	4623      	mov	r3, r4
 800543c:	eb18 0303 	adds.w	r3, r8, r3
 8005440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005444:	462b      	mov	r3, r5
 8005446:	eb49 0303 	adc.w	r3, r9, r3
 800544a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800545a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800545e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005462:	460b      	mov	r3, r1
 8005464:	18db      	adds	r3, r3, r3
 8005466:	653b      	str	r3, [r7, #80]	@ 0x50
 8005468:	4613      	mov	r3, r2
 800546a:	eb42 0303 	adc.w	r3, r2, r3
 800546e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005478:	f7fa ff1a 	bl	80002b0 <__aeabi_uldivmod>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4b61      	ldr	r3, [pc, #388]	@ (8005608 <UART_SetConfig+0x2d4>)
 8005482:	fba3 2302 	umull	r2, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	011c      	lsls	r4, r3, #4
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005494:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800549c:	4642      	mov	r2, r8
 800549e:	464b      	mov	r3, r9
 80054a0:	1891      	adds	r1, r2, r2
 80054a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054a4:	415b      	adcs	r3, r3
 80054a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054ac:	4641      	mov	r1, r8
 80054ae:	eb12 0a01 	adds.w	sl, r2, r1
 80054b2:	4649      	mov	r1, r9
 80054b4:	eb43 0b01 	adc.w	fp, r3, r1
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054cc:	4692      	mov	sl, r2
 80054ce:	469b      	mov	fp, r3
 80054d0:	4643      	mov	r3, r8
 80054d2:	eb1a 0303 	adds.w	r3, sl, r3
 80054d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054da:	464b      	mov	r3, r9
 80054dc:	eb4b 0303 	adc.w	r3, fp, r3
 80054e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054f8:	460b      	mov	r3, r1
 80054fa:	18db      	adds	r3, r3, r3
 80054fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80054fe:	4613      	mov	r3, r2
 8005500:	eb42 0303 	adc.w	r3, r2, r3
 8005504:	647b      	str	r3, [r7, #68]	@ 0x44
 8005506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800550a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800550e:	f7fa fecf 	bl	80002b0 <__aeabi_uldivmod>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4611      	mov	r1, r2
 8005518:	4b3b      	ldr	r3, [pc, #236]	@ (8005608 <UART_SetConfig+0x2d4>)
 800551a:	fba3 2301 	umull	r2, r3, r3, r1
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	2264      	movs	r2, #100	@ 0x64
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	1acb      	subs	r3, r1, r3
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800552e:	4b36      	ldr	r3, [pc, #216]	@ (8005608 <UART_SetConfig+0x2d4>)
 8005530:	fba3 2302 	umull	r2, r3, r3, r2
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800553c:	441c      	add	r4, r3
 800553e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005542:	2200      	movs	r2, #0
 8005544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005548:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800554c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	1891      	adds	r1, r2, r2
 8005556:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005558:	415b      	adcs	r3, r3
 800555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800555c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005560:	4641      	mov	r1, r8
 8005562:	1851      	adds	r1, r2, r1
 8005564:	6339      	str	r1, [r7, #48]	@ 0x30
 8005566:	4649      	mov	r1, r9
 8005568:	414b      	adcs	r3, r1
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005578:	4659      	mov	r1, fp
 800557a:	00cb      	lsls	r3, r1, #3
 800557c:	4651      	mov	r1, sl
 800557e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005582:	4651      	mov	r1, sl
 8005584:	00ca      	lsls	r2, r1, #3
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	4603      	mov	r3, r0
 800558c:	4642      	mov	r2, r8
 800558e:	189b      	adds	r3, r3, r2
 8005590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005594:	464b      	mov	r3, r9
 8005596:	460a      	mov	r2, r1
 8005598:	eb42 0303 	adc.w	r3, r2, r3
 800559c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055b4:	460b      	mov	r3, r1
 80055b6:	18db      	adds	r3, r3, r3
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ba:	4613      	mov	r3, r2
 80055bc:	eb42 0303 	adc.w	r3, r2, r3
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055ca:	f7fa fe71 	bl	80002b0 <__aeabi_uldivmod>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005608 <UART_SetConfig+0x2d4>)
 80055d4:	fba3 1302 	umull	r1, r3, r3, r2
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	2164      	movs	r1, #100	@ 0x64
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	3332      	adds	r3, #50	@ 0x32
 80055e6:	4a08      	ldr	r2, [pc, #32]	@ (8005608 <UART_SetConfig+0x2d4>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f003 0207 	and.w	r2, r3, #7
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4422      	add	r2, r4
 80055fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055fc:	e106      	b.n	800580c <UART_SetConfig+0x4d8>
 80055fe:	bf00      	nop
 8005600:	40011000 	.word	0x40011000
 8005604:	40011400 	.word	0x40011400
 8005608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800560c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005610:	2200      	movs	r2, #0
 8005612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005616:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800561a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800561e:	4642      	mov	r2, r8
 8005620:	464b      	mov	r3, r9
 8005622:	1891      	adds	r1, r2, r2
 8005624:	6239      	str	r1, [r7, #32]
 8005626:	415b      	adcs	r3, r3
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
 800562a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800562e:	4641      	mov	r1, r8
 8005630:	1854      	adds	r4, r2, r1
 8005632:	4649      	mov	r1, r9
 8005634:	eb43 0501 	adc.w	r5, r3, r1
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	00eb      	lsls	r3, r5, #3
 8005642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005646:	00e2      	lsls	r2, r4, #3
 8005648:	4614      	mov	r4, r2
 800564a:	461d      	mov	r5, r3
 800564c:	4643      	mov	r3, r8
 800564e:	18e3      	adds	r3, r4, r3
 8005650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005654:	464b      	mov	r3, r9
 8005656:	eb45 0303 	adc.w	r3, r5, r3
 800565a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800566a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800567a:	4629      	mov	r1, r5
 800567c:	008b      	lsls	r3, r1, #2
 800567e:	4621      	mov	r1, r4
 8005680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005684:	4621      	mov	r1, r4
 8005686:	008a      	lsls	r2, r1, #2
 8005688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800568c:	f7fa fe10 	bl	80002b0 <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4b60      	ldr	r3, [pc, #384]	@ (8005818 <UART_SetConfig+0x4e4>)
 8005696:	fba3 2302 	umull	r2, r3, r3, r2
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	011c      	lsls	r4, r3, #4
 800569e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	1891      	adds	r1, r2, r2
 80056b6:	61b9      	str	r1, [r7, #24]
 80056b8:	415b      	adcs	r3, r3
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c0:	4641      	mov	r1, r8
 80056c2:	1851      	adds	r1, r2, r1
 80056c4:	6139      	str	r1, [r7, #16]
 80056c6:	4649      	mov	r1, r9
 80056c8:	414b      	adcs	r3, r1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056d8:	4659      	mov	r1, fp
 80056da:	00cb      	lsls	r3, r1, #3
 80056dc:	4651      	mov	r1, sl
 80056de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e2:	4651      	mov	r1, sl
 80056e4:	00ca      	lsls	r2, r1, #3
 80056e6:	4610      	mov	r0, r2
 80056e8:	4619      	mov	r1, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	4642      	mov	r2, r8
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056f4:	464b      	mov	r3, r9
 80056f6:	460a      	mov	r2, r1
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800570a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005718:	4649      	mov	r1, r9
 800571a:	008b      	lsls	r3, r1, #2
 800571c:	4641      	mov	r1, r8
 800571e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005722:	4641      	mov	r1, r8
 8005724:	008a      	lsls	r2, r1, #2
 8005726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800572a:	f7fa fdc1 	bl	80002b0 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4611      	mov	r1, r2
 8005734:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <UART_SetConfig+0x4e4>)
 8005736:	fba3 2301 	umull	r2, r3, r3, r1
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	2264      	movs	r2, #100	@ 0x64
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	1acb      	subs	r3, r1, r3
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	3332      	adds	r3, #50	@ 0x32
 8005748:	4a33      	ldr	r2, [pc, #204]	@ (8005818 <UART_SetConfig+0x4e4>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005754:	441c      	add	r4, r3
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	673b      	str	r3, [r7, #112]	@ 0x70
 800575e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005760:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	1891      	adds	r1, r2, r2
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	415b      	adcs	r3, r3
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005774:	4641      	mov	r1, r8
 8005776:	1851      	adds	r1, r2, r1
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	4649      	mov	r1, r9
 800577c:	414b      	adcs	r3, r1
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800578c:	4659      	mov	r1, fp
 800578e:	00cb      	lsls	r3, r1, #3
 8005790:	4651      	mov	r1, sl
 8005792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005796:	4651      	mov	r1, sl
 8005798:	00ca      	lsls	r2, r1, #3
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	4642      	mov	r2, r8
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057a6:	464b      	mov	r3, r9
 80057a8:	460a      	mov	r2, r1
 80057aa:	eb42 0303 	adc.w	r3, r2, r3
 80057ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057c8:	4649      	mov	r1, r9
 80057ca:	008b      	lsls	r3, r1, #2
 80057cc:	4641      	mov	r1, r8
 80057ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057d2:	4641      	mov	r1, r8
 80057d4:	008a      	lsls	r2, r1, #2
 80057d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057da:	f7fa fd69 	bl	80002b0 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <UART_SetConfig+0x4e4>)
 80057e4:	fba3 1302 	umull	r1, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	2164      	movs	r1, #100	@ 0x64
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	3332      	adds	r3, #50	@ 0x32
 80057f6:	4a08      	ldr	r2, [pc, #32]	@ (8005818 <UART_SetConfig+0x4e4>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	f003 020f 	and.w	r2, r3, #15
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4422      	add	r2, r4
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005812:	46bd      	mov	sp, r7
 8005814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005818:	51eb851f 	.word	0x51eb851f

0800581c <__NVIC_SetPriority>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	6039      	str	r1, [r7, #0]
 8005826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db0a      	blt.n	8005846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	490c      	ldr	r1, [pc, #48]	@ (8005868 <__NVIC_SetPriority+0x4c>)
 8005836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583a:	0112      	lsls	r2, r2, #4
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	440b      	add	r3, r1
 8005840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005844:	e00a      	b.n	800585c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	4908      	ldr	r1, [pc, #32]	@ (800586c <__NVIC_SetPriority+0x50>)
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	3b04      	subs	r3, #4
 8005854:	0112      	lsls	r2, r2, #4
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	440b      	add	r3, r1
 800585a:	761a      	strb	r2, [r3, #24]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	e000e100 	.word	0xe000e100
 800586c:	e000ed00 	.word	0xe000ed00

08005870 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005874:	2100      	movs	r1, #0
 8005876:	f06f 0004 	mvn.w	r0, #4
 800587a:	f7ff ffcf 	bl	800581c <__NVIC_SetPriority>
#endif
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800588a:	f3ef 8305 	mrs	r3, IPSR
 800588e:	603b      	str	r3, [r7, #0]
  return(result);
 8005890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005896:	f06f 0305 	mvn.w	r3, #5
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	e00c      	b.n	80058b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800589e:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <osKernelInitialize+0x44>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058a6:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <osKernelInitialize+0x44>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e002      	b.n	80058b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058b8:	687b      	ldr	r3, [r7, #4]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200002cc 	.word	0x200002cc

080058cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d2:	f3ef 8305 	mrs	r3, IPSR
 80058d6:	603b      	str	r3, [r7, #0]
  return(result);
 80058d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058de:	f06f 0305 	mvn.w	r3, #5
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	e010      	b.n	8005908 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <osKernelStart+0x48>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d109      	bne.n	8005902 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058ee:	f7ff ffbf 	bl	8005870 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <osKernelStart+0x48>)
 80058f4:	2202      	movs	r2, #2
 80058f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058f8:	f001 fa72 	bl	8006de0 <vTaskStartScheduler>
      stat = osOK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e002      	b.n	8005908 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
 8005906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005908:	687b      	ldr	r3, [r7, #4]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200002cc 	.word	0x200002cc

08005918 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800591c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800592a:	b580      	push	{r7, lr}
 800592c:	b08e      	sub	sp, #56	@ 0x38
 800592e:	af04      	add	r7, sp, #16
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593a:	f3ef 8305 	mrs	r3, IPSR
 800593e:	617b      	str	r3, [r7, #20]
  return(result);
 8005940:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005942:	2b00      	cmp	r3, #0
 8005944:	d17e      	bne.n	8005a44 <osThreadNew+0x11a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d07b      	beq.n	8005a44 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800594c:	2380      	movs	r3, #128	@ 0x80
 800594e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005950:	2318      	movs	r3, #24
 8005952:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
 800595c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d045      	beq.n	80059f0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <osThreadNew+0x48>
        name = attr->name;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <osThreadNew+0x6e>
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b38      	cmp	r3, #56	@ 0x38
 800598a:	d805      	bhi.n	8005998 <osThreadNew+0x6e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <osThreadNew+0x72>
        return (NULL);
 8005998:	2300      	movs	r3, #0
 800599a:	e054      	b.n	8005a46 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <osThreadNew+0xa8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b5b      	cmp	r3, #91	@ 0x5b
 80059ba:	d90a      	bls.n	80059d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d006      	beq.n	80059d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <osThreadNew+0xa8>
        mem = 1;
 80059cc:	2301      	movs	r3, #1
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e010      	b.n	80059f4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10c      	bne.n	80059f4 <osThreadNew+0xca>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <osThreadNew+0xca>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <osThreadNew+0xca>
          mem = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	e001      	b.n	80059f4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d110      	bne.n	8005a1c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a02:	9202      	str	r2, [sp, #8]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f001 f809 	bl	8006a28 <xTaskCreateStatic>
 8005a16:	4603      	mov	r3, r0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e013      	b.n	8005a44 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d110      	bne.n	8005a44 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	f107 0310 	add.w	r3, r7, #16
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f001 f857 	bl	8006ae8 <xTaskCreate>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d001      	beq.n	8005a44 <osThreadNew+0x11a>
            hTask = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a44:	693b      	ldr	r3, [r7, #16]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3728      	adds	r7, #40	@ 0x28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a56:	f3ef 8305 	mrs	r3, IPSR
 8005a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <osDelay+0x1c>
    stat = osErrorISR;
 8005a62:	f06f 0305 	mvn.w	r3, #5
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e007      	b.n	8005a7a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f97d 	bl	8006d74 <vTaskDelay>
    }
  }

  return (stat);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	@ 0x28
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a94:	f3ef 8305 	mrs	r3, IPSR
 8005a98:	613b      	str	r3, [r7, #16]
  return(result);
 8005a9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d15f      	bne.n	8005b60 <osMessageQueueNew+0xdc>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d05c      	beq.n	8005b60 <osMessageQueueNew+0xdc>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d059      	beq.n	8005b60 <osMessageQueueNew+0xdc>
    mem = -1;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d029      	beq.n	8005b0c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d012      	beq.n	8005ae6 <osMessageQueueNew+0x62>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ac6:	d90e      	bls.n	8005ae6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <osMessageQueueNew+0x62>
        mem = 1;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e014      	b.n	8005b10 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d110      	bne.n	8005b10 <osMessageQueueNew+0x8c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10c      	bne.n	8005b10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d108      	bne.n	8005b10 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <osMessageQueueNew+0x8c>
          mem = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e001      	b.n	8005b10 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10b      	bne.n	8005b2e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2100      	movs	r1, #0
 8005b20:	9100      	str	r1, [sp, #0]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa31 	bl	8005f8c <xQueueGenericCreateStatic>
 8005b2a:	61f8      	str	r0, [r7, #28]
 8005b2c:	e008      	b.n	8005b40 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b34:	2200      	movs	r2, #0
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 faa4 	bl	8006086 <xQueueGenericCreate>
 8005b3e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e001      	b.n	8005b58 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b58:	6979      	ldr	r1, [r7, #20]
 8005b5a:	69f8      	ldr	r0, [r7, #28]
 8005b5c:	f000 ff06 	bl	800696c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b60:	69fb      	ldr	r3, [r7, #28]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b84:	f3ef 8305 	mrs	r3, IPSR
 8005b88:	617b      	str	r3, [r7, #20]
  return(result);
 8005b8a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d028      	beq.n	8005be2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <osMessageQueuePut+0x36>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <osMessageQueuePut+0x36>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005ba2:	f06f 0303 	mvn.w	r3, #3
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e038      	b.n	8005c1c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005bae:	f107 0210 	add.w	r2, r7, #16
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	69b8      	ldr	r0, [r7, #24]
 8005bb8:	f000 fbc6 	bl	8006348 <xQueueGenericSendFromISR>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d003      	beq.n	8005bca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005bc2:	f06f 0302 	mvn.w	r3, #2
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e028      	b.n	8005c1c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d025      	beq.n	8005c1c <osMessageQueuePut+0xb0>
 8005bd0:	4b15      	ldr	r3, [pc, #84]	@ (8005c28 <osMessageQueuePut+0xbc>)
 8005bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	e01c      	b.n	8005c1c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <osMessageQueuePut+0x82>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005bee:	f06f 0303 	mvn.w	r3, #3
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e012      	b.n	8005c1c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	69b8      	ldr	r0, [r7, #24]
 8005bfe:	f000 faa1 	bl	8006144 <xQueueGenericSend>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d009      	beq.n	8005c1c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c0e:	f06f 0301 	mvn.w	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	e002      	b.n	8005c1c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c16:	f06f 0302 	mvn.w	r3, #2
 8005c1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c42:	f3ef 8305 	mrs	r3, IPSR
 8005c46:	617b      	str	r3, [r7, #20]
  return(result);
 8005c48:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d028      	beq.n	8005ca0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <osMessageQueueGet+0x34>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <osMessageQueueGet+0x34>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c60:	f06f 0303 	mvn.w	r3, #3
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	e037      	b.n	8005cd8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c6c:	f107 0310 	add.w	r3, r7, #16
 8005c70:	461a      	mov	r2, r3
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	69b8      	ldr	r0, [r7, #24]
 8005c76:	f000 fce7 	bl	8006648 <xQueueReceiveFromISR>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d003      	beq.n	8005c88 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c80:	f06f 0302 	mvn.w	r3, #2
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	e027      	b.n	8005cd8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d024      	beq.n	8005cd8 <osMessageQueueGet+0xac>
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <osMessageQueueGet+0xb8>)
 8005c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	e01b      	b.n	8005cd8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <osMessageQueueGet+0x80>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005cac:	f06f 0303 	mvn.w	r3, #3
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e011      	b.n	8005cd8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	69b8      	ldr	r0, [r7, #24]
 8005cba:	f000 fbe3 	bl	8006484 <xQueueReceive>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d009      	beq.n	8005cd8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005cca:	f06f 0301 	mvn.w	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e002      	b.n	8005cd8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005cd2:	f06f 0302 	mvn.w	r3, #2
 8005cd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a07      	ldr	r2, [pc, #28]	@ (8005d14 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4a06      	ldr	r2, [pc, #24]	@ (8005d18 <vApplicationGetIdleTaskMemory+0x30>)
 8005cfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2280      	movs	r2, #128	@ 0x80
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	200002d0 	.word	0x200002d0
 8005d18:	2000032c 	.word	0x2000032c

08005d1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	@ (8005d48 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4a06      	ldr	r2, [pc, #24]	@ (8005d4c <vApplicationGetTimerTaskMemory+0x30>)
 8005d32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d3a:	601a      	str	r2, [r3, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	2000052c 	.word	0x2000052c
 8005d4c:	20000588 	.word	0x20000588

08005d50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f103 0208 	add.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f103 0208 	add.w	r2, r3, #8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f103 0208 	add.w	r2, r3, #8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d103      	bne.n	8005e12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e00c      	b.n	8005e2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3308      	adds	r3, #8
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e002      	b.n	8005e20 <vListInsert+0x2e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d2f6      	bcs.n	8005e1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6892      	ldr	r2, [r2, #8]
 8005e7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6852      	ldr	r2, [r2, #4]
 8005e84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d103      	bne.n	8005e98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	1e5a      	subs	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10b      	bne.n	8005ee4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ee4:	f002 f938 	bl	8008158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	441a      	add	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f14:	3b01      	subs	r3, #1
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	22ff      	movs	r2, #255	@ 0xff
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	22ff      	movs	r2, #255	@ 0xff
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d114      	bne.n	8005f64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01a      	beq.n	8005f78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3310      	adds	r3, #16
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f9d8 	bl	80072fc <xTaskRemoveFromEventList>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d012      	beq.n	8005f78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <xQueueGenericReset+0xd0>)
 8005f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	e009      	b.n	8005f78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fef1 	bl	8005d50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3324      	adds	r3, #36	@ 0x24
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff feec 	bl	8005d50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f78:	f002 f920 	bl	80081bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f7c:	2301      	movs	r3, #1
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	@ 0x38
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <xQueueGenericCreateStatic+0x56>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <xQueueGenericCreateStatic+0x5a>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <xQueueGenericCreateStatic+0x5c>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	623b      	str	r3, [r7, #32]
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <xQueueGenericCreateStatic+0x84>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <xQueueGenericCreateStatic+0x88>
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <xQueueGenericCreateStatic+0x8a>
 8006014:	2300      	movs	r3, #0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	61fb      	str	r3, [r7, #28]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006032:	2350      	movs	r3, #80	@ 0x50
 8006034:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b50      	cmp	r3, #80	@ 0x50
 800603a:	d00b      	beq.n	8006054 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	61bb      	str	r3, [r7, #24]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006054:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006068:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f840 	bl	80060fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800607e:	4618      	mov	r0, r3
 8006080:	3730      	adds	r7, #48	@ 0x30
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006086:	b580      	push	{r7, lr}
 8006088:	b08a      	sub	sp, #40	@ 0x28
 800608a:	af02      	add	r7, sp, #8
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	4613      	mov	r3, r2
 8006092:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	613b      	str	r3, [r7, #16]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3350      	adds	r3, #80	@ 0x50
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 f96b 	bl	800839c <pvPortMalloc>
 80060c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d011      	beq.n	80060f2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	3350      	adds	r3, #80	@ 0x50
 80060d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060e0:	79fa      	ldrb	r2, [r7, #7]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f805 	bl	80060fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060f2:	69bb      	ldr	r3, [r7, #24]
	}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e002      	b.n	800611e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800612a:	2101      	movs	r1, #1
 800612c:	69b8      	ldr	r0, [r7, #24]
 800612e:	f7ff fec3 	bl	8005eb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	@ 0x38
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <xQueueGenericSend+0x34>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	e7fd      	b.n	8006174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <xQueueGenericSend+0x42>
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <xQueueGenericSend+0x46>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueGenericSend+0x48>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <xQueueGenericSend+0x64>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d103      	bne.n	80061b6 <xQueueGenericSend+0x72>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <xQueueGenericSend+0x76>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericSend+0x78>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <xQueueGenericSend+0x94>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	623b      	str	r3, [r7, #32]
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d8:	f001 fa50 	bl	800767c <xTaskGetSchedulerState>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <xQueueGenericSend+0xa4>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <xQueueGenericSend+0xa8>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <xQueueGenericSend+0xaa>
 80061ec:	2300      	movs	r3, #0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <xQueueGenericSend+0xc6>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	61fb      	str	r3, [r7, #28]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800620a:	f001 ffa5 	bl	8008158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006216:	429a      	cmp	r2, r3
 8006218:	d302      	bcc.n	8006220 <xQueueGenericSend+0xdc>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d129      	bne.n	8006274 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006226:	f000 fa91 	bl	800674c <prvCopyDataToQueue>
 800622a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	3324      	adds	r3, #36	@ 0x24
 8006238:	4618      	mov	r0, r3
 800623a:	f001 f85f 	bl	80072fc <xTaskRemoveFromEventList>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006244:	4b3f      	ldr	r3, [pc, #252]	@ (8006344 <xQueueGenericSend+0x200>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	e00a      	b.n	800626c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800625c:	4b39      	ldr	r3, [pc, #228]	@ (8006344 <xQueueGenericSend+0x200>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800626c:	f001 ffa6 	bl	80081bc <vPortExitCritical>
				return pdPASS;
 8006270:	2301      	movs	r3, #1
 8006272:	e063      	b.n	800633c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800627a:	f001 ff9f 	bl	80081bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800627e:	2300      	movs	r3, #0
 8006280:	e05c      	b.n	800633c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f899 	bl	80073c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006292:	2301      	movs	r3, #1
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006296:	f001 ff91 	bl	80081bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800629a:	f000 fe09 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800629e:	f001 ff5b 	bl	8008158 <vPortEnterCritical>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d103      	bne.n	80062b8 <xQueueGenericSend+0x174>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSend+0x18a>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062ce:	f001 ff75 	bl	80081bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062d2:	1d3a      	adds	r2, r7, #4
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	4611      	mov	r1, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f001 f888 	bl	80073f0 <xTaskCheckForTimeOut>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d124      	bne.n	8006330 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062e8:	f000 fb28 	bl	800693c <prvIsQueueFull>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d018      	beq.n	8006324 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	3310      	adds	r3, #16
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 ffac 	bl	8007258 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006302:	f000 fab3 	bl	800686c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006306:	f000 fde1 	bl	8006ecc <xTaskResumeAll>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f af7c 	bne.w	800620a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <xQueueGenericSend+0x200>)
 8006314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	e772      	b.n	800620a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006326:	f000 faa1 	bl	800686c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800632a:	f000 fdcf 	bl	8006ecc <xTaskResumeAll>
 800632e:	e76c      	b.n	800620a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006332:	f000 fa9b 	bl	800686c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006336:	f000 fdc9 	bl	8006ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800633a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800633c:	4618      	mov	r0, r3
 800633e:	3738      	adds	r7, #56	@ 0x38
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b090      	sub	sp, #64	@ 0x40
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	e7fd      	b.n	8006374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d103      	bne.n	8006386 <xQueueGenericSendFromISR+0x3e>
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <xQueueGenericSendFromISR+0x42>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueGenericSendFromISR+0x44>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d103      	bne.n	80063b6 <xQueueGenericSendFromISR+0x6e>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSendFromISR+0x72>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSendFromISR+0x74>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	623b      	str	r3, [r7, #32]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d8:	f001 ff9e 	bl	8008318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063dc:	f3ef 8211 	mrs	r2, BASEPRI
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61fa      	str	r2, [r7, #28]
 80063f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <xQueueGenericSendFromISR+0xc2>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d12f      	bne.n	800646a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006420:	f000 f994 	bl	800674c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006424:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d112      	bne.n	8006454 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d016      	beq.n	8006464 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	3324      	adds	r3, #36	@ 0x24
 800643a:	4618      	mov	r0, r3
 800643c:	f000 ff5e 	bl	80072fc <xTaskRemoveFromEventList>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e007      	b.n	8006464 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006458:	3301      	adds	r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	b25a      	sxtb	r2, r3
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006464:	2301      	movs	r3, #1
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006468:	e001      	b.n	800646e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800646a:	2300      	movs	r3, #0
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800646e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006470:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800647a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800647c:	4618      	mov	r0, r3
 800647e:	3740      	adds	r7, #64	@ 0x40
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08c      	sub	sp, #48	@ 0x30
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006490:	2300      	movs	r3, #0
 8006492:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <xQueueReceive+0x32>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	623b      	str	r3, [r7, #32]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <xQueueReceive+0x40>
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <xQueueReceive+0x44>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <xQueueReceive+0x46>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <xQueueReceive+0x62>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	61fb      	str	r3, [r7, #28]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e6:	f001 f8c9 	bl	800767c <xTaskGetSchedulerState>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <xQueueReceive+0x72>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <xQueueReceive+0x76>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xQueueReceive+0x78>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <xQueueReceive+0x94>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	61bb      	str	r3, [r7, #24]
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006518:	f001 fe1e 	bl	8008158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01f      	beq.n	8006568 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800652c:	f000 f978 	bl	8006820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	1e5a      	subs	r2, r3, #1
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00f      	beq.n	8006560 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	3310      	adds	r3, #16
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fed9 	bl	80072fc <xTaskRemoveFromEventList>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006550:	4b3c      	ldr	r3, [pc, #240]	@ (8006644 <xQueueReceive+0x1c0>)
 8006552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006560:	f001 fe2c 	bl	80081bc <vPortExitCritical>
				return pdPASS;
 8006564:	2301      	movs	r3, #1
 8006566:	e069      	b.n	800663c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800656e:	f001 fe25 	bl	80081bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006572:	2300      	movs	r3, #0
 8006574:	e062      	b.n	800663c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d106      	bne.n	800658a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800657c:	f107 0310 	add.w	r3, r7, #16
 8006580:	4618      	mov	r0, r3
 8006582:	f000 ff1f 	bl	80073c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800658a:	f001 fe17 	bl	80081bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800658e:	f000 fc8f 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006592:	f001 fde1 	bl	8008158 <vPortEnterCritical>
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800659c:	b25b      	sxtb	r3, r3
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d103      	bne.n	80065ac <xQueueReceive+0x128>
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065b2:	b25b      	sxtb	r3, r3
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d103      	bne.n	80065c2 <xQueueReceive+0x13e>
 80065ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065c2:	f001 fdfb 	bl	80081bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065c6:	1d3a      	adds	r2, r7, #4
 80065c8:	f107 0310 	add.w	r3, r7, #16
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 ff0e 	bl	80073f0 <xTaskCheckForTimeOut>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d123      	bne.n	8006622 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065dc:	f000 f998 	bl	8006910 <prvIsQueueEmpty>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d017      	beq.n	8006616 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	3324      	adds	r3, #36	@ 0x24
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fe32 	bl	8007258 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f6:	f000 f939 	bl	800686c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065fa:	f000 fc67 	bl	8006ecc <xTaskResumeAll>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d189      	bne.n	8006518 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006604:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <xQueueReceive+0x1c0>)
 8006606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	e780      	b.n	8006518 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006618:	f000 f928 	bl	800686c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800661c:	f000 fc56 	bl	8006ecc <xTaskResumeAll>
 8006620:	e77a      	b.n	8006518 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006624:	f000 f922 	bl	800686c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006628:	f000 fc50 	bl	8006ecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800662c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800662e:	f000 f96f 	bl	8006910 <prvIsQueueEmpty>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	f43f af6f 	beq.w	8006518 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800663a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800663c:	4618      	mov	r0, r3
 800663e:	3730      	adds	r7, #48	@ 0x30
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08e      	sub	sp, #56	@ 0x38
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	623b      	str	r3, [r7, #32]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <xQueueReceiveFromISR+0x3c>
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <xQueueReceiveFromISR+0x40>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <xQueueReceiveFromISR+0x42>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	61fb      	str	r3, [r7, #28]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066a6:	f001 fe37 	bl	8008318 <vPortValidateInterruptPriority>
	__asm volatile
 80066aa:	f3ef 8211 	mrs	r2, BASEPRI
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	61ba      	str	r2, [r7, #24]
 80066c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80066c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02f      	beq.n	8006732 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066e0:	f000 f89e 	bl	8006820 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	1e5a      	subs	r2, r3, #1
 80066e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d112      	bne.n	800671c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	3310      	adds	r3, #16
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fdfa 	bl	80072fc <xTaskRemoveFromEventList>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00e      	beq.n	800672c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e007      	b.n	800672c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800671c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006720:	3301      	adds	r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	b25a      	sxtb	r2, r3
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800672c:	2301      	movs	r3, #1
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006730:	e001      	b.n	8006736 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f383 8811 	msr	BASEPRI, r3
}
 8006740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006744:	4618      	mov	r0, r3
 8006746:	3738      	adds	r7, #56	@ 0x38
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10d      	bne.n	8006786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d14d      	bne.n	800680e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 ff9e 	bl	80076b8 <xTaskPriorityDisinherit>
 800677c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	609a      	str	r2, [r3, #8]
 8006784:	e043      	b.n	800680e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d119      	bne.n	80067c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6858      	ldr	r0, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	461a      	mov	r2, r3
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	f002 fa4d 	bl	8008c36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d32b      	bcc.n	800680e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	e026      	b.n	800680e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68d8      	ldr	r0, [r3, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c8:	461a      	mov	r2, r3
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	f002 fa33 	bl	8008c36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d8:	425b      	negs	r3, r3
 80067da:	441a      	add	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d207      	bcs.n	80067fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f4:	425b      	negs	r3, r3
 80067f6:	441a      	add	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d105      	bne.n	800680e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3b01      	subs	r3, #1
 800680c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006816:	697b      	ldr	r3, [r7, #20]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d018      	beq.n	8006864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	441a      	add	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	d303      	bcc.n	8006854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68d9      	ldr	r1, [r3, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	461a      	mov	r2, r3
 800685e:	6838      	ldr	r0, [r7, #0]
 8006860:	f002 f9e9 	bl	8008c36 <memcpy>
	}
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006874:	f001 fc70 	bl	8008158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800687e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006880:	e011      	b.n	80068a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	d012      	beq.n	80068b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3324      	adds	r3, #36	@ 0x24
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fd34 	bl	80072fc <xTaskRemoveFromEventList>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800689a:	f000 fe0d 	bl	80074b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dce9      	bgt.n	8006882 <prvUnlockQueue+0x16>
 80068ae:	e000      	b.n	80068b2 <prvUnlockQueue+0x46>
					break;
 80068b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	22ff      	movs	r2, #255	@ 0xff
 80068b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068ba:	f001 fc7f 	bl	80081bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068be:	f001 fc4b 	bl	8008158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ca:	e011      	b.n	80068f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3310      	adds	r3, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fd0f 	bl	80072fc <xTaskRemoveFromEventList>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068e4:	f000 fde8 	bl	80074b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dce9      	bgt.n	80068cc <prvUnlockQueue+0x60>
 80068f8:	e000      	b.n	80068fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006904:	f001 fc5a 	bl	80081bc <vPortExitCritical>
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006918:	f001 fc1e 	bl	8008158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006924:	2301      	movs	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e001      	b.n	800692e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800692e:	f001 fc45 	bl	80081bc <vPortExitCritical>

	return xReturn;
 8006932:	68fb      	ldr	r3, [r7, #12]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006944:	f001 fc08 	bl	8008158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006950:	429a      	cmp	r2, r3
 8006952:	d102      	bne.n	800695a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e001      	b.n	800695e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800695e:	f001 fc2d 	bl	80081bc <vPortExitCritical>

	return xReturn;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e014      	b.n	80069a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800697c:	4a0f      	ldr	r2, [pc, #60]	@ (80069bc <vQueueAddToRegistry+0x50>)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006988:	490c      	ldr	r1, [pc, #48]	@ (80069bc <vQueueAddToRegistry+0x50>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006992:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <vQueueAddToRegistry+0x50>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	4413      	add	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800699e:	e006      	b.n	80069ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b07      	cmp	r3, #7
 80069aa:	d9e7      	bls.n	800697c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000988 	.word	0x20000988

080069c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069d0:	f001 fbc2 	bl	8008158 <vPortEnterCritical>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069da:	b25b      	sxtb	r3, r3
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d103      	bne.n	80069ea <vQueueWaitForMessageRestricted+0x2a>
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d103      	bne.n	8006a00 <vQueueWaitForMessageRestricted+0x40>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a00:	f001 fbdc 	bl	80081bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	3324      	adds	r3, #36	@ 0x24
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fc45 	bl	80072a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a1a:	6978      	ldr	r0, [r7, #20]
 8006a1c:	f7ff ff26 	bl	800686c <prvUnlockQueue>
	}
 8006a20:	bf00      	nop
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	@ 0x38
 8006a2c:	af04      	add	r7, sp, #16
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	623b      	str	r3, [r7, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	61fb      	str	r3, [r7, #28]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a72:	235c      	movs	r3, #92	@ 0x5c
 8006a74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a7a:	d00b      	beq.n	8006a94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61bb      	str	r3, [r7, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01e      	beq.n	8006ada <xTaskCreateStatic+0xb2>
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01b      	beq.n	8006ada <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	f107 0314 	add.w	r3, r7, #20
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f850 	bl	8006b72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ad4:	f000 f8de 	bl	8006c94 <prvAddNewTaskToReadyList>
 8006ad8:	e001      	b.n	8006ade <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ade:	697b      	ldr	r3, [r7, #20]
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3728      	adds	r7, #40	@ 0x28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08c      	sub	sp, #48	@ 0x30
 8006aec:	af04      	add	r7, sp, #16
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 fc4d 	bl	800839c <pvPortMalloc>
 8006b02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b0a:	205c      	movs	r0, #92	@ 0x5c
 8006b0c:	f001 fc46 	bl	800839c <pvPortMalloc>
 8006b10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b1e:	e005      	b.n	8006b2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b20:	6978      	ldr	r0, [r7, #20]
 8006b22:	f001 fd09 	bl	8008538 <vPortFree>
 8006b26:	e001      	b.n	8006b2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	9302      	str	r3, [sp, #8]
 8006b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 f80e 	bl	8006b72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b56:	69f8      	ldr	r0, [r7, #28]
 8006b58:	f000 f89c 	bl	8006c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	e002      	b.n	8006b68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b62:	f04f 33ff 	mov.w	r3, #4294967295
 8006b66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b68:	69bb      	ldr	r3, [r7, #24]
	}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	607a      	str	r2, [r7, #4]
 8006b7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	21a5      	movs	r1, #165	@ 0xa5
 8006b8c:	f001 ff73 	bl	8008a76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f023 0307 	bic.w	r3, r3, #7
 8006ba8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	617b      	str	r3, [r7, #20]
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01f      	beq.n	8006c12 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e012      	b.n	8006bfe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	7819      	ldrb	r1, [r3, #0]
 8006be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	3334      	adds	r3, #52	@ 0x34
 8006be8:	460a      	mov	r2, r1
 8006bea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d006      	beq.n	8006c06 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	2b0f      	cmp	r3, #15
 8006c02:	d9e9      	bls.n	8006bd8 <prvInitialiseNewTask+0x66>
 8006c04:	e000      	b.n	8006c08 <prvInitialiseNewTask+0x96>
			{
				break;
 8006c06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c10:	e003      	b.n	8006c1a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	2b37      	cmp	r3, #55	@ 0x37
 8006c1e:	d901      	bls.n	8006c24 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c20:	2337      	movs	r3, #55	@ 0x37
 8006c22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c2e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	2200      	movs	r2, #0
 8006c34:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff f8a8 	bl	8005d90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	3318      	adds	r3, #24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff f8a3 	bl	8005d90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	2200      	movs	r2, #0
 8006c64:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	68f9      	ldr	r1, [r7, #12]
 8006c72:	69b8      	ldr	r0, [r7, #24]
 8006c74:	f001 f93e 	bl	8007ef4 <pxPortInitialiseStack>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c9c:	f001 fa5c 	bl	8008158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006caa:	4b2c      	ldr	r3, [pc, #176]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cb8:	4b27      	ldr	r3, [pc, #156]	@ (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cc0:	f000 fc1e 	bl	8007500 <prvInitialiseTaskLists>
 8006cc4:	e00d      	b.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cc6:	4b26      	ldr	r3, [pc, #152]	@ (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cce:	4b23      	ldr	r3, [pc, #140]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d802      	bhi.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ce2:	4b20      	ldr	r3, [pc, #128]	@ (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cec:	4b1d      	ldr	r3, [pc, #116]	@ (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d68 <prvAddNewTaskToReadyList+0xd4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d903      	bls.n	8006d08 <prvAddNewTaskToReadyList+0x74>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <prvAddNewTaskToReadyList+0xd4>)
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <prvAddNewTaskToReadyList+0xd8>)
 8006d16:	441a      	add	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7ff f843 	bl	8005daa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d24:	f001 fa4a 	bl	80081bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d28:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d30:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d207      	bcs.n	8006d4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <prvAddNewTaskToReadyList+0xdc>)
 8006d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000e9c 	.word	0x20000e9c
 8006d5c:	200009c8 	.word	0x200009c8
 8006d60:	20000ea8 	.word	0x20000ea8
 8006d64:	20000eb8 	.word	0x20000eb8
 8006d68:	20000ea4 	.word	0x20000ea4
 8006d6c:	200009cc 	.word	0x200009cc
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d018      	beq.n	8006db8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d86:	4b14      	ldr	r3, [pc, #80]	@ (8006dd8 <vTaskDelay+0x64>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <vTaskDelay+0x32>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	e7fd      	b.n	8006da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006da6:	f000 f883 	bl	8006eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fcf3 	bl	8007798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006db2:	f000 f88b 	bl	8006ecc <xTaskResumeAll>
 8006db6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d107      	bne.n	8006dce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006dbe:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <vTaskDelay+0x68>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000ec4 	.word	0x20000ec4
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08a      	sub	sp, #40	@ 0x28
 8006de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dee:	463a      	mov	r2, r7
 8006df0:	1d39      	adds	r1, r7, #4
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe ff76 	bl	8005ce8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	9202      	str	r2, [sp, #8]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	2300      	movs	r3, #0
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	460a      	mov	r2, r1
 8006e0e:	4922      	ldr	r1, [pc, #136]	@ (8006e98 <vTaskStartScheduler+0xb8>)
 8006e10:	4822      	ldr	r0, [pc, #136]	@ (8006e9c <vTaskStartScheduler+0xbc>)
 8006e12:	f7ff fe09 	bl	8006a28 <xTaskCreateStatic>
 8006e16:	4603      	mov	r3, r0
 8006e18:	4a21      	ldr	r2, [pc, #132]	@ (8006ea0 <vTaskStartScheduler+0xc0>)
 8006e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e1c:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <vTaskStartScheduler+0xc0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e24:	2301      	movs	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e001      	b.n	8006e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d102      	bne.n	8006e3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e34:	f000 fd04 	bl	8007840 <xTimerCreateTimerTask>
 8006e38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d116      	bne.n	8006e6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	613b      	str	r3, [r7, #16]
}
 8006e52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e54:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <vTaskStartScheduler+0xc4>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e5c:	4b12      	ldr	r3, [pc, #72]	@ (8006ea8 <vTaskStartScheduler+0xc8>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e62:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <vTaskStartScheduler+0xcc>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e68:	f001 f8d2 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e6c:	e00f      	b.n	8006e8e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d10b      	bne.n	8006e8e <vTaskStartScheduler+0xae>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60fb      	str	r3, [r7, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	e7fd      	b.n	8006e8a <vTaskStartScheduler+0xaa>
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08009dbc 	.word	0x08009dbc
 8006e9c:	080074d1 	.word	0x080074d1
 8006ea0:	20000ec0 	.word	0x20000ec0
 8006ea4:	20000ebc 	.word	0x20000ebc
 8006ea8:	20000ea8 	.word	0x20000ea8
 8006eac:	20000ea0 	.word	0x20000ea0

08006eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <vTaskSuspendAll+0x18>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	4a03      	ldr	r2, [pc, #12]	@ (8006ec8 <vTaskSuspendAll+0x18>)
 8006ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000ec4 	.word	0x20000ec4

08006ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eda:	4b42      	ldr	r3, [pc, #264]	@ (8006fe4 <xTaskResumeAll+0x118>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10b      	bne.n	8006efa <xTaskResumeAll+0x2e>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	603b      	str	r3, [r7, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	e7fd      	b.n	8006ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006efa:	f001 f92d 	bl	8008158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006efe:	4b39      	ldr	r3, [pc, #228]	@ (8006fe4 <xTaskResumeAll+0x118>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	4a37      	ldr	r2, [pc, #220]	@ (8006fe4 <xTaskResumeAll+0x118>)
 8006f06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f08:	4b36      	ldr	r3, [pc, #216]	@ (8006fe4 <xTaskResumeAll+0x118>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d162      	bne.n	8006fd6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f10:	4b35      	ldr	r3, [pc, #212]	@ (8006fe8 <xTaskResumeAll+0x11c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d05e      	beq.n	8006fd6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f18:	e02f      	b.n	8006f7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f1a:	4b34      	ldr	r3, [pc, #208]	@ (8006fec <xTaskResumeAll+0x120>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3318      	adds	r3, #24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ff9c 	bl	8005e64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe ff97 	bl	8005e64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff0 <xTaskResumeAll+0x124>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d903      	bls.n	8006f4a <xTaskResumeAll+0x7e>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff0 <xTaskResumeAll+0x124>)
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a27      	ldr	r2, [pc, #156]	@ (8006ff4 <xTaskResumeAll+0x128>)
 8006f58:	441a      	add	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe ff22 	bl	8005daa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6a:	4b23      	ldr	r3, [pc, #140]	@ (8006ff8 <xTaskResumeAll+0x12c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d302      	bcc.n	8006f7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f74:	4b21      	ldr	r3, [pc, #132]	@ (8006ffc <xTaskResumeAll+0x130>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006fec <xTaskResumeAll+0x120>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1cb      	bne.n	8006f1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f88:	f000 fb58 	bl	800763c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <xTaskResumeAll+0x134>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d010      	beq.n	8006fba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f98:	f000 f846 	bl	8007028 <xTaskIncrementTick>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006fa2:	4b16      	ldr	r3, [pc, #88]	@ (8006ffc <xTaskResumeAll+0x130>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f1      	bne.n	8006f98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006fb4:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <xTaskResumeAll+0x134>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fba:	4b10      	ldr	r3, [pc, #64]	@ (8006ffc <xTaskResumeAll+0x130>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d009      	beq.n	8006fd6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <xTaskResumeAll+0x138>)
 8006fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fd6:	f001 f8f1 	bl	80081bc <vPortExitCritical>

	return xAlreadyYielded;
 8006fda:	68bb      	ldr	r3, [r7, #8]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000ec4 	.word	0x20000ec4
 8006fe8:	20000e9c 	.word	0x20000e9c
 8006fec:	20000e5c 	.word	0x20000e5c
 8006ff0:	20000ea4 	.word	0x20000ea4
 8006ff4:	200009cc 	.word	0x200009cc
 8006ff8:	200009c8 	.word	0x200009c8
 8006ffc:	20000eb0 	.word	0x20000eb0
 8007000:	20000eac 	.word	0x20000eac
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800700e:	4b05      	ldr	r3, [pc, #20]	@ (8007024 <xTaskGetTickCount+0x1c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007014:	687b      	ldr	r3, [r7, #4]
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000ea0 	.word	0x20000ea0

08007028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007032:	4b4f      	ldr	r3, [pc, #316]	@ (8007170 <xTaskIncrementTick+0x148>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 8090 	bne.w	800715c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800703c:	4b4d      	ldr	r3, [pc, #308]	@ (8007174 <xTaskIncrementTick+0x14c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3301      	adds	r3, #1
 8007042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007044:	4a4b      	ldr	r2, [pc, #300]	@ (8007174 <xTaskIncrementTick+0x14c>)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d121      	bne.n	8007094 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007050:	4b49      	ldr	r3, [pc, #292]	@ (8007178 <xTaskIncrementTick+0x150>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <xTaskIncrementTick+0x4a>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	603b      	str	r3, [r7, #0]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <xTaskIncrementTick+0x46>
 8007072:	4b41      	ldr	r3, [pc, #260]	@ (8007178 <xTaskIncrementTick+0x150>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	4b40      	ldr	r3, [pc, #256]	@ (800717c <xTaskIncrementTick+0x154>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3e      	ldr	r2, [pc, #248]	@ (8007178 <xTaskIncrementTick+0x150>)
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	4a3e      	ldr	r2, [pc, #248]	@ (800717c <xTaskIncrementTick+0x154>)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4b3e      	ldr	r3, [pc, #248]	@ (8007180 <xTaskIncrementTick+0x158>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3301      	adds	r3, #1
 800708c:	4a3c      	ldr	r2, [pc, #240]	@ (8007180 <xTaskIncrementTick+0x158>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	f000 fad4 	bl	800763c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007094:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <xTaskIncrementTick+0x15c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	429a      	cmp	r2, r3
 800709c:	d349      	bcc.n	8007132 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800709e:	4b36      	ldr	r3, [pc, #216]	@ (8007178 <xTaskIncrementTick+0x150>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	4b36      	ldr	r3, [pc, #216]	@ (8007184 <xTaskIncrementTick+0x15c>)
 80070aa:	f04f 32ff 	mov.w	r2, #4294967295
 80070ae:	601a      	str	r2, [r3, #0]
					break;
 80070b0:	e03f      	b.n	8007132 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b2:	4b31      	ldr	r3, [pc, #196]	@ (8007178 <xTaskIncrementTick+0x150>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d203      	bcs.n	80070d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007184 <xTaskIncrementTick+0x15c>)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070d0:	e02f      	b.n	8007132 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fec4 	bl	8005e64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3318      	adds	r3, #24
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe febb 	bl	8005e64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f2:	4b25      	ldr	r3, [pc, #148]	@ (8007188 <xTaskIncrementTick+0x160>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d903      	bls.n	8007102 <xTaskIncrementTick+0xda>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	4a22      	ldr	r2, [pc, #136]	@ (8007188 <xTaskIncrementTick+0x160>)
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4a1f      	ldr	r2, [pc, #124]	@ (800718c <xTaskIncrementTick+0x164>)
 8007110:	441a      	add	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	3304      	adds	r3, #4
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f7fe fe46 	bl	8005daa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	4b1b      	ldr	r3, [pc, #108]	@ (8007190 <xTaskIncrementTick+0x168>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	429a      	cmp	r2, r3
 800712a:	d3b8      	bcc.n	800709e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007130:	e7b5      	b.n	800709e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007132:	4b17      	ldr	r3, [pc, #92]	@ (8007190 <xTaskIncrementTick+0x168>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007138:	4914      	ldr	r1, [pc, #80]	@ (800718c <xTaskIncrementTick+0x164>)
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d901      	bls.n	800714e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800714a:	2301      	movs	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800714e:	4b11      	ldr	r3, [pc, #68]	@ (8007194 <xTaskIncrementTick+0x16c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d007      	beq.n	8007166 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007156:	2301      	movs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	e004      	b.n	8007166 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800715c:	4b0e      	ldr	r3, [pc, #56]	@ (8007198 <xTaskIncrementTick+0x170>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	4a0d      	ldr	r2, [pc, #52]	@ (8007198 <xTaskIncrementTick+0x170>)
 8007164:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007166:	697b      	ldr	r3, [r7, #20]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000ec4 	.word	0x20000ec4
 8007174:	20000ea0 	.word	0x20000ea0
 8007178:	20000e54 	.word	0x20000e54
 800717c:	20000e58 	.word	0x20000e58
 8007180:	20000eb4 	.word	0x20000eb4
 8007184:	20000ebc 	.word	0x20000ebc
 8007188:	20000ea4 	.word	0x20000ea4
 800718c:	200009cc 	.word	0x200009cc
 8007190:	200009c8 	.word	0x200009c8
 8007194:	20000eb0 	.word	0x20000eb0
 8007198:	20000eac 	.word	0x20000eac

0800719c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071a2:	4b28      	ldr	r3, [pc, #160]	@ (8007244 <vTaskSwitchContext+0xa8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071aa:	4b27      	ldr	r3, [pc, #156]	@ (8007248 <vTaskSwitchContext+0xac>)
 80071ac:	2201      	movs	r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b0:	e042      	b.n	8007238 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80071b2:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <vTaskSwitchContext+0xac>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b8:	4b24      	ldr	r3, [pc, #144]	@ (800724c <vTaskSwitchContext+0xb0>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e011      	b.n	80071e4 <vTaskSwitchContext+0x48>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <vTaskSwitchContext+0x42>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	607b      	str	r3, [r7, #4]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <vTaskSwitchContext+0x3e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	491a      	ldr	r1, [pc, #104]	@ (8007250 <vTaskSwitchContext+0xb4>)
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0e3      	beq.n	80071c0 <vTaskSwitchContext+0x24>
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <vTaskSwitchContext+0xb4>)
 8007204:	4413      	add	r3, r2
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3308      	adds	r3, #8
 800721a:	429a      	cmp	r2, r3
 800721c:	d104      	bne.n	8007228 <vTaskSwitchContext+0x8c>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <vTaskSwitchContext+0xb8>)
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	4a06      	ldr	r2, [pc, #24]	@ (800724c <vTaskSwitchContext+0xb0>)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6013      	str	r3, [r2, #0]
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	20000ec4 	.word	0x20000ec4
 8007248:	20000eb0 	.word	0x20000eb0
 800724c:	20000ea4 	.word	0x20000ea4
 8007250:	200009cc 	.word	0x200009cc
 8007254:	200009c8 	.word	0x200009c8

08007258 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	60fb      	str	r3, [r7, #12]
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <vTaskPlaceOnEventList+0x48>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3318      	adds	r3, #24
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fe fdb2 	bl	8005df2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800728e:	2101      	movs	r1, #1
 8007290:	6838      	ldr	r0, [r7, #0]
 8007292:	f000 fa81 	bl	8007798 <prvAddCurrentTaskToDelayedList>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200009c8 	.word	0x200009c8

080072a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	617b      	str	r3, [r7, #20]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ce:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3318      	adds	r3, #24
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7fe fd67 	bl	8005daa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80072e2:	f04f 33ff 	mov.w	r3, #4294967295
 80072e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	68b8      	ldr	r0, [r7, #8]
 80072ec:	f000 fa54 	bl	8007798 <prvAddCurrentTaskToDelayedList>
	}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200009c8 	.word	0x200009c8

080072fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60fb      	str	r3, [r7, #12]
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	e7fd      	b.n	8007326 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3318      	adds	r3, #24
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fd98 	bl	8005e64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007334:	4b1d      	ldr	r3, [pc, #116]	@ (80073ac <xTaskRemoveFromEventList+0xb0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d11d      	bne.n	8007378 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3304      	adds	r3, #4
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fd8f 	bl	8005e64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734a:	4b19      	ldr	r3, [pc, #100]	@ (80073b0 <xTaskRemoveFromEventList+0xb4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d903      	bls.n	800735a <xTaskRemoveFromEventList+0x5e>
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007356:	4a16      	ldr	r2, [pc, #88]	@ (80073b0 <xTaskRemoveFromEventList+0xb4>)
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4a13      	ldr	r2, [pc, #76]	@ (80073b4 <xTaskRemoveFromEventList+0xb8>)
 8007368:	441a      	add	r2, r3
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3304      	adds	r3, #4
 800736e:	4619      	mov	r1, r3
 8007370:	4610      	mov	r0, r2
 8007372:	f7fe fd1a 	bl	8005daa <vListInsertEnd>
 8007376:	e005      	b.n	8007384 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3318      	adds	r3, #24
 800737c:	4619      	mov	r1, r3
 800737e:	480e      	ldr	r0, [pc, #56]	@ (80073b8 <xTaskRemoveFromEventList+0xbc>)
 8007380:	f7fe fd13 	bl	8005daa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007388:	4b0c      	ldr	r3, [pc, #48]	@ (80073bc <xTaskRemoveFromEventList+0xc0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	429a      	cmp	r2, r3
 8007390:	d905      	bls.n	800739e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007392:	2301      	movs	r3, #1
 8007394:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007396:	4b0a      	ldr	r3, [pc, #40]	@ (80073c0 <xTaskRemoveFromEventList+0xc4>)
 8007398:	2201      	movs	r2, #1
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e001      	b.n	80073a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073a2:	697b      	ldr	r3, [r7, #20]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000ec4 	.word	0x20000ec4
 80073b0:	20000ea4 	.word	0x20000ea4
 80073b4:	200009cc 	.word	0x200009cc
 80073b8:	20000e5c 	.word	0x20000e5c
 80073bc:	200009c8 	.word	0x200009c8
 80073c0:	20000eb0 	.word	0x20000eb0

080073c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073cc:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <vTaskInternalSetTimeOutState+0x24>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073d4:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <vTaskInternalSetTimeOutState+0x28>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	20000eb4 	.word	0x20000eb4
 80073ec:	20000ea0 	.word	0x20000ea0

080073f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	60fb      	str	r3, [r7, #12]
}
 8007430:	bf00      	nop
 8007432:	bf00      	nop
 8007434:	e7fd      	b.n	8007432 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007436:	f000 fe8f 	bl	8008158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800743a:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <xTaskCheckForTimeOut+0xc0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d102      	bne.n	800745a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e023      	b.n	80074a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b15      	ldr	r3, [pc, #84]	@ (80074b4 <xTaskCheckForTimeOut+0xc4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d007      	beq.n	8007476 <xTaskCheckForTimeOut+0x86>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	d302      	bcc.n	8007476 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007470:	2301      	movs	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	e015      	b.n	80074a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d20b      	bcs.n	8007498 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ff99 	bl	80073c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	e004      	b.n	80074a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074a2:	f000 fe8b 	bl	80081bc <vPortExitCritical>

	return xReturn;
 80074a6:	69fb      	ldr	r3, [r7, #28]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000ea0 	.word	0x20000ea0
 80074b4:	20000eb4 	.word	0x20000eb4

080074b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074bc:	4b03      	ldr	r3, [pc, #12]	@ (80074cc <vTaskMissedYield+0x14>)
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	20000eb0 	.word	0x20000eb0

080074d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074d8:	f000 f852 	bl	8007580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <prvIdleTask+0x28>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d9f9      	bls.n	80074d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074e4:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <prvIdleTask+0x2c>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074f4:	e7f0      	b.n	80074d8 <prvIdleTask+0x8>
 80074f6:	bf00      	nop
 80074f8:	200009cc 	.word	0x200009cc
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e00c      	b.n	8007526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a12      	ldr	r2, [pc, #72]	@ (8007560 <prvInitialiseTaskLists+0x60>)
 8007518:	4413      	add	r3, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fc18 	bl	8005d50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3301      	adds	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b37      	cmp	r3, #55	@ 0x37
 800752a:	d9ef      	bls.n	800750c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800752c:	480d      	ldr	r0, [pc, #52]	@ (8007564 <prvInitialiseTaskLists+0x64>)
 800752e:	f7fe fc0f 	bl	8005d50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007532:	480d      	ldr	r0, [pc, #52]	@ (8007568 <prvInitialiseTaskLists+0x68>)
 8007534:	f7fe fc0c 	bl	8005d50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007538:	480c      	ldr	r0, [pc, #48]	@ (800756c <prvInitialiseTaskLists+0x6c>)
 800753a:	f7fe fc09 	bl	8005d50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800753e:	480c      	ldr	r0, [pc, #48]	@ (8007570 <prvInitialiseTaskLists+0x70>)
 8007540:	f7fe fc06 	bl	8005d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007544:	480b      	ldr	r0, [pc, #44]	@ (8007574 <prvInitialiseTaskLists+0x74>)
 8007546:	f7fe fc03 	bl	8005d50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800754a:	4b0b      	ldr	r3, [pc, #44]	@ (8007578 <prvInitialiseTaskLists+0x78>)
 800754c:	4a05      	ldr	r2, [pc, #20]	@ (8007564 <prvInitialiseTaskLists+0x64>)
 800754e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007550:	4b0a      	ldr	r3, [pc, #40]	@ (800757c <prvInitialiseTaskLists+0x7c>)
 8007552:	4a05      	ldr	r2, [pc, #20]	@ (8007568 <prvInitialiseTaskLists+0x68>)
 8007554:	601a      	str	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200009cc 	.word	0x200009cc
 8007564:	20000e2c 	.word	0x20000e2c
 8007568:	20000e40 	.word	0x20000e40
 800756c:	20000e5c 	.word	0x20000e5c
 8007570:	20000e70 	.word	0x20000e70
 8007574:	20000e88 	.word	0x20000e88
 8007578:	20000e54 	.word	0x20000e54
 800757c:	20000e58 	.word	0x20000e58

08007580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007586:	e019      	b.n	80075bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007588:	f000 fde6 	bl	8008158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758c:	4b10      	ldr	r3, [pc, #64]	@ (80075d0 <prvCheckTasksWaitingTermination+0x50>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fc63 	bl	8005e64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4a0b      	ldr	r2, [pc, #44]	@ (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4a0a      	ldr	r2, [pc, #40]	@ (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075b2:	f000 fe03 	bl	80081bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f810 	bl	80075dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e1      	bne.n	8007588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000e70 	.word	0x20000e70
 80075d4:	20000e9c 	.word	0x20000e9c
 80075d8:	20000e84 	.word	0x20000e84

080075dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 ffa0 	bl	8008538 <vPortFree>
				vPortFree( pxTCB );
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 ff9d 	bl	8008538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075fe:	e019      	b.n	8007634 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007606:	2b01      	cmp	r3, #1
 8007608:	d103      	bne.n	8007612 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 ff94 	bl	8008538 <vPortFree>
	}
 8007610:	e010      	b.n	8007634 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007618:	2b02      	cmp	r3, #2
 800761a:	d00b      	beq.n	8007634 <prvDeleteTCB+0x58>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60fb      	str	r3, [r7, #12]
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <prvDeleteTCB+0x54>
	}
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007642:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <prvResetNextTaskUnblockTime+0x38>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800764c:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <prvResetNextTaskUnblockTime+0x3c>)
 800764e:	f04f 32ff 	mov.w	r2, #4294967295
 8007652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007654:	e008      	b.n	8007668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	4b07      	ldr	r3, [pc, #28]	@ (8007674 <prvResetNextTaskUnblockTime+0x38>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4a04      	ldr	r2, [pc, #16]	@ (8007678 <prvResetNextTaskUnblockTime+0x3c>)
 8007666:	6013      	str	r3, [r2, #0]
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20000e54 	.word	0x20000e54
 8007678:	20000ebc 	.word	0x20000ebc

0800767c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <xTaskGetSchedulerState+0x34>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800768a:	2301      	movs	r3, #1
 800768c:	607b      	str	r3, [r7, #4]
 800768e:	e008      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007690:	4b08      	ldr	r3, [pc, #32]	@ (80076b4 <xTaskGetSchedulerState+0x38>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007698:	2302      	movs	r3, #2
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	e001      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076a2:	687b      	ldr	r3, [r7, #4]
	}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000ea8 	.word	0x20000ea8
 80076b4:	20000ec4 	.word	0x20000ec4

080076b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d058      	beq.n	8007780 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ce:	4b2f      	ldr	r3, [pc, #188]	@ (800778c <xTaskPriorityDisinherit+0xd4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d00b      	beq.n	80076f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	60fb      	str	r3, [r7, #12]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60bb      	str	r3, [r7, #8]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007714:	1e5a      	subs	r2, r3, #1
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007722:	429a      	cmp	r2, r3
 8007724:	d02c      	beq.n	8007780 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772a:	2b00      	cmp	r3, #0
 800772c:	d128      	bne.n	8007780 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3304      	adds	r3, #4
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fb96 	bl	8005e64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007750:	4b0f      	ldr	r3, [pc, #60]	@ (8007790 <xTaskPriorityDisinherit+0xd8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d903      	bls.n	8007760 <xTaskPriorityDisinherit+0xa8>
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	4a0c      	ldr	r2, [pc, #48]	@ (8007790 <xTaskPriorityDisinherit+0xd8>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4a09      	ldr	r2, [pc, #36]	@ (8007794 <xTaskPriorityDisinherit+0xdc>)
 800776e:	441a      	add	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fe fb17 	bl	8005daa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007780:	697b      	ldr	r3, [r7, #20]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200009c8 	.word	0x200009c8
 8007790:	20000ea4 	.word	0x20000ea4
 8007794:	200009cc 	.word	0x200009cc

08007798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077a2:	4b21      	ldr	r3, [pc, #132]	@ (8007828 <prvAddCurrentTaskToDelayedList+0x90>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a8:	4b20      	ldr	r3, [pc, #128]	@ (800782c <prvAddCurrentTaskToDelayedList+0x94>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fb58 	bl	8005e64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d10a      	bne.n	80077d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c2:	4b1a      	ldr	r3, [pc, #104]	@ (800782c <prvAddCurrentTaskToDelayedList+0x94>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4819      	ldr	r0, [pc, #100]	@ (8007830 <prvAddCurrentTaskToDelayedList+0x98>)
 80077cc:	f7fe faed 	bl	8005daa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077d0:	e026      	b.n	8007820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4413      	add	r3, r2
 80077d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077da:	4b14      	ldr	r3, [pc, #80]	@ (800782c <prvAddCurrentTaskToDelayedList+0x94>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d209      	bcs.n	80077fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <prvAddCurrentTaskToDelayedList+0x94>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f7fe fafb 	bl	8005df2 <vListInsert>
}
 80077fc:	e010      	b.n	8007820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <prvAddCurrentTaskToDelayedList+0x94>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f7fe faf1 	bl	8005df2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007810:	4b0a      	ldr	r3, [pc, #40]	@ (800783c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	429a      	cmp	r2, r3
 8007818:	d202      	bcs.n	8007820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800781a:	4a08      	ldr	r2, [pc, #32]	@ (800783c <prvAddCurrentTaskToDelayedList+0xa4>)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6013      	str	r3, [r2, #0]
}
 8007820:	bf00      	nop
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000ea0 	.word	0x20000ea0
 800782c:	200009c8 	.word	0x200009c8
 8007830:	20000e88 	.word	0x20000e88
 8007834:	20000e58 	.word	0x20000e58
 8007838:	20000e54 	.word	0x20000e54
 800783c:	20000ebc 	.word	0x20000ebc

08007840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08a      	sub	sp, #40	@ 0x28
 8007844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800784a:	f000 fb13 	bl	8007e74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800784e:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <xTimerCreateTimerTask+0x84>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d021      	beq.n	800789a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800785e:	1d3a      	adds	r2, r7, #4
 8007860:	f107 0108 	add.w	r1, r7, #8
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe fa57 	bl	8005d1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	9202      	str	r2, [sp, #8]
 8007876:	9301      	str	r3, [sp, #4]
 8007878:	2302      	movs	r3, #2
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	2300      	movs	r3, #0
 800787e:	460a      	mov	r2, r1
 8007880:	4911      	ldr	r1, [pc, #68]	@ (80078c8 <xTimerCreateTimerTask+0x88>)
 8007882:	4812      	ldr	r0, [pc, #72]	@ (80078cc <xTimerCreateTimerTask+0x8c>)
 8007884:	f7ff f8d0 	bl	8006a28 <xTaskCreateStatic>
 8007888:	4603      	mov	r3, r0
 800788a:	4a11      	ldr	r2, [pc, #68]	@ (80078d0 <xTimerCreateTimerTask+0x90>)
 800788c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800788e:	4b10      	ldr	r3, [pc, #64]	@ (80078d0 <xTimerCreateTimerTask+0x90>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007896:	2301      	movs	r3, #1
 8007898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078b8:	697b      	ldr	r3, [r7, #20]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000ef8 	.word	0x20000ef8
 80078c8:	08009dc4 	.word	0x08009dc4
 80078cc:	08007a0d 	.word	0x08007a0d
 80078d0:	20000efc 	.word	0x20000efc

080078d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	@ 0x28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <xTimerGenericCommand+0x30>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	623b      	str	r3, [r7, #32]
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007904:	4b19      	ldr	r3, [pc, #100]	@ (800796c <xTimerGenericCommand+0x98>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d02a      	beq.n	8007962 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b05      	cmp	r3, #5
 800791c:	dc18      	bgt.n	8007950 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800791e:	f7ff fead 	bl	800767c <xTaskGetSchedulerState>
 8007922:	4603      	mov	r3, r0
 8007924:	2b02      	cmp	r3, #2
 8007926:	d109      	bne.n	800793c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007928:	4b10      	ldr	r3, [pc, #64]	@ (800796c <xTimerGenericCommand+0x98>)
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	f107 0110 	add.w	r1, r7, #16
 8007930:	2300      	movs	r3, #0
 8007932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007934:	f7fe fc06 	bl	8006144 <xQueueGenericSend>
 8007938:	6278      	str	r0, [r7, #36]	@ 0x24
 800793a:	e012      	b.n	8007962 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800793c:	4b0b      	ldr	r3, [pc, #44]	@ (800796c <xTimerGenericCommand+0x98>)
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	f107 0110 	add.w	r1, r7, #16
 8007944:	2300      	movs	r3, #0
 8007946:	2200      	movs	r2, #0
 8007948:	f7fe fbfc 	bl	8006144 <xQueueGenericSend>
 800794c:	6278      	str	r0, [r7, #36]	@ 0x24
 800794e:	e008      	b.n	8007962 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007950:	4b06      	ldr	r3, [pc, #24]	@ (800796c <xTimerGenericCommand+0x98>)
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	f107 0110 	add.w	r1, r7, #16
 8007958:	2300      	movs	r3, #0
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	f7fe fcf4 	bl	8006348 <xQueueGenericSendFromISR>
 8007960:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007964:	4618      	mov	r0, r3
 8007966:	3728      	adds	r7, #40	@ 0x28
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20000ef8 	.word	0x20000ef8

08007970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af02      	add	r7, sp, #8
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797a:	4b23      	ldr	r3, [pc, #140]	@ (8007a08 <prvProcessExpiredTimer+0x98>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	3304      	adds	r3, #4
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fa6b 	bl	8005e64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d023      	beq.n	80079e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	18d1      	adds	r1, r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	6978      	ldr	r0, [r7, #20]
 80079aa:	f000 f8d5 	bl	8007b58 <prvInsertTimerInActiveList>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d020      	beq.n	80079f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079b4:	2300      	movs	r3, #0
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	2300      	movs	r3, #0
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	2100      	movs	r1, #0
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	f7ff ff88 	bl	80078d4 <xTimerGenericCommand>
 80079c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d114      	bne.n	80079f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	60fb      	str	r3, [r7, #12]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	6978      	ldr	r0, [r7, #20]
 80079fc:	4798      	blx	r3
}
 80079fe:	bf00      	nop
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000ef0 	.word	0x20000ef0

08007a0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f859 	bl	8007ad0 <prvGetNextExpireTime>
 8007a1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	4619      	mov	r1, r3
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f805 	bl	8007a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a2a:	f000 f8d7 	bl	8007bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a2e:	bf00      	nop
 8007a30:	e7f0      	b.n	8007a14 <prvTimerTask+0x8>
	...

08007a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a3e:	f7ff fa37 	bl	8006eb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f866 	bl	8007b18 <prvSampleTimeNow>
 8007a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d130      	bne.n	8007ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <prvProcessTimerOrBlockTask+0x3c>
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d806      	bhi.n	8007a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a62:	f7ff fa33 	bl	8006ecc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff ff81 	bl	8007970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a6e:	e024      	b.n	8007aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a76:	4b13      	ldr	r3, [pc, #76]	@ (8007ac4 <prvProcessTimerOrBlockTask+0x90>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <prvProcessTimerOrBlockTask+0x50>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <prvProcessTimerOrBlockTask+0x52>
 8007a84:	2300      	movs	r3, #0
 8007a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a88:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <prvProcessTimerOrBlockTask+0x94>)
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	f7fe ff93 	bl	80069c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a9a:	f7ff fa17 	bl	8006ecc <xTaskResumeAll>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007aa4:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <prvProcessTimerOrBlockTask+0x98>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
}
 8007ab4:	e001      	b.n	8007aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ab6:	f7ff fa09 	bl	8006ecc <xTaskResumeAll>
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000ef4 	.word	0x20000ef4
 8007ac8:	20000ef8 	.word	0x20000ef8
 8007acc:	e000ed04 	.word	0xe000ed04

08007ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b14 <prvGetNextExpireTime+0x44>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <prvGetNextExpireTime+0x16>
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	e000      	b.n	8007ae8 <prvGetNextExpireTime+0x18>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d105      	bne.n	8007b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007af4:	4b07      	ldr	r3, [pc, #28]	@ (8007b14 <prvGetNextExpireTime+0x44>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	e001      	b.n	8007b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000ef0 	.word	0x20000ef0

08007b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b20:	f7ff fa72 	bl	8007008 <xTaskGetTickCount>
 8007b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b26:	4b0b      	ldr	r3, [pc, #44]	@ (8007b54 <prvSampleTimeNow+0x3c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d205      	bcs.n	8007b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b30:	f000 f93a 	bl	8007da8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b42:	4a04      	ldr	r2, [pc, #16]	@ (8007b54 <prvSampleTimeNow+0x3c>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b48:	68fb      	ldr	r3, [r7, #12]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000f00 	.word	0x20000f00

08007b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d812      	bhi.n	8007ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	1ad2      	subs	r2, r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d302      	bcc.n	8007b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	e01b      	b.n	8007bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b92:	4b10      	ldr	r3, [pc, #64]	@ (8007bd4 <prvInsertTimerInActiveList+0x7c>)
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f7fe f928 	bl	8005df2 <vListInsert>
 8007ba2:	e012      	b.n	8007bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d206      	bcs.n	8007bba <prvInsertTimerInActiveList+0x62>
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d302      	bcc.n	8007bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e007      	b.n	8007bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bba:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <prvInsertTimerInActiveList+0x80>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f7fe f914 	bl	8005df2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bca:	697b      	ldr	r3, [r7, #20]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000ef4 	.word	0x20000ef4
 8007bd8:	20000ef0 	.word	0x20000ef0

08007bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08e      	sub	sp, #56	@ 0x38
 8007be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007be2:	e0ce      	b.n	8007d82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da19      	bge.n	8007c1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bea:	1d3b      	adds	r3, r7, #4
 8007bec:	3304      	adds	r3, #4
 8007bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10b      	bne.n	8007c0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	61fb      	str	r3, [r7, #28]
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	e7fd      	b.n	8007c0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c14:	6850      	ldr	r0, [r2, #4]
 8007c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c18:	6892      	ldr	r2, [r2, #8]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f2c0 80ae 	blt.w	8007d82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe f914 	bl	8005e64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff ff6a 	bl	8007b18 <prvSampleTimeNow>
 8007c44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	f200 8097 	bhi.w	8007d7c <prvProcessReceivedCommands+0x1a0>
 8007c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <prvProcessReceivedCommands+0x78>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c7d 	.word	0x08007c7d
 8007c5c:	08007c7d 	.word	0x08007c7d
 8007c60:	08007cf3 	.word	0x08007cf3
 8007c64:	08007d07 	.word	0x08007d07
 8007c68:	08007d53 	.word	0x08007d53
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007c7d 	.word	0x08007c7d
 8007c74:	08007cf3 	.word	0x08007cf3
 8007c78:	08007d07 	.word	0x08007d07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	18d1      	adds	r1, r2, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c9c:	f7ff ff5c 	bl	8007b58 <prvInsertTimerInActiveList>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d06c      	beq.n	8007d80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d061      	beq.n	8007d80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	441a      	add	r2, r3
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	2100      	movs	r1, #0
 8007ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cce:	f7ff fe01 	bl	80078d4 <xTimerGenericCommand>
 8007cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d152      	bne.n	8007d80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	61bb      	str	r3, [r7, #24]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d04:	e03d      	b.n	8007d82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d0c:	f043 0301 	orr.w	r3, r3, #1
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	617b      	str	r3, [r7, #20]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	18d1      	adds	r1, r2, r3
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d4c:	f7ff ff04 	bl	8007b58 <prvInsertTimerInActiveList>
					break;
 8007d50:	e017      	b.n	8007d82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d62:	f000 fbe9 	bl	8008538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d66:	e00c      	b.n	8007d82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d7a:	e002      	b.n	8007d82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <prvProcessReceivedCommands+0x1a6>
					break;
 8007d80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d82:	4b08      	ldr	r3, [pc, #32]	@ (8007da4 <prvProcessReceivedCommands+0x1c8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1d39      	adds	r1, r7, #4
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fb7a 	bl	8006484 <xQueueReceive>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f47f af26 	bne.w	8007be4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3730      	adds	r7, #48	@ 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000ef8 	.word	0x20000ef8

08007da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dae:	e049      	b.n	8007e44 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db0:	4b2e      	ldr	r3, [pc, #184]	@ (8007e6c <prvSwitchTimerLists+0xc4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dba:	4b2c      	ldr	r3, [pc, #176]	@ (8007e6c <prvSwitchTimerLists+0xc4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe f84b 	bl	8005e64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d02f      	beq.n	8007e44 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d90e      	bls.n	8007e14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e02:	4b1a      	ldr	r3, [pc, #104]	@ (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fd fff0 	bl	8005df2 <vListInsert>
 8007e12:	e017      	b.n	8007e44 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e14:	2300      	movs	r3, #0
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff fd58 	bl	80078d4 <xTimerGenericCommand>
 8007e24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	603b      	str	r3, [r7, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e44:	4b09      	ldr	r3, [pc, #36]	@ (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1b0      	bne.n	8007db0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e4e:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e54:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <prvSwitchTimerLists+0xc8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a04      	ldr	r2, [pc, #16]	@ (8007e6c <prvSwitchTimerLists+0xc4>)
 8007e5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e5c:	4a04      	ldr	r2, [pc, #16]	@ (8007e70 <prvSwitchTimerLists+0xc8>)
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	6013      	str	r3, [r2, #0]
}
 8007e62:	bf00      	nop
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000ef0 	.word	0x20000ef0
 8007e70:	20000ef4 	.word	0x20000ef4

08007e74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e7a:	f000 f96d 	bl	8008158 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <prvCheckForValidListAndQueue+0x60>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d120      	bne.n	8007ec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e86:	4814      	ldr	r0, [pc, #80]	@ (8007ed8 <prvCheckForValidListAndQueue+0x64>)
 8007e88:	f7fd ff62 	bl	8005d50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e8c:	4813      	ldr	r0, [pc, #76]	@ (8007edc <prvCheckForValidListAndQueue+0x68>)
 8007e8e:	f7fd ff5f 	bl	8005d50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e92:	4b13      	ldr	r3, [pc, #76]	@ (8007ee0 <prvCheckForValidListAndQueue+0x6c>)
 8007e94:	4a10      	ldr	r2, [pc, #64]	@ (8007ed8 <prvCheckForValidListAndQueue+0x64>)
 8007e96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e98:	4b12      	ldr	r3, [pc, #72]	@ (8007ee4 <prvCheckForValidListAndQueue+0x70>)
 8007e9a:	4a10      	ldr	r2, [pc, #64]	@ (8007edc <prvCheckForValidListAndQueue+0x68>)
 8007e9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	4b11      	ldr	r3, [pc, #68]	@ (8007ee8 <prvCheckForValidListAndQueue+0x74>)
 8007ea4:	4a11      	ldr	r2, [pc, #68]	@ (8007eec <prvCheckForValidListAndQueue+0x78>)
 8007ea6:	2110      	movs	r1, #16
 8007ea8:	200a      	movs	r0, #10
 8007eaa:	f7fe f86f 	bl	8005f8c <xQueueGenericCreateStatic>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4a08      	ldr	r2, [pc, #32]	@ (8007ed4 <prvCheckForValidListAndQueue+0x60>)
 8007eb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007eb4:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <prvCheckForValidListAndQueue+0x60>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ebc:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <prvCheckForValidListAndQueue+0x60>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	490b      	ldr	r1, [pc, #44]	@ (8007ef0 <prvCheckForValidListAndQueue+0x7c>)
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fd52 	bl	800696c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ec8:	f000 f978 	bl	80081bc <vPortExitCritical>
}
 8007ecc:	bf00      	nop
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000ef8 	.word	0x20000ef8
 8007ed8:	20000ec8 	.word	0x20000ec8
 8007edc:	20000edc 	.word	0x20000edc
 8007ee0:	20000ef0 	.word	0x20000ef0
 8007ee4:	20000ef4 	.word	0x20000ef4
 8007ee8:	20000fa4 	.word	0x20000fa4
 8007eec:	20000f04 	.word	0x20000f04
 8007ef0:	08009dcc 	.word	0x08009dcc

08007ef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3b04      	subs	r3, #4
 8007f04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b04      	subs	r3, #4
 8007f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 0201 	bic.w	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3b04      	subs	r3, #4
 8007f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f24:	4a0c      	ldr	r2, [pc, #48]	@ (8007f58 <pxPortInitialiseStack+0x64>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3b14      	subs	r3, #20
 8007f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f06f 0202 	mvn.w	r2, #2
 8007f42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3b20      	subs	r3, #32
 8007f48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	08007f5d 	.word	0x08007f5d

08007f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f66:	4b13      	ldr	r3, [pc, #76]	@ (8007fb4 <prvTaskExitError+0x58>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d00b      	beq.n	8007f88 <prvTaskExitError+0x2c>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <prvTaskExitError+0x28>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	60bb      	str	r3, [r7, #8]
}
 8007f9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f9c:	bf00      	nop
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0fc      	beq.n	8007f9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20000014 	.word	0x20000014
	...

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	@ (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	@ (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008016:	4b47      	ldr	r3, [pc, #284]	@ (8008134 <xPortStartScheduler+0x124>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a47      	ldr	r2, [pc, #284]	@ (8008138 <xPortStartScheduler+0x128>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10b      	bne.n	8008038 <xPortStartScheduler+0x28>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008038:	4b3e      	ldr	r3, [pc, #248]	@ (8008134 <xPortStartScheduler+0x124>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a3f      	ldr	r2, [pc, #252]	@ (800813c <xPortStartScheduler+0x12c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d10b      	bne.n	800805a <xPortStartScheduler+0x4a>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	613b      	str	r3, [r7, #16]
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	e7fd      	b.n	8008056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800805a:	4b39      	ldr	r3, [pc, #228]	@ (8008140 <xPortStartScheduler+0x130>)
 800805c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	22ff      	movs	r2, #255	@ 0xff
 800806a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4b31      	ldr	r3, [pc, #196]	@ (8008144 <xPortStartScheduler+0x134>)
 8008080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008082:	4b31      	ldr	r3, [pc, #196]	@ (8008148 <xPortStartScheduler+0x138>)
 8008084:	2207      	movs	r2, #7
 8008086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008088:	e009      	b.n	800809e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800808a:	4b2f      	ldr	r3, [pc, #188]	@ (8008148 <xPortStartScheduler+0x138>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3b01      	subs	r3, #1
 8008090:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <xPortStartScheduler+0x138>)
 8008092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d0ef      	beq.n	800808a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080aa:	4b27      	ldr	r3, [pc, #156]	@ (8008148 <xPortStartScheduler+0x138>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f1c3 0307 	rsb	r3, r3, #7
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d00b      	beq.n	80080ce <xPortStartScheduler+0xbe>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60bb      	str	r3, [r7, #8]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <xPortStartScheduler+0x138>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <xPortStartScheduler+0x138>)
 80080d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008148 <xPortStartScheduler+0x138>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <xPortStartScheduler+0x138>)
 80080e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ec:	4b17      	ldr	r3, [pc, #92]	@ (800814c <xPortStartScheduler+0x13c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a16      	ldr	r2, [pc, #88]	@ (800814c <xPortStartScheduler+0x13c>)
 80080f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080f8:	4b14      	ldr	r3, [pc, #80]	@ (800814c <xPortStartScheduler+0x13c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a13      	ldr	r2, [pc, #76]	@ (800814c <xPortStartScheduler+0x13c>)
 80080fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008104:	f000 f8da 	bl	80082bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008108:	4b11      	ldr	r3, [pc, #68]	@ (8008150 <xPortStartScheduler+0x140>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800810e:	f000 f8f9 	bl	8008304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008112:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <xPortStartScheduler+0x144>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a0f      	ldr	r2, [pc, #60]	@ (8008154 <xPortStartScheduler+0x144>)
 8008118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800811c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800811e:	f7ff ff63 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008122:	f7ff f83b 	bl	800719c <vTaskSwitchContext>
	prvTaskExitError();
 8008126:	f7ff ff19 	bl	8007f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed00 	.word	0xe000ed00
 8008138:	410fc271 	.word	0x410fc271
 800813c:	410fc270 	.word	0x410fc270
 8008140:	e000e400 	.word	0xe000e400
 8008144:	20000ff4 	.word	0x20000ff4
 8008148:	20000ff8 	.word	0x20000ff8
 800814c:	e000ed20 	.word	0xe000ed20
 8008150:	20000014 	.word	0x20000014
 8008154:	e000ef34 	.word	0xe000ef34

08008158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008172:	4b10      	ldr	r3, [pc, #64]	@ (80081b4 <vPortEnterCritical+0x5c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3301      	adds	r3, #1
 8008178:	4a0e      	ldr	r2, [pc, #56]	@ (80081b4 <vPortEnterCritical+0x5c>)
 800817a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800817c:	4b0d      	ldr	r3, [pc, #52]	@ (80081b4 <vPortEnterCritical+0x5c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d110      	bne.n	80081a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008184:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <vPortEnterCritical+0x60>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	603b      	str	r3, [r7, #0]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <vPortEnterCritical+0x4a>
	}
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20000014 	.word	0x20000014
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081c2:	4b12      	ldr	r3, [pc, #72]	@ (800820c <vPortExitCritical+0x50>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <vPortExitCritical+0x26>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	607b      	str	r3, [r7, #4]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081e2:	4b0a      	ldr	r3, [pc, #40]	@ (800820c <vPortExitCritical+0x50>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <vPortExitCritical+0x50>)
 80081ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <vPortExitCritical+0x50>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <vPortExitCritical+0x44>
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000014 	.word	0x20000014

08008210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008210:	f3ef 8009 	mrs	r0, PSP
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <pxCurrentTCBConst>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f01e 0f10 	tst.w	lr, #16
 8008220:	bf08      	it	eq
 8008222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008234:	f380 8811 	msr	BASEPRI, r0
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f7fe ffac 	bl	800719c <vTaskSwitchContext>
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	f380 8811 	msr	BASEPRI, r0
 800824c:	bc09      	pop	{r0, r3}
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	6808      	ldr	r0, [r1, #0]
 8008252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008256:	f01e 0f10 	tst.w	lr, #16
 800825a:	bf08      	it	eq
 800825c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008260:	f380 8809 	msr	PSP, r0
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst>:
 8008270:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008292:	f7fe fec9 	bl	8007028 <xTaskIncrementTick>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800829c:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <xPortSysTickHandler+0x40>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f383 8811 	msr	BASEPRI, r3
}
 80082ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <vPortSetupTimerInterrupt+0x38>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <vPortSetupTimerInterrupt+0x3c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	@ (80082fc <vPortSetupTimerInterrupt+0x40>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	099b      	lsrs	r3, r3, #6
 80082d8:	4a09      	ldr	r2, [pc, #36]	@ (8008300 <vPortSetupTimerInterrupt+0x44>)
 80082da:	3b01      	subs	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082de:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	e000e010 	.word	0xe000e010
 80082f4:	e000e018 	.word	0xe000e018
 80082f8:	20000008 	.word	0x20000008
 80082fc:	10624dd3 	.word	0x10624dd3
 8008300:	e000e014 	.word	0xe000e014

08008304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008314 <vPortEnableVFP+0x10>
 8008308:	6801      	ldr	r1, [r0, #0]
 800830a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800830e:	6001      	str	r1, [r0, #0]
 8008310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008312:	bf00      	nop
 8008314:	e000ed88 	.word	0xe000ed88

08008318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800831e:	f3ef 8305 	mrs	r3, IPSR
 8008322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d915      	bls.n	8008356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800832a:	4a18      	ldr	r2, [pc, #96]	@ (800838c <vPortValidateInterruptPriority+0x74>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008334:	4b16      	ldr	r3, [pc, #88]	@ (8008390 <vPortValidateInterruptPriority+0x78>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	7afa      	ldrb	r2, [r7, #11]
 800833a:	429a      	cmp	r2, r3
 800833c:	d20b      	bcs.n	8008356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008356:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <vPortValidateInterruptPriority+0x7c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800835e:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <vPortValidateInterruptPriority+0x80>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d90b      	bls.n	800837e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	603b      	str	r3, [r7, #0]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <vPortValidateInterruptPriority+0x62>
	}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e3f0 	.word	0xe000e3f0
 8008390:	20000ff4 	.word	0x20000ff4
 8008394:	e000ed0c 	.word	0xe000ed0c
 8008398:	20000ff8 	.word	0x20000ff8

0800839c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	@ 0x28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083a8:	f7fe fd82 	bl	8006eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008520 <pvPortMalloc+0x184>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083b4:	f000 f924 	bl	8008600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008524 <pvPortMalloc+0x188>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4013      	ands	r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8095 	bne.w	80084f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01e      	beq.n	800840a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80083cc:	2208      	movs	r2, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d015      	beq.n	800840a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f023 0307 	bic.w	r3, r3, #7
 80083e4:	3308      	adds	r3, #8
 80083e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <pvPortMalloc+0x6e>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	617b      	str	r3, [r7, #20]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d06f      	beq.n	80084f0 <pvPortMalloc+0x154>
 8008410:	4b45      	ldr	r3, [pc, #276]	@ (8008528 <pvPortMalloc+0x18c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d86a      	bhi.n	80084f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800841a:	4b44      	ldr	r3, [pc, #272]	@ (800852c <pvPortMalloc+0x190>)
 800841c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800841e:	4b43      	ldr	r3, [pc, #268]	@ (800852c <pvPortMalloc+0x190>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008424:	e004      	b.n	8008430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <pvPortMalloc+0xa6>
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f1      	bne.n	8008426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008442:	4b37      	ldr	r3, [pc, #220]	@ (8008520 <pvPortMalloc+0x184>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	d051      	beq.n	80084f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2208      	movs	r2, #8
 8008452:	4413      	add	r3, r2
 8008454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1ad2      	subs	r2, r2, r3
 8008466:	2308      	movs	r3, #8
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	429a      	cmp	r2, r3
 800846c:	d920      	bls.n	80084b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800846e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <pvPortMalloc+0xfc>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084aa:	69b8      	ldr	r0, [r7, #24]
 80084ac:	f000 f90a 	bl	80086c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <pvPortMalloc+0x18c>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008528 <pvPortMalloc+0x18c>)
 80084bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084be:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <pvPortMalloc+0x18c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008530 <pvPortMalloc+0x194>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d203      	bcs.n	80084d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084ca:	4b17      	ldr	r3, [pc, #92]	@ (8008528 <pvPortMalloc+0x18c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a18      	ldr	r2, [pc, #96]	@ (8008530 <pvPortMalloc+0x194>)
 80084d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b13      	ldr	r3, [pc, #76]	@ (8008524 <pvPortMalloc+0x188>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	431a      	orrs	r2, r3
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084e6:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <pvPortMalloc+0x198>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <pvPortMalloc+0x198>)
 80084ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084f0:	f7fe fcec 	bl	8006ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <pvPortMalloc+0x17a>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <pvPortMalloc+0x176>
	return pvReturn;
 8008516:	69fb      	ldr	r3, [r7, #28]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3728      	adds	r7, #40	@ 0x28
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20004c04 	.word	0x20004c04
 8008524:	20004c18 	.word	0x20004c18
 8008528:	20004c08 	.word	0x20004c08
 800852c:	20004bfc 	.word	0x20004bfc
 8008530:	20004c0c 	.word	0x20004c0c
 8008534:	20004c10 	.word	0x20004c10

08008538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d04f      	beq.n	80085ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800854a:	2308      	movs	r3, #8
 800854c:	425b      	negs	r3, r3
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4413      	add	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b25      	ldr	r3, [pc, #148]	@ (80085f4 <vPortFree+0xbc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4013      	ands	r3, r2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <vPortFree+0x46>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60fb      	str	r3, [r7, #12]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <vPortFree+0x66>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60bb      	str	r3, [r7, #8]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	4b14      	ldr	r3, [pc, #80]	@ (80085f4 <vPortFree+0xbc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4013      	ands	r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01e      	beq.n	80085ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11a      	bne.n	80085ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	4b0e      	ldr	r3, [pc, #56]	@ (80085f4 <vPortFree+0xbc>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	43db      	mvns	r3, r3
 80085be:	401a      	ands	r2, r3
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085c4:	f7fe fc74 	bl	8006eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <vPortFree+0xc0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4413      	add	r3, r2
 80085d2:	4a09      	ldr	r2, [pc, #36]	@ (80085f8 <vPortFree+0xc0>)
 80085d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085d6:	6938      	ldr	r0, [r7, #16]
 80085d8:	f000 f874 	bl	80086c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <vPortFree+0xc4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a06      	ldr	r2, [pc, #24]	@ (80085fc <vPortFree+0xc4>)
 80085e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085e6:	f7fe fc71 	bl	8006ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20004c18 	.word	0x20004c18
 80085f8:	20004c08 	.word	0x20004c08
 80085fc:	20004c14 	.word	0x20004c14

08008600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008606:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800860a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800860c:	4b27      	ldr	r3, [pc, #156]	@ (80086ac <prvHeapInit+0xac>)
 800860e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00c      	beq.n	8008634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3307      	adds	r3, #7
 800861e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	4a1f      	ldr	r2, [pc, #124]	@ (80086ac <prvHeapInit+0xac>)
 8008630:	4413      	add	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <prvHeapInit+0xb0>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800863e:	4b1c      	ldr	r3, [pc, #112]	@ (80086b0 <prvHeapInit+0xb0>)
 8008640:	2200      	movs	r2, #0
 8008642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4413      	add	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800864c:	2208      	movs	r2, #8
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a15      	ldr	r2, [pc, #84]	@ (80086b4 <prvHeapInit+0xb4>)
 8008660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008662:	4b14      	ldr	r3, [pc, #80]	@ (80086b4 <prvHeapInit+0xb4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866a:	4b12      	ldr	r3, [pc, #72]	@ (80086b4 <prvHeapInit+0xb4>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008680:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <prvHeapInit+0xb4>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <prvHeapInit+0xb8>)
 800868e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	4a09      	ldr	r2, [pc, #36]	@ (80086bc <prvHeapInit+0xbc>)
 8008696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008698:	4b09      	ldr	r3, [pc, #36]	@ (80086c0 <prvHeapInit+0xc0>)
 800869a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	20000ffc 	.word	0x20000ffc
 80086b0:	20004bfc 	.word	0x20004bfc
 80086b4:	20004c04 	.word	0x20004c04
 80086b8:	20004c0c 	.word	0x20004c0c
 80086bc:	20004c08 	.word	0x20004c08
 80086c0:	20004c18 	.word	0x20004c18

080086c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086cc:	4b28      	ldr	r3, [pc, #160]	@ (8008770 <prvInsertBlockIntoFreeList+0xac>)
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	e002      	b.n	80086d8 <prvInsertBlockIntoFreeList+0x14>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d8f7      	bhi.n	80086d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d108      	bne.n	8008706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	441a      	add	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d118      	bne.n	800874c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <prvInsertBlockIntoFreeList+0xb0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d00d      	beq.n	8008742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e008      	b.n	8008754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008742:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <prvInsertBlockIntoFreeList+0xb0>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e003      	b.n	8008754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d002      	beq.n	8008762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20004bfc 	.word	0x20004bfc
 8008774:	20004c04 	.word	0x20004c04

08008778 <std>:
 8008778:	2300      	movs	r3, #0
 800877a:	b510      	push	{r4, lr}
 800877c:	4604      	mov	r4, r0
 800877e:	e9c0 3300 	strd	r3, r3, [r0]
 8008782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008786:	6083      	str	r3, [r0, #8]
 8008788:	8181      	strh	r1, [r0, #12]
 800878a:	6643      	str	r3, [r0, #100]	@ 0x64
 800878c:	81c2      	strh	r2, [r0, #14]
 800878e:	6183      	str	r3, [r0, #24]
 8008790:	4619      	mov	r1, r3
 8008792:	2208      	movs	r2, #8
 8008794:	305c      	adds	r0, #92	@ 0x5c
 8008796:	f000 f96e 	bl	8008a76 <memset>
 800879a:	4b0d      	ldr	r3, [pc, #52]	@ (80087d0 <std+0x58>)
 800879c:	6263      	str	r3, [r4, #36]	@ 0x24
 800879e:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <std+0x5c>)
 80087a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x60>)
 80087a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x64>)
 80087a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x68>)
 80087ac:	6224      	str	r4, [r4, #32]
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d006      	beq.n	80087c0 <std+0x48>
 80087b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087b6:	4294      	cmp	r4, r2
 80087b8:	d002      	beq.n	80087c0 <std+0x48>
 80087ba:	33d0      	adds	r3, #208	@ 0xd0
 80087bc:	429c      	cmp	r4, r3
 80087be:	d105      	bne.n	80087cc <std+0x54>
 80087c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c8:	f000 ba2a 	b.w	8008c20 <__retarget_lock_init_recursive>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	bf00      	nop
 80087d0:	080089d1 	.word	0x080089d1
 80087d4:	080089f3 	.word	0x080089f3
 80087d8:	08008a2b 	.word	0x08008a2b
 80087dc:	08008a4f 	.word	0x08008a4f
 80087e0:	20004c1c 	.word	0x20004c1c

080087e4 <stdio_exit_handler>:
 80087e4:	4a02      	ldr	r2, [pc, #8]	@ (80087f0 <stdio_exit_handler+0xc>)
 80087e6:	4903      	ldr	r1, [pc, #12]	@ (80087f4 <stdio_exit_handler+0x10>)
 80087e8:	4803      	ldr	r0, [pc, #12]	@ (80087f8 <stdio_exit_handler+0x14>)
 80087ea:	f000 b869 	b.w	80088c0 <_fwalk_sglue>
 80087ee:	bf00      	nop
 80087f0:	20000018 	.word	0x20000018
 80087f4:	080097e5 	.word	0x080097e5
 80087f8:	20000028 	.word	0x20000028

080087fc <cleanup_stdio>:
 80087fc:	6841      	ldr	r1, [r0, #4]
 80087fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008830 <cleanup_stdio+0x34>)
 8008800:	4299      	cmp	r1, r3
 8008802:	b510      	push	{r4, lr}
 8008804:	4604      	mov	r4, r0
 8008806:	d001      	beq.n	800880c <cleanup_stdio+0x10>
 8008808:	f000 ffec 	bl	80097e4 <_fflush_r>
 800880c:	68a1      	ldr	r1, [r4, #8]
 800880e:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <cleanup_stdio+0x38>)
 8008810:	4299      	cmp	r1, r3
 8008812:	d002      	beq.n	800881a <cleanup_stdio+0x1e>
 8008814:	4620      	mov	r0, r4
 8008816:	f000 ffe5 	bl	80097e4 <_fflush_r>
 800881a:	68e1      	ldr	r1, [r4, #12]
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <cleanup_stdio+0x3c>)
 800881e:	4299      	cmp	r1, r3
 8008820:	d004      	beq.n	800882c <cleanup_stdio+0x30>
 8008822:	4620      	mov	r0, r4
 8008824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008828:	f000 bfdc 	b.w	80097e4 <_fflush_r>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	20004c1c 	.word	0x20004c1c
 8008834:	20004c84 	.word	0x20004c84
 8008838:	20004cec 	.word	0x20004cec

0800883c <global_stdio_init.part.0>:
 800883c:	b510      	push	{r4, lr}
 800883e:	4b0b      	ldr	r3, [pc, #44]	@ (800886c <global_stdio_init.part.0+0x30>)
 8008840:	4c0b      	ldr	r4, [pc, #44]	@ (8008870 <global_stdio_init.part.0+0x34>)
 8008842:	4a0c      	ldr	r2, [pc, #48]	@ (8008874 <global_stdio_init.part.0+0x38>)
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	4620      	mov	r0, r4
 8008848:	2200      	movs	r2, #0
 800884a:	2104      	movs	r1, #4
 800884c:	f7ff ff94 	bl	8008778 <std>
 8008850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008854:	2201      	movs	r2, #1
 8008856:	2109      	movs	r1, #9
 8008858:	f7ff ff8e 	bl	8008778 <std>
 800885c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008860:	2202      	movs	r2, #2
 8008862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008866:	2112      	movs	r1, #18
 8008868:	f7ff bf86 	b.w	8008778 <std>
 800886c:	20004d54 	.word	0x20004d54
 8008870:	20004c1c 	.word	0x20004c1c
 8008874:	080087e5 	.word	0x080087e5

08008878 <__sfp_lock_acquire>:
 8008878:	4801      	ldr	r0, [pc, #4]	@ (8008880 <__sfp_lock_acquire+0x8>)
 800887a:	f000 b9d2 	b.w	8008c22 <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	20004d5d 	.word	0x20004d5d

08008884 <__sfp_lock_release>:
 8008884:	4801      	ldr	r0, [pc, #4]	@ (800888c <__sfp_lock_release+0x8>)
 8008886:	f000 b9cd 	b.w	8008c24 <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	20004d5d 	.word	0x20004d5d

08008890 <__sinit>:
 8008890:	b510      	push	{r4, lr}
 8008892:	4604      	mov	r4, r0
 8008894:	f7ff fff0 	bl	8008878 <__sfp_lock_acquire>
 8008898:	6a23      	ldr	r3, [r4, #32]
 800889a:	b11b      	cbz	r3, 80088a4 <__sinit+0x14>
 800889c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a0:	f7ff bff0 	b.w	8008884 <__sfp_lock_release>
 80088a4:	4b04      	ldr	r3, [pc, #16]	@ (80088b8 <__sinit+0x28>)
 80088a6:	6223      	str	r3, [r4, #32]
 80088a8:	4b04      	ldr	r3, [pc, #16]	@ (80088bc <__sinit+0x2c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f5      	bne.n	800889c <__sinit+0xc>
 80088b0:	f7ff ffc4 	bl	800883c <global_stdio_init.part.0>
 80088b4:	e7f2      	b.n	800889c <__sinit+0xc>
 80088b6:	bf00      	nop
 80088b8:	080087fd 	.word	0x080087fd
 80088bc:	20004d54 	.word	0x20004d54

080088c0 <_fwalk_sglue>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	4607      	mov	r7, r0
 80088c6:	4688      	mov	r8, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	2600      	movs	r6, #0
 80088cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d0:	f1b9 0901 	subs.w	r9, r9, #1
 80088d4:	d505      	bpl.n	80088e2 <_fwalk_sglue+0x22>
 80088d6:	6824      	ldr	r4, [r4, #0]
 80088d8:	2c00      	cmp	r4, #0
 80088da:	d1f7      	bne.n	80088cc <_fwalk_sglue+0xc>
 80088dc:	4630      	mov	r0, r6
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d907      	bls.n	80088f8 <_fwalk_sglue+0x38>
 80088e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088ec:	3301      	adds	r3, #1
 80088ee:	d003      	beq.n	80088f8 <_fwalk_sglue+0x38>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	4306      	orrs	r6, r0
 80088f8:	3568      	adds	r5, #104	@ 0x68
 80088fa:	e7e9      	b.n	80088d0 <_fwalk_sglue+0x10>

080088fc <iprintf>:
 80088fc:	b40f      	push	{r0, r1, r2, r3}
 80088fe:	b507      	push	{r0, r1, r2, lr}
 8008900:	4906      	ldr	r1, [pc, #24]	@ (800891c <iprintf+0x20>)
 8008902:	ab04      	add	r3, sp, #16
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	f853 2b04 	ldr.w	r2, [r3], #4
 800890a:	6881      	ldr	r1, [r0, #8]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	f000 fc41 	bl	8009194 <_vfiprintf_r>
 8008912:	b003      	add	sp, #12
 8008914:	f85d eb04 	ldr.w	lr, [sp], #4
 8008918:	b004      	add	sp, #16
 800891a:	4770      	bx	lr
 800891c:	20000024 	.word	0x20000024

08008920 <sniprintf>:
 8008920:	b40c      	push	{r2, r3}
 8008922:	b530      	push	{r4, r5, lr}
 8008924:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <sniprintf+0x68>)
 8008926:	1e0c      	subs	r4, r1, #0
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	b09d      	sub	sp, #116	@ 0x74
 800892c:	da08      	bge.n	8008940 <sniprintf+0x20>
 800892e:	238b      	movs	r3, #139	@ 0x8b
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	f04f 30ff 	mov.w	r0, #4294967295
 8008936:	b01d      	add	sp, #116	@ 0x74
 8008938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800893c:	b002      	add	sp, #8
 800893e:	4770      	bx	lr
 8008940:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008948:	f04f 0300 	mov.w	r3, #0
 800894c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800894e:	bf14      	ite	ne
 8008950:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008954:	4623      	moveq	r3, r4
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	9307      	str	r3, [sp, #28]
 800895a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800895e:	9002      	str	r0, [sp, #8]
 8008960:	9006      	str	r0, [sp, #24]
 8008962:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008966:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008968:	ab21      	add	r3, sp, #132	@ 0x84
 800896a:	a902      	add	r1, sp, #8
 800896c:	4628      	mov	r0, r5
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	f000 faea 	bl	8008f48 <_svfiprintf_r>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	bfbc      	itt	lt
 8008978:	238b      	movlt	r3, #139	@ 0x8b
 800897a:	602b      	strlt	r3, [r5, #0]
 800897c:	2c00      	cmp	r4, #0
 800897e:	d0da      	beq.n	8008936 <sniprintf+0x16>
 8008980:	9b02      	ldr	r3, [sp, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	e7d6      	b.n	8008936 <sniprintf+0x16>
 8008988:	20000024 	.word	0x20000024

0800898c <siprintf>:
 800898c:	b40e      	push	{r1, r2, r3}
 800898e:	b510      	push	{r4, lr}
 8008990:	b09d      	sub	sp, #116	@ 0x74
 8008992:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008994:	9002      	str	r0, [sp, #8]
 8008996:	9006      	str	r0, [sp, #24]
 8008998:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800899c:	480a      	ldr	r0, [pc, #40]	@ (80089c8 <siprintf+0x3c>)
 800899e:	9107      	str	r1, [sp, #28]
 80089a0:	9104      	str	r1, [sp, #16]
 80089a2:	490a      	ldr	r1, [pc, #40]	@ (80089cc <siprintf+0x40>)
 80089a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a8:	9105      	str	r1, [sp, #20]
 80089aa:	2400      	movs	r4, #0
 80089ac:	a902      	add	r1, sp, #8
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80089b4:	f000 fac8 	bl	8008f48 <_svfiprintf_r>
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	701c      	strb	r4, [r3, #0]
 80089bc:	b01d      	add	sp, #116	@ 0x74
 80089be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c2:	b003      	add	sp, #12
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	20000024 	.word	0x20000024
 80089cc:	ffff0208 	.word	0xffff0208

080089d0 <__sread>:
 80089d0:	b510      	push	{r4, lr}
 80089d2:	460c      	mov	r4, r1
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	f000 f8d4 	bl	8008b84 <_read_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	bfab      	itete	ge
 80089e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089e2:	89a3      	ldrhlt	r3, [r4, #12]
 80089e4:	181b      	addge	r3, r3, r0
 80089e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089ea:	bfac      	ite	ge
 80089ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089ee:	81a3      	strhlt	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__swrite>:
 80089f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f6:	461f      	mov	r7, r3
 80089f8:	898b      	ldrh	r3, [r1, #12]
 80089fa:	05db      	lsls	r3, r3, #23
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	4616      	mov	r6, r2
 8008a02:	d505      	bpl.n	8008a10 <__swrite+0x1e>
 8008a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a08:	2302      	movs	r3, #2
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f000 f8a8 	bl	8008b60 <_lseek_r>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	4628      	mov	r0, r5
 8008a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a26:	f000 b8bf 	b.w	8008ba8 <_write_r>

08008a2a <__sseek>:
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a32:	f000 f895 	bl	8008b60 <_lseek_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	bf15      	itete	ne
 8008a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a46:	81a3      	strheq	r3, [r4, #12]
 8008a48:	bf18      	it	ne
 8008a4a:	81a3      	strhne	r3, [r4, #12]
 8008a4c:	bd10      	pop	{r4, pc}

08008a4e <__sclose>:
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 b875 	b.w	8008b40 <_close_r>

08008a56 <memcmp>:
 8008a56:	b510      	push	{r4, lr}
 8008a58:	3901      	subs	r1, #1
 8008a5a:	4402      	add	r2, r0
 8008a5c:	4290      	cmp	r0, r2
 8008a5e:	d101      	bne.n	8008a64 <memcmp+0xe>
 8008a60:	2000      	movs	r0, #0
 8008a62:	e005      	b.n	8008a70 <memcmp+0x1a>
 8008a64:	7803      	ldrb	r3, [r0, #0]
 8008a66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	d001      	beq.n	8008a72 <memcmp+0x1c>
 8008a6e:	1b18      	subs	r0, r3, r4
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	3001      	adds	r0, #1
 8008a74:	e7f2      	b.n	8008a5c <memcmp+0x6>

08008a76 <memset>:
 8008a76:	4402      	add	r2, r0
 8008a78:	4603      	mov	r3, r0
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d100      	bne.n	8008a80 <memset+0xa>
 8008a7e:	4770      	bx	lr
 8008a80:	f803 1b01 	strb.w	r1, [r3], #1
 8008a84:	e7f9      	b.n	8008a7a <memset+0x4>
	...

08008a88 <strtok>:
 8008a88:	4b16      	ldr	r3, [pc, #88]	@ (8008ae4 <strtok+0x5c>)
 8008a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	681f      	ldr	r7, [r3, #0]
 8008a90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008a92:	4605      	mov	r5, r0
 8008a94:	460e      	mov	r6, r1
 8008a96:	b9ec      	cbnz	r4, 8008ad4 <strtok+0x4c>
 8008a98:	2050      	movs	r0, #80	@ 0x50
 8008a9a:	f000 f943 	bl	8008d24 <malloc>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008aa2:	b920      	cbnz	r0, 8008aae <strtok+0x26>
 8008aa4:	4b10      	ldr	r3, [pc, #64]	@ (8008ae8 <strtok+0x60>)
 8008aa6:	4811      	ldr	r0, [pc, #68]	@ (8008aec <strtok+0x64>)
 8008aa8:	215b      	movs	r1, #91	@ 0x5b
 8008aaa:	f000 f8d3 	bl	8008c54 <__assert_func>
 8008aae:	e9c0 4400 	strd	r4, r4, [r0]
 8008ab2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ab6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008aba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008abe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008ac2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008ac6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008aca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008ace:	6184      	str	r4, [r0, #24]
 8008ad0:	7704      	strb	r4, [r0, #28]
 8008ad2:	6244      	str	r4, [r0, #36]	@ 0x24
 8008ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	2301      	movs	r3, #1
 8008adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	f000 b806 	b.w	8008af0 <__strtok_r>
 8008ae4:	20000024 	.word	0x20000024
 8008ae8:	08009eb8 	.word	0x08009eb8
 8008aec:	08009ecf 	.word	0x08009ecf

08008af0 <__strtok_r>:
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	4604      	mov	r4, r0
 8008af4:	b908      	cbnz	r0, 8008afa <__strtok_r+0xa>
 8008af6:	6814      	ldr	r4, [r2, #0]
 8008af8:	b144      	cbz	r4, 8008b0c <__strtok_r+0x1c>
 8008afa:	4620      	mov	r0, r4
 8008afc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b00:	460f      	mov	r7, r1
 8008b02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b06:	b91e      	cbnz	r6, 8008b10 <__strtok_r+0x20>
 8008b08:	b965      	cbnz	r5, 8008b24 <__strtok_r+0x34>
 8008b0a:	6015      	str	r5, [r2, #0]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	e005      	b.n	8008b1c <__strtok_r+0x2c>
 8008b10:	42b5      	cmp	r5, r6
 8008b12:	d1f6      	bne.n	8008b02 <__strtok_r+0x12>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f0      	bne.n	8008afa <__strtok_r+0xa>
 8008b18:	6014      	str	r4, [r2, #0]
 8008b1a:	7003      	strb	r3, [r0, #0]
 8008b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1e:	461c      	mov	r4, r3
 8008b20:	e00c      	b.n	8008b3c <__strtok_r+0x4c>
 8008b22:	b91d      	cbnz	r5, 8008b2c <__strtok_r+0x3c>
 8008b24:	4627      	mov	r7, r4
 8008b26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b2a:	460e      	mov	r6, r1
 8008b2c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b30:	42ab      	cmp	r3, r5
 8008b32:	d1f6      	bne.n	8008b22 <__strtok_r+0x32>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f2      	beq.n	8008b1e <__strtok_r+0x2e>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	703b      	strb	r3, [r7, #0]
 8008b3c:	6014      	str	r4, [r2, #0]
 8008b3e:	e7ed      	b.n	8008b1c <__strtok_r+0x2c>

08008b40 <_close_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d06      	ldr	r5, [pc, #24]	@ (8008b5c <_close_r+0x1c>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f8 ffe8 	bl	8001b20 <_close>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_close_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_close_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20004d58 	.word	0x20004d58

08008b60 <_lseek_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	@ (8008b80 <_lseek_r+0x20>)
 8008b64:	4604      	mov	r4, r0
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	602a      	str	r2, [r5, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f7f8 fffd 	bl	8001b6e <_lseek>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_lseek_r+0x1e>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_lseek_r+0x1e>
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20004d58 	.word	0x20004d58

08008b84 <_read_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	@ (8008ba4 <_read_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f8 ff8b 	bl	8001aae <_read>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_read_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_read_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20004d58 	.word	0x20004d58

08008ba8 <_write_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d07      	ldr	r5, [pc, #28]	@ (8008bc8 <_write_r+0x20>)
 8008bac:	4604      	mov	r4, r0
 8008bae:	4608      	mov	r0, r1
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	602a      	str	r2, [r5, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f7f8 ff96 	bl	8001ae8 <_write>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_write_r+0x1e>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_write_r+0x1e>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	20004d58 	.word	0x20004d58

08008bcc <__errno>:
 8008bcc:	4b01      	ldr	r3, [pc, #4]	@ (8008bd4 <__errno+0x8>)
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20000024 	.word	0x20000024

08008bd8 <__libc_init_array>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4d0d      	ldr	r5, [pc, #52]	@ (8008c10 <__libc_init_array+0x38>)
 8008bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8008c14 <__libc_init_array+0x3c>)
 8008bde:	1b64      	subs	r4, r4, r5
 8008be0:	10a4      	asrs	r4, r4, #2
 8008be2:	2600      	movs	r6, #0
 8008be4:	42a6      	cmp	r6, r4
 8008be6:	d109      	bne.n	8008bfc <__libc_init_array+0x24>
 8008be8:	4d0b      	ldr	r5, [pc, #44]	@ (8008c18 <__libc_init_array+0x40>)
 8008bea:	4c0c      	ldr	r4, [pc, #48]	@ (8008c1c <__libc_init_array+0x44>)
 8008bec:	f000 fff8 	bl	8009be0 <_init>
 8008bf0:	1b64      	subs	r4, r4, r5
 8008bf2:	10a4      	asrs	r4, r4, #2
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	42a6      	cmp	r6, r4
 8008bf8:	d105      	bne.n	8008c06 <__libc_init_array+0x2e>
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c00:	4798      	blx	r3
 8008c02:	3601      	adds	r6, #1
 8008c04:	e7ee      	b.n	8008be4 <__libc_init_array+0xc>
 8008c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0a:	4798      	blx	r3
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	e7f2      	b.n	8008bf6 <__libc_init_array+0x1e>
 8008c10:	08009fa0 	.word	0x08009fa0
 8008c14:	08009fa0 	.word	0x08009fa0
 8008c18:	08009fa0 	.word	0x08009fa0
 8008c1c:	08009fa4 	.word	0x08009fa4

08008c20 <__retarget_lock_init_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__retarget_lock_acquire_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <__retarget_lock_release_recursive>:
 8008c24:	4770      	bx	lr

08008c26 <strcpy>:
 8008c26:	4603      	mov	r3, r0
 8008c28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c2c:	f803 2b01 	strb.w	r2, [r3], #1
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	d1f9      	bne.n	8008c28 <strcpy+0x2>
 8008c34:	4770      	bx	lr

08008c36 <memcpy>:
 8008c36:	440a      	add	r2, r1
 8008c38:	4291      	cmp	r1, r2
 8008c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c3e:	d100      	bne.n	8008c42 <memcpy+0xc>
 8008c40:	4770      	bx	lr
 8008c42:	b510      	push	{r4, lr}
 8008c44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c4c:	4291      	cmp	r1, r2
 8008c4e:	d1f9      	bne.n	8008c44 <memcpy+0xe>
 8008c50:	bd10      	pop	{r4, pc}
	...

08008c54 <__assert_func>:
 8008c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c56:	4614      	mov	r4, r2
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4b09      	ldr	r3, [pc, #36]	@ (8008c80 <__assert_func+0x2c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4605      	mov	r5, r0
 8008c60:	68d8      	ldr	r0, [r3, #12]
 8008c62:	b14c      	cbz	r4, 8008c78 <__assert_func+0x24>
 8008c64:	4b07      	ldr	r3, [pc, #28]	@ (8008c84 <__assert_func+0x30>)
 8008c66:	9100      	str	r1, [sp, #0]
 8008c68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c6c:	4906      	ldr	r1, [pc, #24]	@ (8008c88 <__assert_func+0x34>)
 8008c6e:	462b      	mov	r3, r5
 8008c70:	f000 fde0 	bl	8009834 <fiprintf>
 8008c74:	f000 feae 	bl	80099d4 <abort>
 8008c78:	4b04      	ldr	r3, [pc, #16]	@ (8008c8c <__assert_func+0x38>)
 8008c7a:	461c      	mov	r4, r3
 8008c7c:	e7f3      	b.n	8008c66 <__assert_func+0x12>
 8008c7e:	bf00      	nop
 8008c80:	20000024 	.word	0x20000024
 8008c84:	08009f29 	.word	0x08009f29
 8008c88:	08009f36 	.word	0x08009f36
 8008c8c:	08009f64 	.word	0x08009f64

08008c90 <_free_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4605      	mov	r5, r0
 8008c94:	2900      	cmp	r1, #0
 8008c96:	d041      	beq.n	8008d1c <_free_r+0x8c>
 8008c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9c:	1f0c      	subs	r4, r1, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfb8      	it	lt
 8008ca2:	18e4      	addlt	r4, r4, r3
 8008ca4:	f000 f8e8 	bl	8008e78 <__malloc_lock>
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d20 <_free_r+0x90>)
 8008caa:	6813      	ldr	r3, [r2, #0]
 8008cac:	b933      	cbnz	r3, 8008cbc <_free_r+0x2c>
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	6014      	str	r4, [r2, #0]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb8:	f000 b8e4 	b.w	8008e84 <__malloc_unlock>
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	d908      	bls.n	8008cd2 <_free_r+0x42>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	1821      	adds	r1, r4, r0
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf01      	itttt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	1809      	addeq	r1, r1, r0
 8008cce:	6021      	streq	r1, [r4, #0]
 8008cd0:	e7ed      	b.n	8008cae <_free_r+0x1e>
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	b10b      	cbz	r3, 8008cdc <_free_r+0x4c>
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d9fa      	bls.n	8008cd2 <_free_r+0x42>
 8008cdc:	6811      	ldr	r1, [r2, #0]
 8008cde:	1850      	adds	r0, r2, r1
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d10b      	bne.n	8008cfc <_free_r+0x6c>
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	4401      	add	r1, r0
 8008ce8:	1850      	adds	r0, r2, r1
 8008cea:	4283      	cmp	r3, r0
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	d1e0      	bne.n	8008cb2 <_free_r+0x22>
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	6053      	str	r3, [r2, #4]
 8008cf6:	4408      	add	r0, r1
 8008cf8:	6010      	str	r0, [r2, #0]
 8008cfa:	e7da      	b.n	8008cb2 <_free_r+0x22>
 8008cfc:	d902      	bls.n	8008d04 <_free_r+0x74>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	e7d6      	b.n	8008cb2 <_free_r+0x22>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	1821      	adds	r1, r4, r0
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf04      	itt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	bf04      	itt	eq
 8008d14:	1809      	addeq	r1, r1, r0
 8008d16:	6021      	streq	r1, [r4, #0]
 8008d18:	6054      	str	r4, [r2, #4]
 8008d1a:	e7ca      	b.n	8008cb2 <_free_r+0x22>
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
 8008d1e:	bf00      	nop
 8008d20:	20004d64 	.word	0x20004d64

08008d24 <malloc>:
 8008d24:	4b02      	ldr	r3, [pc, #8]	@ (8008d30 <malloc+0xc>)
 8008d26:	4601      	mov	r1, r0
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f000 b825 	b.w	8008d78 <_malloc_r>
 8008d2e:	bf00      	nop
 8008d30:	20000024 	.word	0x20000024

08008d34 <sbrk_aligned>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	4e0f      	ldr	r6, [pc, #60]	@ (8008d74 <sbrk_aligned+0x40>)
 8008d38:	460c      	mov	r4, r1
 8008d3a:	6831      	ldr	r1, [r6, #0]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	b911      	cbnz	r1, 8008d46 <sbrk_aligned+0x12>
 8008d40:	f000 fe38 	bl	80099b4 <_sbrk_r>
 8008d44:	6030      	str	r0, [r6, #0]
 8008d46:	4621      	mov	r1, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 fe33 	bl	80099b4 <_sbrk_r>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	d103      	bne.n	8008d5a <sbrk_aligned+0x26>
 8008d52:	f04f 34ff 	mov.w	r4, #4294967295
 8008d56:	4620      	mov	r0, r4
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	1cc4      	adds	r4, r0, #3
 8008d5c:	f024 0403 	bic.w	r4, r4, #3
 8008d60:	42a0      	cmp	r0, r4
 8008d62:	d0f8      	beq.n	8008d56 <sbrk_aligned+0x22>
 8008d64:	1a21      	subs	r1, r4, r0
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 fe24 	bl	80099b4 <_sbrk_r>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d1f2      	bne.n	8008d56 <sbrk_aligned+0x22>
 8008d70:	e7ef      	b.n	8008d52 <sbrk_aligned+0x1e>
 8008d72:	bf00      	nop
 8008d74:	20004d60 	.word	0x20004d60

08008d78 <_malloc_r>:
 8008d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d7c:	1ccd      	adds	r5, r1, #3
 8008d7e:	f025 0503 	bic.w	r5, r5, #3
 8008d82:	3508      	adds	r5, #8
 8008d84:	2d0c      	cmp	r5, #12
 8008d86:	bf38      	it	cc
 8008d88:	250c      	movcc	r5, #12
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	db01      	blt.n	8008d94 <_malloc_r+0x1c>
 8008d90:	42a9      	cmp	r1, r5
 8008d92:	d904      	bls.n	8008d9e <_malloc_r+0x26>
 8008d94:	230c      	movs	r3, #12
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e74 <_malloc_r+0xfc>
 8008da2:	f000 f869 	bl	8008e78 <__malloc_lock>
 8008da6:	f8d8 3000 	ldr.w	r3, [r8]
 8008daa:	461c      	mov	r4, r3
 8008dac:	bb44      	cbnz	r4, 8008e00 <_malloc_r+0x88>
 8008dae:	4629      	mov	r1, r5
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7ff ffbf 	bl	8008d34 <sbrk_aligned>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	4604      	mov	r4, r0
 8008dba:	d158      	bne.n	8008e6e <_malloc_r+0xf6>
 8008dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8008dc0:	4627      	mov	r7, r4
 8008dc2:	2f00      	cmp	r7, #0
 8008dc4:	d143      	bne.n	8008e4e <_malloc_r+0xd6>
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	d04b      	beq.n	8008e62 <_malloc_r+0xea>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	eb04 0903 	add.w	r9, r4, r3
 8008dd4:	f000 fdee 	bl	80099b4 <_sbrk_r>
 8008dd8:	4581      	cmp	r9, r0
 8008dda:	d142      	bne.n	8008e62 <_malloc_r+0xea>
 8008ddc:	6821      	ldr	r1, [r4, #0]
 8008dde:	1a6d      	subs	r5, r5, r1
 8008de0:	4629      	mov	r1, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff ffa6 	bl	8008d34 <sbrk_aligned>
 8008de8:	3001      	adds	r0, #1
 8008dea:	d03a      	beq.n	8008e62 <_malloc_r+0xea>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	442b      	add	r3, r5
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	f8d8 3000 	ldr.w	r3, [r8]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	bb62      	cbnz	r2, 8008e54 <_malloc_r+0xdc>
 8008dfa:	f8c8 7000 	str.w	r7, [r8]
 8008dfe:	e00f      	b.n	8008e20 <_malloc_r+0xa8>
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	1b52      	subs	r2, r2, r5
 8008e04:	d420      	bmi.n	8008e48 <_malloc_r+0xd0>
 8008e06:	2a0b      	cmp	r2, #11
 8008e08:	d917      	bls.n	8008e3a <_malloc_r+0xc2>
 8008e0a:	1961      	adds	r1, r4, r5
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	6025      	str	r5, [r4, #0]
 8008e10:	bf18      	it	ne
 8008e12:	6059      	strne	r1, [r3, #4]
 8008e14:	6863      	ldr	r3, [r4, #4]
 8008e16:	bf08      	it	eq
 8008e18:	f8c8 1000 	streq.w	r1, [r8]
 8008e1c:	5162      	str	r2, [r4, r5]
 8008e1e:	604b      	str	r3, [r1, #4]
 8008e20:	4630      	mov	r0, r6
 8008e22:	f000 f82f 	bl	8008e84 <__malloc_unlock>
 8008e26:	f104 000b 	add.w	r0, r4, #11
 8008e2a:	1d23      	adds	r3, r4, #4
 8008e2c:	f020 0007 	bic.w	r0, r0, #7
 8008e30:	1ac2      	subs	r2, r0, r3
 8008e32:	bf1c      	itt	ne
 8008e34:	1a1b      	subne	r3, r3, r0
 8008e36:	50a3      	strne	r3, [r4, r2]
 8008e38:	e7af      	b.n	8008d9a <_malloc_r+0x22>
 8008e3a:	6862      	ldr	r2, [r4, #4]
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	bf0c      	ite	eq
 8008e40:	f8c8 2000 	streq.w	r2, [r8]
 8008e44:	605a      	strne	r2, [r3, #4]
 8008e46:	e7eb      	b.n	8008e20 <_malloc_r+0xa8>
 8008e48:	4623      	mov	r3, r4
 8008e4a:	6864      	ldr	r4, [r4, #4]
 8008e4c:	e7ae      	b.n	8008dac <_malloc_r+0x34>
 8008e4e:	463c      	mov	r4, r7
 8008e50:	687f      	ldr	r7, [r7, #4]
 8008e52:	e7b6      	b.n	8008dc2 <_malloc_r+0x4a>
 8008e54:	461a      	mov	r2, r3
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	d1fb      	bne.n	8008e54 <_malloc_r+0xdc>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	6053      	str	r3, [r2, #4]
 8008e60:	e7de      	b.n	8008e20 <_malloc_r+0xa8>
 8008e62:	230c      	movs	r3, #12
 8008e64:	6033      	str	r3, [r6, #0]
 8008e66:	4630      	mov	r0, r6
 8008e68:	f000 f80c 	bl	8008e84 <__malloc_unlock>
 8008e6c:	e794      	b.n	8008d98 <_malloc_r+0x20>
 8008e6e:	6005      	str	r5, [r0, #0]
 8008e70:	e7d6      	b.n	8008e20 <_malloc_r+0xa8>
 8008e72:	bf00      	nop
 8008e74:	20004d64 	.word	0x20004d64

08008e78 <__malloc_lock>:
 8008e78:	4801      	ldr	r0, [pc, #4]	@ (8008e80 <__malloc_lock+0x8>)
 8008e7a:	f7ff bed2 	b.w	8008c22 <__retarget_lock_acquire_recursive>
 8008e7e:	bf00      	nop
 8008e80:	20004d5c 	.word	0x20004d5c

08008e84 <__malloc_unlock>:
 8008e84:	4801      	ldr	r0, [pc, #4]	@ (8008e8c <__malloc_unlock+0x8>)
 8008e86:	f7ff becd 	b.w	8008c24 <__retarget_lock_release_recursive>
 8008e8a:	bf00      	nop
 8008e8c:	20004d5c 	.word	0x20004d5c

08008e90 <__ssputs_r>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	688e      	ldr	r6, [r1, #8]
 8008e96:	461f      	mov	r7, r3
 8008e98:	42be      	cmp	r6, r7
 8008e9a:	680b      	ldr	r3, [r1, #0]
 8008e9c:	4682      	mov	sl, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	4690      	mov	r8, r2
 8008ea2:	d82d      	bhi.n	8008f00 <__ssputs_r+0x70>
 8008ea4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ea8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008eac:	d026      	beq.n	8008efc <__ssputs_r+0x6c>
 8008eae:	6965      	ldr	r5, [r4, #20]
 8008eb0:	6909      	ldr	r1, [r1, #16]
 8008eb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eb6:	eba3 0901 	sub.w	r9, r3, r1
 8008eba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ebe:	1c7b      	adds	r3, r7, #1
 8008ec0:	444b      	add	r3, r9
 8008ec2:	106d      	asrs	r5, r5, #1
 8008ec4:	429d      	cmp	r5, r3
 8008ec6:	bf38      	it	cc
 8008ec8:	461d      	movcc	r5, r3
 8008eca:	0553      	lsls	r3, r2, #21
 8008ecc:	d527      	bpl.n	8008f1e <__ssputs_r+0x8e>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	f7ff ff52 	bl	8008d78 <_malloc_r>
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	b360      	cbz	r0, 8008f32 <__ssputs_r+0xa2>
 8008ed8:	6921      	ldr	r1, [r4, #16]
 8008eda:	464a      	mov	r2, r9
 8008edc:	f7ff feab 	bl	8008c36 <memcpy>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	6126      	str	r6, [r4, #16]
 8008eee:	6165      	str	r5, [r4, #20]
 8008ef0:	444e      	add	r6, r9
 8008ef2:	eba5 0509 	sub.w	r5, r5, r9
 8008ef6:	6026      	str	r6, [r4, #0]
 8008ef8:	60a5      	str	r5, [r4, #8]
 8008efa:	463e      	mov	r6, r7
 8008efc:	42be      	cmp	r6, r7
 8008efe:	d900      	bls.n	8008f02 <__ssputs_r+0x72>
 8008f00:	463e      	mov	r6, r7
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	4632      	mov	r2, r6
 8008f06:	4641      	mov	r1, r8
 8008f08:	f000 fd3a 	bl	8009980 <memmove>
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	1b9b      	subs	r3, r3, r6
 8008f10:	60a3      	str	r3, [r4, #8]
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	4433      	add	r3, r6
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1e:	462a      	mov	r2, r5
 8008f20:	f000 fd5f 	bl	80099e2 <_realloc_r>
 8008f24:	4606      	mov	r6, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d1e0      	bne.n	8008eec <__ssputs_r+0x5c>
 8008f2a:	6921      	ldr	r1, [r4, #16]
 8008f2c:	4650      	mov	r0, sl
 8008f2e:	f7ff feaf 	bl	8008c90 <_free_r>
 8008f32:	230c      	movs	r3, #12
 8008f34:	f8ca 3000 	str.w	r3, [sl]
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e7e9      	b.n	8008f1a <__ssputs_r+0x8a>
	...

08008f48 <_svfiprintf_r>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	4698      	mov	r8, r3
 8008f4e:	898b      	ldrh	r3, [r1, #12]
 8008f50:	061b      	lsls	r3, r3, #24
 8008f52:	b09d      	sub	sp, #116	@ 0x74
 8008f54:	4607      	mov	r7, r0
 8008f56:	460d      	mov	r5, r1
 8008f58:	4614      	mov	r4, r2
 8008f5a:	d510      	bpl.n	8008f7e <_svfiprintf_r+0x36>
 8008f5c:	690b      	ldr	r3, [r1, #16]
 8008f5e:	b973      	cbnz	r3, 8008f7e <_svfiprintf_r+0x36>
 8008f60:	2140      	movs	r1, #64	@ 0x40
 8008f62:	f7ff ff09 	bl	8008d78 <_malloc_r>
 8008f66:	6028      	str	r0, [r5, #0]
 8008f68:	6128      	str	r0, [r5, #16]
 8008f6a:	b930      	cbnz	r0, 8008f7a <_svfiprintf_r+0x32>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	@ 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	2340      	movs	r3, #64	@ 0x40
 8008f7c:	616b      	str	r3, [r5, #20]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f82:	2320      	movs	r3, #32
 8008f84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f8c:	2330      	movs	r3, #48	@ 0x30
 8008f8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800912c <_svfiprintf_r+0x1e4>
 8008f92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f96:	f04f 0901 	mov.w	r9, #1
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	469a      	mov	sl, r3
 8008f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa2:	b10a      	cbz	r2, 8008fa8 <_svfiprintf_r+0x60>
 8008fa4:	2a25      	cmp	r2, #37	@ 0x25
 8008fa6:	d1f9      	bne.n	8008f9c <_svfiprintf_r+0x54>
 8008fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fac:	d00b      	beq.n	8008fc6 <_svfiprintf_r+0x7e>
 8008fae:	465b      	mov	r3, fp
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f7ff ff6b 	bl	8008e90 <__ssputs_r>
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f000 80a7 	beq.w	800910e <_svfiprintf_r+0x1c6>
 8008fc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fc2:	445a      	add	r2, fp
 8008fc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 809f 	beq.w	800910e <_svfiprintf_r+0x1c6>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fda:	f10a 0a01 	add.w	sl, sl, #1
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	9307      	str	r3, [sp, #28]
 8008fe2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fe6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fe8:	4654      	mov	r4, sl
 8008fea:	2205      	movs	r2, #5
 8008fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff0:	484e      	ldr	r0, [pc, #312]	@ (800912c <_svfiprintf_r+0x1e4>)
 8008ff2:	f7f7 f90d 	bl	8000210 <memchr>
 8008ff6:	9a04      	ldr	r2, [sp, #16]
 8008ff8:	b9d8      	cbnz	r0, 8009032 <_svfiprintf_r+0xea>
 8008ffa:	06d0      	lsls	r0, r2, #27
 8008ffc:	bf44      	itt	mi
 8008ffe:	2320      	movmi	r3, #32
 8009000:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009004:	0711      	lsls	r1, r2, #28
 8009006:	bf44      	itt	mi
 8009008:	232b      	movmi	r3, #43	@ 0x2b
 800900a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800900e:	f89a 3000 	ldrb.w	r3, [sl]
 8009012:	2b2a      	cmp	r3, #42	@ 0x2a
 8009014:	d015      	beq.n	8009042 <_svfiprintf_r+0xfa>
 8009016:	9a07      	ldr	r2, [sp, #28]
 8009018:	4654      	mov	r4, sl
 800901a:	2000      	movs	r0, #0
 800901c:	f04f 0c0a 	mov.w	ip, #10
 8009020:	4621      	mov	r1, r4
 8009022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009026:	3b30      	subs	r3, #48	@ 0x30
 8009028:	2b09      	cmp	r3, #9
 800902a:	d94b      	bls.n	80090c4 <_svfiprintf_r+0x17c>
 800902c:	b1b0      	cbz	r0, 800905c <_svfiprintf_r+0x114>
 800902e:	9207      	str	r2, [sp, #28]
 8009030:	e014      	b.n	800905c <_svfiprintf_r+0x114>
 8009032:	eba0 0308 	sub.w	r3, r0, r8
 8009036:	fa09 f303 	lsl.w	r3, r9, r3
 800903a:	4313      	orrs	r3, r2
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	46a2      	mov	sl, r4
 8009040:	e7d2      	b.n	8008fe8 <_svfiprintf_r+0xa0>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	1d19      	adds	r1, r3, #4
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	9103      	str	r1, [sp, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	bfbb      	ittet	lt
 800904e:	425b      	neglt	r3, r3
 8009050:	f042 0202 	orrlt.w	r2, r2, #2
 8009054:	9307      	strge	r3, [sp, #28]
 8009056:	9307      	strlt	r3, [sp, #28]
 8009058:	bfb8      	it	lt
 800905a:	9204      	strlt	r2, [sp, #16]
 800905c:	7823      	ldrb	r3, [r4, #0]
 800905e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009060:	d10a      	bne.n	8009078 <_svfiprintf_r+0x130>
 8009062:	7863      	ldrb	r3, [r4, #1]
 8009064:	2b2a      	cmp	r3, #42	@ 0x2a
 8009066:	d132      	bne.n	80090ce <_svfiprintf_r+0x186>
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	1d1a      	adds	r2, r3, #4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	9203      	str	r2, [sp, #12]
 8009070:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009074:	3402      	adds	r4, #2
 8009076:	9305      	str	r3, [sp, #20]
 8009078:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800913c <_svfiprintf_r+0x1f4>
 800907c:	7821      	ldrb	r1, [r4, #0]
 800907e:	2203      	movs	r2, #3
 8009080:	4650      	mov	r0, sl
 8009082:	f7f7 f8c5 	bl	8000210 <memchr>
 8009086:	b138      	cbz	r0, 8009098 <_svfiprintf_r+0x150>
 8009088:	9b04      	ldr	r3, [sp, #16]
 800908a:	eba0 000a 	sub.w	r0, r0, sl
 800908e:	2240      	movs	r2, #64	@ 0x40
 8009090:	4082      	lsls	r2, r0
 8009092:	4313      	orrs	r3, r2
 8009094:	3401      	adds	r4, #1
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909c:	4824      	ldr	r0, [pc, #144]	@ (8009130 <_svfiprintf_r+0x1e8>)
 800909e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090a2:	2206      	movs	r2, #6
 80090a4:	f7f7 f8b4 	bl	8000210 <memchr>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d036      	beq.n	800911a <_svfiprintf_r+0x1d2>
 80090ac:	4b21      	ldr	r3, [pc, #132]	@ (8009134 <_svfiprintf_r+0x1ec>)
 80090ae:	bb1b      	cbnz	r3, 80090f8 <_svfiprintf_r+0x1b0>
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	3307      	adds	r3, #7
 80090b4:	f023 0307 	bic.w	r3, r3, #7
 80090b8:	3308      	adds	r3, #8
 80090ba:	9303      	str	r3, [sp, #12]
 80090bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090be:	4433      	add	r3, r6
 80090c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80090c2:	e76a      	b.n	8008f9a <_svfiprintf_r+0x52>
 80090c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80090c8:	460c      	mov	r4, r1
 80090ca:	2001      	movs	r0, #1
 80090cc:	e7a8      	b.n	8009020 <_svfiprintf_r+0xd8>
 80090ce:	2300      	movs	r3, #0
 80090d0:	3401      	adds	r4, #1
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f04f 0c0a 	mov.w	ip, #10
 80090da:	4620      	mov	r0, r4
 80090dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e0:	3a30      	subs	r2, #48	@ 0x30
 80090e2:	2a09      	cmp	r2, #9
 80090e4:	d903      	bls.n	80090ee <_svfiprintf_r+0x1a6>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0c6      	beq.n	8009078 <_svfiprintf_r+0x130>
 80090ea:	9105      	str	r1, [sp, #20]
 80090ec:	e7c4      	b.n	8009078 <_svfiprintf_r+0x130>
 80090ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80090f2:	4604      	mov	r4, r0
 80090f4:	2301      	movs	r3, #1
 80090f6:	e7f0      	b.n	80090da <_svfiprintf_r+0x192>
 80090f8:	ab03      	add	r3, sp, #12
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	462a      	mov	r2, r5
 80090fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009138 <_svfiprintf_r+0x1f0>)
 8009100:	a904      	add	r1, sp, #16
 8009102:	4638      	mov	r0, r7
 8009104:	f3af 8000 	nop.w
 8009108:	1c42      	adds	r2, r0, #1
 800910a:	4606      	mov	r6, r0
 800910c:	d1d6      	bne.n	80090bc <_svfiprintf_r+0x174>
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	065b      	lsls	r3, r3, #25
 8009112:	f53f af2d 	bmi.w	8008f70 <_svfiprintf_r+0x28>
 8009116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009118:	e72c      	b.n	8008f74 <_svfiprintf_r+0x2c>
 800911a:	ab03      	add	r3, sp, #12
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	462a      	mov	r2, r5
 8009120:	4b05      	ldr	r3, [pc, #20]	@ (8009138 <_svfiprintf_r+0x1f0>)
 8009122:	a904      	add	r1, sp, #16
 8009124:	4638      	mov	r0, r7
 8009126:	f000 f9bb 	bl	80094a0 <_printf_i>
 800912a:	e7ed      	b.n	8009108 <_svfiprintf_r+0x1c0>
 800912c:	08009f65 	.word	0x08009f65
 8009130:	08009f6f 	.word	0x08009f6f
 8009134:	00000000 	.word	0x00000000
 8009138:	08008e91 	.word	0x08008e91
 800913c:	08009f6b 	.word	0x08009f6b

08009140 <__sfputc_r>:
 8009140:	6893      	ldr	r3, [r2, #8]
 8009142:	3b01      	subs	r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	b410      	push	{r4}
 8009148:	6093      	str	r3, [r2, #8]
 800914a:	da08      	bge.n	800915e <__sfputc_r+0x1e>
 800914c:	6994      	ldr	r4, [r2, #24]
 800914e:	42a3      	cmp	r3, r4
 8009150:	db01      	blt.n	8009156 <__sfputc_r+0x16>
 8009152:	290a      	cmp	r1, #10
 8009154:	d103      	bne.n	800915e <__sfputc_r+0x1e>
 8009156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800915a:	f000 bb7d 	b.w	8009858 <__swbuf_r>
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	1c58      	adds	r0, r3, #1
 8009162:	6010      	str	r0, [r2, #0]
 8009164:	7019      	strb	r1, [r3, #0]
 8009166:	4608      	mov	r0, r1
 8009168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800916c:	4770      	bx	lr

0800916e <__sfputs_r>:
 800916e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009170:	4606      	mov	r6, r0
 8009172:	460f      	mov	r7, r1
 8009174:	4614      	mov	r4, r2
 8009176:	18d5      	adds	r5, r2, r3
 8009178:	42ac      	cmp	r4, r5
 800917a:	d101      	bne.n	8009180 <__sfputs_r+0x12>
 800917c:	2000      	movs	r0, #0
 800917e:	e007      	b.n	8009190 <__sfputs_r+0x22>
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	463a      	mov	r2, r7
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ffda 	bl	8009140 <__sfputc_r>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d1f3      	bne.n	8009178 <__sfputs_r+0xa>
 8009190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009194 <_vfiprintf_r>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	460d      	mov	r5, r1
 800919a:	b09d      	sub	sp, #116	@ 0x74
 800919c:	4614      	mov	r4, r2
 800919e:	4698      	mov	r8, r3
 80091a0:	4606      	mov	r6, r0
 80091a2:	b118      	cbz	r0, 80091ac <_vfiprintf_r+0x18>
 80091a4:	6a03      	ldr	r3, [r0, #32]
 80091a6:	b90b      	cbnz	r3, 80091ac <_vfiprintf_r+0x18>
 80091a8:	f7ff fb72 	bl	8008890 <__sinit>
 80091ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ae:	07d9      	lsls	r1, r3, #31
 80091b0:	d405      	bmi.n	80091be <_vfiprintf_r+0x2a>
 80091b2:	89ab      	ldrh	r3, [r5, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d402      	bmi.n	80091be <_vfiprintf_r+0x2a>
 80091b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ba:	f7ff fd32 	bl	8008c22 <__retarget_lock_acquire_recursive>
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	071b      	lsls	r3, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <_vfiprintf_r+0x34>
 80091c4:	692b      	ldr	r3, [r5, #16]
 80091c6:	b99b      	cbnz	r3, 80091f0 <_vfiprintf_r+0x5c>
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 fb82 	bl	80098d4 <__swsetup_r>
 80091d0:	b170      	cbz	r0, 80091f0 <_vfiprintf_r+0x5c>
 80091d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d4:	07dc      	lsls	r4, r3, #31
 80091d6:	d504      	bpl.n	80091e2 <_vfiprintf_r+0x4e>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	b01d      	add	sp, #116	@ 0x74
 80091de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	0598      	lsls	r0, r3, #22
 80091e6:	d4f7      	bmi.n	80091d8 <_vfiprintf_r+0x44>
 80091e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ea:	f7ff fd1b 	bl	8008c24 <__retarget_lock_release_recursive>
 80091ee:	e7f3      	b.n	80091d8 <_vfiprintf_r+0x44>
 80091f0:	2300      	movs	r3, #0
 80091f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f4:	2320      	movs	r3, #32
 80091f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80091fe:	2330      	movs	r3, #48	@ 0x30
 8009200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093b0 <_vfiprintf_r+0x21c>
 8009204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009208:	f04f 0901 	mov.w	r9, #1
 800920c:	4623      	mov	r3, r4
 800920e:	469a      	mov	sl, r3
 8009210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009214:	b10a      	cbz	r2, 800921a <_vfiprintf_r+0x86>
 8009216:	2a25      	cmp	r2, #37	@ 0x25
 8009218:	d1f9      	bne.n	800920e <_vfiprintf_r+0x7a>
 800921a:	ebba 0b04 	subs.w	fp, sl, r4
 800921e:	d00b      	beq.n	8009238 <_vfiprintf_r+0xa4>
 8009220:	465b      	mov	r3, fp
 8009222:	4622      	mov	r2, r4
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff ffa1 	bl	800916e <__sfputs_r>
 800922c:	3001      	adds	r0, #1
 800922e:	f000 80a7 	beq.w	8009380 <_vfiprintf_r+0x1ec>
 8009232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009234:	445a      	add	r2, fp
 8009236:	9209      	str	r2, [sp, #36]	@ 0x24
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 809f 	beq.w	8009380 <_vfiprintf_r+0x1ec>
 8009242:	2300      	movs	r3, #0
 8009244:	f04f 32ff 	mov.w	r2, #4294967295
 8009248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800924c:	f10a 0a01 	add.w	sl, sl, #1
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009258:	931a      	str	r3, [sp, #104]	@ 0x68
 800925a:	4654      	mov	r4, sl
 800925c:	2205      	movs	r2, #5
 800925e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009262:	4853      	ldr	r0, [pc, #332]	@ (80093b0 <_vfiprintf_r+0x21c>)
 8009264:	f7f6 ffd4 	bl	8000210 <memchr>
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	b9d8      	cbnz	r0, 80092a4 <_vfiprintf_r+0x110>
 800926c:	06d1      	lsls	r1, r2, #27
 800926e:	bf44      	itt	mi
 8009270:	2320      	movmi	r3, #32
 8009272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009276:	0713      	lsls	r3, r2, #28
 8009278:	bf44      	itt	mi
 800927a:	232b      	movmi	r3, #43	@ 0x2b
 800927c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b2a      	cmp	r3, #42	@ 0x2a
 8009286:	d015      	beq.n	80092b4 <_vfiprintf_r+0x120>
 8009288:	9a07      	ldr	r2, [sp, #28]
 800928a:	4654      	mov	r4, sl
 800928c:	2000      	movs	r0, #0
 800928e:	f04f 0c0a 	mov.w	ip, #10
 8009292:	4621      	mov	r1, r4
 8009294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009298:	3b30      	subs	r3, #48	@ 0x30
 800929a:	2b09      	cmp	r3, #9
 800929c:	d94b      	bls.n	8009336 <_vfiprintf_r+0x1a2>
 800929e:	b1b0      	cbz	r0, 80092ce <_vfiprintf_r+0x13a>
 80092a0:	9207      	str	r2, [sp, #28]
 80092a2:	e014      	b.n	80092ce <_vfiprintf_r+0x13a>
 80092a4:	eba0 0308 	sub.w	r3, r0, r8
 80092a8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	46a2      	mov	sl, r4
 80092b2:	e7d2      	b.n	800925a <_vfiprintf_r+0xc6>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	1d19      	adds	r1, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	9103      	str	r1, [sp, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfbb      	ittet	lt
 80092c0:	425b      	neglt	r3, r3
 80092c2:	f042 0202 	orrlt.w	r2, r2, #2
 80092c6:	9307      	strge	r3, [sp, #28]
 80092c8:	9307      	strlt	r3, [sp, #28]
 80092ca:	bfb8      	it	lt
 80092cc:	9204      	strlt	r2, [sp, #16]
 80092ce:	7823      	ldrb	r3, [r4, #0]
 80092d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80092d2:	d10a      	bne.n	80092ea <_vfiprintf_r+0x156>
 80092d4:	7863      	ldrb	r3, [r4, #1]
 80092d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d8:	d132      	bne.n	8009340 <_vfiprintf_r+0x1ac>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9203      	str	r2, [sp, #12]
 80092e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092e6:	3402      	adds	r4, #2
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093c0 <_vfiprintf_r+0x22c>
 80092ee:	7821      	ldrb	r1, [r4, #0]
 80092f0:	2203      	movs	r2, #3
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7f6 ff8c 	bl	8000210 <memchr>
 80092f8:	b138      	cbz	r0, 800930a <_vfiprintf_r+0x176>
 80092fa:	9b04      	ldr	r3, [sp, #16]
 80092fc:	eba0 000a 	sub.w	r0, r0, sl
 8009300:	2240      	movs	r2, #64	@ 0x40
 8009302:	4082      	lsls	r2, r0
 8009304:	4313      	orrs	r3, r2
 8009306:	3401      	adds	r4, #1
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930e:	4829      	ldr	r0, [pc, #164]	@ (80093b4 <_vfiprintf_r+0x220>)
 8009310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009314:	2206      	movs	r2, #6
 8009316:	f7f6 ff7b 	bl	8000210 <memchr>
 800931a:	2800      	cmp	r0, #0
 800931c:	d03f      	beq.n	800939e <_vfiprintf_r+0x20a>
 800931e:	4b26      	ldr	r3, [pc, #152]	@ (80093b8 <_vfiprintf_r+0x224>)
 8009320:	bb1b      	cbnz	r3, 800936a <_vfiprintf_r+0x1d6>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	3307      	adds	r3, #7
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	3308      	adds	r3, #8
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009330:	443b      	add	r3, r7
 8009332:	9309      	str	r3, [sp, #36]	@ 0x24
 8009334:	e76a      	b.n	800920c <_vfiprintf_r+0x78>
 8009336:	fb0c 3202 	mla	r2, ip, r2, r3
 800933a:	460c      	mov	r4, r1
 800933c:	2001      	movs	r0, #1
 800933e:	e7a8      	b.n	8009292 <_vfiprintf_r+0xfe>
 8009340:	2300      	movs	r3, #0
 8009342:	3401      	adds	r4, #1
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	4619      	mov	r1, r3
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4620      	mov	r0, r4
 800934e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009352:	3a30      	subs	r2, #48	@ 0x30
 8009354:	2a09      	cmp	r2, #9
 8009356:	d903      	bls.n	8009360 <_vfiprintf_r+0x1cc>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0c6      	beq.n	80092ea <_vfiprintf_r+0x156>
 800935c:	9105      	str	r1, [sp, #20]
 800935e:	e7c4      	b.n	80092ea <_vfiprintf_r+0x156>
 8009360:	fb0c 2101 	mla	r1, ip, r1, r2
 8009364:	4604      	mov	r4, r0
 8009366:	2301      	movs	r3, #1
 8009368:	e7f0      	b.n	800934c <_vfiprintf_r+0x1b8>
 800936a:	ab03      	add	r3, sp, #12
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	462a      	mov	r2, r5
 8009370:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <_vfiprintf_r+0x228>)
 8009372:	a904      	add	r1, sp, #16
 8009374:	4630      	mov	r0, r6
 8009376:	f3af 8000 	nop.w
 800937a:	4607      	mov	r7, r0
 800937c:	1c78      	adds	r0, r7, #1
 800937e:	d1d6      	bne.n	800932e <_vfiprintf_r+0x19a>
 8009380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d405      	bmi.n	8009392 <_vfiprintf_r+0x1fe>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	059a      	lsls	r2, r3, #22
 800938a:	d402      	bmi.n	8009392 <_vfiprintf_r+0x1fe>
 800938c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800938e:	f7ff fc49 	bl	8008c24 <__retarget_lock_release_recursive>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	065b      	lsls	r3, r3, #25
 8009396:	f53f af1f 	bmi.w	80091d8 <_vfiprintf_r+0x44>
 800939a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800939c:	e71e      	b.n	80091dc <_vfiprintf_r+0x48>
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	462a      	mov	r2, r5
 80093a4:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <_vfiprintf_r+0x228>)
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f879 	bl	80094a0 <_printf_i>
 80093ae:	e7e4      	b.n	800937a <_vfiprintf_r+0x1e6>
 80093b0:	08009f65 	.word	0x08009f65
 80093b4:	08009f6f 	.word	0x08009f6f
 80093b8:	00000000 	.word	0x00000000
 80093bc:	0800916f 	.word	0x0800916f
 80093c0:	08009f6b 	.word	0x08009f6b

080093c4 <_printf_common>:
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	4616      	mov	r6, r2
 80093ca:	4698      	mov	r8, r3
 80093cc:	688a      	ldr	r2, [r1, #8]
 80093ce:	690b      	ldr	r3, [r1, #16]
 80093d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	bfb8      	it	lt
 80093d8:	4613      	movlt	r3, r2
 80093da:	6033      	str	r3, [r6, #0]
 80093dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093e0:	4607      	mov	r7, r0
 80093e2:	460c      	mov	r4, r1
 80093e4:	b10a      	cbz	r2, 80093ea <_printf_common+0x26>
 80093e6:	3301      	adds	r3, #1
 80093e8:	6033      	str	r3, [r6, #0]
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	0699      	lsls	r1, r3, #26
 80093ee:	bf42      	ittt	mi
 80093f0:	6833      	ldrmi	r3, [r6, #0]
 80093f2:	3302      	addmi	r3, #2
 80093f4:	6033      	strmi	r3, [r6, #0]
 80093f6:	6825      	ldr	r5, [r4, #0]
 80093f8:	f015 0506 	ands.w	r5, r5, #6
 80093fc:	d106      	bne.n	800940c <_printf_common+0x48>
 80093fe:	f104 0a19 	add.w	sl, r4, #25
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	6832      	ldr	r2, [r6, #0]
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	42ab      	cmp	r3, r5
 800940a:	dc26      	bgt.n	800945a <_printf_common+0x96>
 800940c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	3b00      	subs	r3, #0
 8009414:	bf18      	it	ne
 8009416:	2301      	movne	r3, #1
 8009418:	0692      	lsls	r2, r2, #26
 800941a:	d42b      	bmi.n	8009474 <_printf_common+0xb0>
 800941c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009420:	4641      	mov	r1, r8
 8009422:	4638      	mov	r0, r7
 8009424:	47c8      	blx	r9
 8009426:	3001      	adds	r0, #1
 8009428:	d01e      	beq.n	8009468 <_printf_common+0xa4>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	6922      	ldr	r2, [r4, #16]
 800942e:	f003 0306 	and.w	r3, r3, #6
 8009432:	2b04      	cmp	r3, #4
 8009434:	bf02      	ittt	eq
 8009436:	68e5      	ldreq	r5, [r4, #12]
 8009438:	6833      	ldreq	r3, [r6, #0]
 800943a:	1aed      	subeq	r5, r5, r3
 800943c:	68a3      	ldr	r3, [r4, #8]
 800943e:	bf0c      	ite	eq
 8009440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009444:	2500      	movne	r5, #0
 8009446:	4293      	cmp	r3, r2
 8009448:	bfc4      	itt	gt
 800944a:	1a9b      	subgt	r3, r3, r2
 800944c:	18ed      	addgt	r5, r5, r3
 800944e:	2600      	movs	r6, #0
 8009450:	341a      	adds	r4, #26
 8009452:	42b5      	cmp	r5, r6
 8009454:	d11a      	bne.n	800948c <_printf_common+0xc8>
 8009456:	2000      	movs	r0, #0
 8009458:	e008      	b.n	800946c <_printf_common+0xa8>
 800945a:	2301      	movs	r3, #1
 800945c:	4652      	mov	r2, sl
 800945e:	4641      	mov	r1, r8
 8009460:	4638      	mov	r0, r7
 8009462:	47c8      	blx	r9
 8009464:	3001      	adds	r0, #1
 8009466:	d103      	bne.n	8009470 <_printf_common+0xac>
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009470:	3501      	adds	r5, #1
 8009472:	e7c6      	b.n	8009402 <_printf_common+0x3e>
 8009474:	18e1      	adds	r1, r4, r3
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	2030      	movs	r0, #48	@ 0x30
 800947a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800947e:	4422      	add	r2, r4
 8009480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009488:	3302      	adds	r3, #2
 800948a:	e7c7      	b.n	800941c <_printf_common+0x58>
 800948c:	2301      	movs	r3, #1
 800948e:	4622      	mov	r2, r4
 8009490:	4641      	mov	r1, r8
 8009492:	4638      	mov	r0, r7
 8009494:	47c8      	blx	r9
 8009496:	3001      	adds	r0, #1
 8009498:	d0e6      	beq.n	8009468 <_printf_common+0xa4>
 800949a:	3601      	adds	r6, #1
 800949c:	e7d9      	b.n	8009452 <_printf_common+0x8e>
	...

080094a0 <_printf_i>:
 80094a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	7e0f      	ldrb	r7, [r1, #24]
 80094a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094a8:	2f78      	cmp	r7, #120	@ 0x78
 80094aa:	4691      	mov	r9, r2
 80094ac:	4680      	mov	r8, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	469a      	mov	sl, r3
 80094b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094b6:	d807      	bhi.n	80094c8 <_printf_i+0x28>
 80094b8:	2f62      	cmp	r7, #98	@ 0x62
 80094ba:	d80a      	bhi.n	80094d2 <_printf_i+0x32>
 80094bc:	2f00      	cmp	r7, #0
 80094be:	f000 80d1 	beq.w	8009664 <_printf_i+0x1c4>
 80094c2:	2f58      	cmp	r7, #88	@ 0x58
 80094c4:	f000 80b8 	beq.w	8009638 <_printf_i+0x198>
 80094c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094d0:	e03a      	b.n	8009548 <_printf_i+0xa8>
 80094d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094d6:	2b15      	cmp	r3, #21
 80094d8:	d8f6      	bhi.n	80094c8 <_printf_i+0x28>
 80094da:	a101      	add	r1, pc, #4	@ (adr r1, 80094e0 <_printf_i+0x40>)
 80094dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094e0:	08009539 	.word	0x08009539
 80094e4:	0800954d 	.word	0x0800954d
 80094e8:	080094c9 	.word	0x080094c9
 80094ec:	080094c9 	.word	0x080094c9
 80094f0:	080094c9 	.word	0x080094c9
 80094f4:	080094c9 	.word	0x080094c9
 80094f8:	0800954d 	.word	0x0800954d
 80094fc:	080094c9 	.word	0x080094c9
 8009500:	080094c9 	.word	0x080094c9
 8009504:	080094c9 	.word	0x080094c9
 8009508:	080094c9 	.word	0x080094c9
 800950c:	0800964b 	.word	0x0800964b
 8009510:	08009577 	.word	0x08009577
 8009514:	08009605 	.word	0x08009605
 8009518:	080094c9 	.word	0x080094c9
 800951c:	080094c9 	.word	0x080094c9
 8009520:	0800966d 	.word	0x0800966d
 8009524:	080094c9 	.word	0x080094c9
 8009528:	08009577 	.word	0x08009577
 800952c:	080094c9 	.word	0x080094c9
 8009530:	080094c9 	.word	0x080094c9
 8009534:	0800960d 	.word	0x0800960d
 8009538:	6833      	ldr	r3, [r6, #0]
 800953a:	1d1a      	adds	r2, r3, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6032      	str	r2, [r6, #0]
 8009540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009548:	2301      	movs	r3, #1
 800954a:	e09c      	b.n	8009686 <_printf_i+0x1e6>
 800954c:	6833      	ldr	r3, [r6, #0]
 800954e:	6820      	ldr	r0, [r4, #0]
 8009550:	1d19      	adds	r1, r3, #4
 8009552:	6031      	str	r1, [r6, #0]
 8009554:	0606      	lsls	r6, r0, #24
 8009556:	d501      	bpl.n	800955c <_printf_i+0xbc>
 8009558:	681d      	ldr	r5, [r3, #0]
 800955a:	e003      	b.n	8009564 <_printf_i+0xc4>
 800955c:	0645      	lsls	r5, r0, #25
 800955e:	d5fb      	bpl.n	8009558 <_printf_i+0xb8>
 8009560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009564:	2d00      	cmp	r5, #0
 8009566:	da03      	bge.n	8009570 <_printf_i+0xd0>
 8009568:	232d      	movs	r3, #45	@ 0x2d
 800956a:	426d      	negs	r5, r5
 800956c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009570:	4858      	ldr	r0, [pc, #352]	@ (80096d4 <_printf_i+0x234>)
 8009572:	230a      	movs	r3, #10
 8009574:	e011      	b.n	800959a <_printf_i+0xfa>
 8009576:	6821      	ldr	r1, [r4, #0]
 8009578:	6833      	ldr	r3, [r6, #0]
 800957a:	0608      	lsls	r0, r1, #24
 800957c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009580:	d402      	bmi.n	8009588 <_printf_i+0xe8>
 8009582:	0649      	lsls	r1, r1, #25
 8009584:	bf48      	it	mi
 8009586:	b2ad      	uxthmi	r5, r5
 8009588:	2f6f      	cmp	r7, #111	@ 0x6f
 800958a:	4852      	ldr	r0, [pc, #328]	@ (80096d4 <_printf_i+0x234>)
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	bf14      	ite	ne
 8009590:	230a      	movne	r3, #10
 8009592:	2308      	moveq	r3, #8
 8009594:	2100      	movs	r1, #0
 8009596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800959a:	6866      	ldr	r6, [r4, #4]
 800959c:	60a6      	str	r6, [r4, #8]
 800959e:	2e00      	cmp	r6, #0
 80095a0:	db05      	blt.n	80095ae <_printf_i+0x10e>
 80095a2:	6821      	ldr	r1, [r4, #0]
 80095a4:	432e      	orrs	r6, r5
 80095a6:	f021 0104 	bic.w	r1, r1, #4
 80095aa:	6021      	str	r1, [r4, #0]
 80095ac:	d04b      	beq.n	8009646 <_printf_i+0x1a6>
 80095ae:	4616      	mov	r6, r2
 80095b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80095b4:	fb03 5711 	mls	r7, r3, r1, r5
 80095b8:	5dc7      	ldrb	r7, [r0, r7]
 80095ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095be:	462f      	mov	r7, r5
 80095c0:	42bb      	cmp	r3, r7
 80095c2:	460d      	mov	r5, r1
 80095c4:	d9f4      	bls.n	80095b0 <_printf_i+0x110>
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d10b      	bne.n	80095e2 <_printf_i+0x142>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	07df      	lsls	r7, r3, #31
 80095ce:	d508      	bpl.n	80095e2 <_printf_i+0x142>
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	6861      	ldr	r1, [r4, #4]
 80095d4:	4299      	cmp	r1, r3
 80095d6:	bfde      	ittt	le
 80095d8:	2330      	movle	r3, #48	@ 0x30
 80095da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095e2:	1b92      	subs	r2, r2, r6
 80095e4:	6122      	str	r2, [r4, #16]
 80095e6:	f8cd a000 	str.w	sl, [sp]
 80095ea:	464b      	mov	r3, r9
 80095ec:	aa03      	add	r2, sp, #12
 80095ee:	4621      	mov	r1, r4
 80095f0:	4640      	mov	r0, r8
 80095f2:	f7ff fee7 	bl	80093c4 <_printf_common>
 80095f6:	3001      	adds	r0, #1
 80095f8:	d14a      	bne.n	8009690 <_printf_i+0x1f0>
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	b004      	add	sp, #16
 8009600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	f043 0320 	orr.w	r3, r3, #32
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	4832      	ldr	r0, [pc, #200]	@ (80096d8 <_printf_i+0x238>)
 800960e:	2778      	movs	r7, #120	@ 0x78
 8009610:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	6831      	ldr	r1, [r6, #0]
 8009618:	061f      	lsls	r7, r3, #24
 800961a:	f851 5b04 	ldr.w	r5, [r1], #4
 800961e:	d402      	bmi.n	8009626 <_printf_i+0x186>
 8009620:	065f      	lsls	r7, r3, #25
 8009622:	bf48      	it	mi
 8009624:	b2ad      	uxthmi	r5, r5
 8009626:	6031      	str	r1, [r6, #0]
 8009628:	07d9      	lsls	r1, r3, #31
 800962a:	bf44      	itt	mi
 800962c:	f043 0320 	orrmi.w	r3, r3, #32
 8009630:	6023      	strmi	r3, [r4, #0]
 8009632:	b11d      	cbz	r5, 800963c <_printf_i+0x19c>
 8009634:	2310      	movs	r3, #16
 8009636:	e7ad      	b.n	8009594 <_printf_i+0xf4>
 8009638:	4826      	ldr	r0, [pc, #152]	@ (80096d4 <_printf_i+0x234>)
 800963a:	e7e9      	b.n	8009610 <_printf_i+0x170>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	f023 0320 	bic.w	r3, r3, #32
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	e7f6      	b.n	8009634 <_printf_i+0x194>
 8009646:	4616      	mov	r6, r2
 8009648:	e7bd      	b.n	80095c6 <_printf_i+0x126>
 800964a:	6833      	ldr	r3, [r6, #0]
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	6961      	ldr	r1, [r4, #20]
 8009650:	1d18      	adds	r0, r3, #4
 8009652:	6030      	str	r0, [r6, #0]
 8009654:	062e      	lsls	r6, r5, #24
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	d501      	bpl.n	800965e <_printf_i+0x1be>
 800965a:	6019      	str	r1, [r3, #0]
 800965c:	e002      	b.n	8009664 <_printf_i+0x1c4>
 800965e:	0668      	lsls	r0, r5, #25
 8009660:	d5fb      	bpl.n	800965a <_printf_i+0x1ba>
 8009662:	8019      	strh	r1, [r3, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	6123      	str	r3, [r4, #16]
 8009668:	4616      	mov	r6, r2
 800966a:	e7bc      	b.n	80095e6 <_printf_i+0x146>
 800966c:	6833      	ldr	r3, [r6, #0]
 800966e:	1d1a      	adds	r2, r3, #4
 8009670:	6032      	str	r2, [r6, #0]
 8009672:	681e      	ldr	r6, [r3, #0]
 8009674:	6862      	ldr	r2, [r4, #4]
 8009676:	2100      	movs	r1, #0
 8009678:	4630      	mov	r0, r6
 800967a:	f7f6 fdc9 	bl	8000210 <memchr>
 800967e:	b108      	cbz	r0, 8009684 <_printf_i+0x1e4>
 8009680:	1b80      	subs	r0, r0, r6
 8009682:	6060      	str	r0, [r4, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	2300      	movs	r3, #0
 800968a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800968e:	e7aa      	b.n	80095e6 <_printf_i+0x146>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	4632      	mov	r2, r6
 8009694:	4649      	mov	r1, r9
 8009696:	4640      	mov	r0, r8
 8009698:	47d0      	blx	sl
 800969a:	3001      	adds	r0, #1
 800969c:	d0ad      	beq.n	80095fa <_printf_i+0x15a>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	079b      	lsls	r3, r3, #30
 80096a2:	d413      	bmi.n	80096cc <_printf_i+0x22c>
 80096a4:	68e0      	ldr	r0, [r4, #12]
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	4298      	cmp	r0, r3
 80096aa:	bfb8      	it	lt
 80096ac:	4618      	movlt	r0, r3
 80096ae:	e7a6      	b.n	80095fe <_printf_i+0x15e>
 80096b0:	2301      	movs	r3, #1
 80096b2:	4632      	mov	r2, r6
 80096b4:	4649      	mov	r1, r9
 80096b6:	4640      	mov	r0, r8
 80096b8:	47d0      	blx	sl
 80096ba:	3001      	adds	r0, #1
 80096bc:	d09d      	beq.n	80095fa <_printf_i+0x15a>
 80096be:	3501      	adds	r5, #1
 80096c0:	68e3      	ldr	r3, [r4, #12]
 80096c2:	9903      	ldr	r1, [sp, #12]
 80096c4:	1a5b      	subs	r3, r3, r1
 80096c6:	42ab      	cmp	r3, r5
 80096c8:	dcf2      	bgt.n	80096b0 <_printf_i+0x210>
 80096ca:	e7eb      	b.n	80096a4 <_printf_i+0x204>
 80096cc:	2500      	movs	r5, #0
 80096ce:	f104 0619 	add.w	r6, r4, #25
 80096d2:	e7f5      	b.n	80096c0 <_printf_i+0x220>
 80096d4:	08009f76 	.word	0x08009f76
 80096d8:	08009f87 	.word	0x08009f87

080096dc <__sflush_r>:
 80096dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	0716      	lsls	r6, r2, #28
 80096e6:	4605      	mov	r5, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	d454      	bmi.n	8009796 <__sflush_r+0xba>
 80096ec:	684b      	ldr	r3, [r1, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	dc02      	bgt.n	80096f8 <__sflush_r+0x1c>
 80096f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dd48      	ble.n	800978a <__sflush_r+0xae>
 80096f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d045      	beq.n	800978a <__sflush_r+0xae>
 80096fe:	2300      	movs	r3, #0
 8009700:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009704:	682f      	ldr	r7, [r5, #0]
 8009706:	6a21      	ldr	r1, [r4, #32]
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	d030      	beq.n	800976e <__sflush_r+0x92>
 800970c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	0759      	lsls	r1, r3, #29
 8009712:	d505      	bpl.n	8009720 <__sflush_r+0x44>
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	1ad2      	subs	r2, r2, r3
 8009718:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800971a:	b10b      	cbz	r3, 8009720 <__sflush_r+0x44>
 800971c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800971e:	1ad2      	subs	r2, r2, r3
 8009720:	2300      	movs	r3, #0
 8009722:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009724:	6a21      	ldr	r1, [r4, #32]
 8009726:	4628      	mov	r0, r5
 8009728:	47b0      	blx	r6
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	d106      	bne.n	800973e <__sflush_r+0x62>
 8009730:	6829      	ldr	r1, [r5, #0]
 8009732:	291d      	cmp	r1, #29
 8009734:	d82b      	bhi.n	800978e <__sflush_r+0xb2>
 8009736:	4a2a      	ldr	r2, [pc, #168]	@ (80097e0 <__sflush_r+0x104>)
 8009738:	40ca      	lsrs	r2, r1
 800973a:	07d6      	lsls	r6, r2, #31
 800973c:	d527      	bpl.n	800978e <__sflush_r+0xb2>
 800973e:	2200      	movs	r2, #0
 8009740:	6062      	str	r2, [r4, #4]
 8009742:	04d9      	lsls	r1, r3, #19
 8009744:	6922      	ldr	r2, [r4, #16]
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	d504      	bpl.n	8009754 <__sflush_r+0x78>
 800974a:	1c42      	adds	r2, r0, #1
 800974c:	d101      	bne.n	8009752 <__sflush_r+0x76>
 800974e:	682b      	ldr	r3, [r5, #0]
 8009750:	b903      	cbnz	r3, 8009754 <__sflush_r+0x78>
 8009752:	6560      	str	r0, [r4, #84]	@ 0x54
 8009754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009756:	602f      	str	r7, [r5, #0]
 8009758:	b1b9      	cbz	r1, 800978a <__sflush_r+0xae>
 800975a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800975e:	4299      	cmp	r1, r3
 8009760:	d002      	beq.n	8009768 <__sflush_r+0x8c>
 8009762:	4628      	mov	r0, r5
 8009764:	f7ff fa94 	bl	8008c90 <_free_r>
 8009768:	2300      	movs	r3, #0
 800976a:	6363      	str	r3, [r4, #52]	@ 0x34
 800976c:	e00d      	b.n	800978a <__sflush_r+0xae>
 800976e:	2301      	movs	r3, #1
 8009770:	4628      	mov	r0, r5
 8009772:	47b0      	blx	r6
 8009774:	4602      	mov	r2, r0
 8009776:	1c50      	adds	r0, r2, #1
 8009778:	d1c9      	bne.n	800970e <__sflush_r+0x32>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0c6      	beq.n	800970e <__sflush_r+0x32>
 8009780:	2b1d      	cmp	r3, #29
 8009782:	d001      	beq.n	8009788 <__sflush_r+0xac>
 8009784:	2b16      	cmp	r3, #22
 8009786:	d11e      	bne.n	80097c6 <__sflush_r+0xea>
 8009788:	602f      	str	r7, [r5, #0]
 800978a:	2000      	movs	r0, #0
 800978c:	e022      	b.n	80097d4 <__sflush_r+0xf8>
 800978e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009792:	b21b      	sxth	r3, r3
 8009794:	e01b      	b.n	80097ce <__sflush_r+0xf2>
 8009796:	690f      	ldr	r7, [r1, #16]
 8009798:	2f00      	cmp	r7, #0
 800979a:	d0f6      	beq.n	800978a <__sflush_r+0xae>
 800979c:	0793      	lsls	r3, r2, #30
 800979e:	680e      	ldr	r6, [r1, #0]
 80097a0:	bf08      	it	eq
 80097a2:	694b      	ldreq	r3, [r1, #20]
 80097a4:	600f      	str	r7, [r1, #0]
 80097a6:	bf18      	it	ne
 80097a8:	2300      	movne	r3, #0
 80097aa:	eba6 0807 	sub.w	r8, r6, r7
 80097ae:	608b      	str	r3, [r1, #8]
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	dde9      	ble.n	800978a <__sflush_r+0xae>
 80097b6:	6a21      	ldr	r1, [r4, #32]
 80097b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097ba:	4643      	mov	r3, r8
 80097bc:	463a      	mov	r2, r7
 80097be:	4628      	mov	r0, r5
 80097c0:	47b0      	blx	r6
 80097c2:	2800      	cmp	r0, #0
 80097c4:	dc08      	bgt.n	80097d8 <__sflush_r+0xfc>
 80097c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	f04f 30ff 	mov.w	r0, #4294967295
 80097d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d8:	4407      	add	r7, r0
 80097da:	eba8 0800 	sub.w	r8, r8, r0
 80097de:	e7e7      	b.n	80097b0 <__sflush_r+0xd4>
 80097e0:	20400001 	.word	0x20400001

080097e4 <_fflush_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	4605      	mov	r5, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	b913      	cbnz	r3, 80097f4 <_fflush_r+0x10>
 80097ee:	2500      	movs	r5, #0
 80097f0:	4628      	mov	r0, r5
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	b118      	cbz	r0, 80097fe <_fflush_r+0x1a>
 80097f6:	6a03      	ldr	r3, [r0, #32]
 80097f8:	b90b      	cbnz	r3, 80097fe <_fflush_r+0x1a>
 80097fa:	f7ff f849 	bl	8008890 <__sinit>
 80097fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f3      	beq.n	80097ee <_fflush_r+0xa>
 8009806:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009808:	07d0      	lsls	r0, r2, #31
 800980a:	d404      	bmi.n	8009816 <_fflush_r+0x32>
 800980c:	0599      	lsls	r1, r3, #22
 800980e:	d402      	bmi.n	8009816 <_fflush_r+0x32>
 8009810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009812:	f7ff fa06 	bl	8008c22 <__retarget_lock_acquire_recursive>
 8009816:	4628      	mov	r0, r5
 8009818:	4621      	mov	r1, r4
 800981a:	f7ff ff5f 	bl	80096dc <__sflush_r>
 800981e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009820:	07da      	lsls	r2, r3, #31
 8009822:	4605      	mov	r5, r0
 8009824:	d4e4      	bmi.n	80097f0 <_fflush_r+0xc>
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	059b      	lsls	r3, r3, #22
 800982a:	d4e1      	bmi.n	80097f0 <_fflush_r+0xc>
 800982c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800982e:	f7ff f9f9 	bl	8008c24 <__retarget_lock_release_recursive>
 8009832:	e7dd      	b.n	80097f0 <_fflush_r+0xc>

08009834 <fiprintf>:
 8009834:	b40e      	push	{r1, r2, r3}
 8009836:	b503      	push	{r0, r1, lr}
 8009838:	4601      	mov	r1, r0
 800983a:	ab03      	add	r3, sp, #12
 800983c:	4805      	ldr	r0, [pc, #20]	@ (8009854 <fiprintf+0x20>)
 800983e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009842:	6800      	ldr	r0, [r0, #0]
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	f7ff fca5 	bl	8009194 <_vfiprintf_r>
 800984a:	b002      	add	sp, #8
 800984c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009850:	b003      	add	sp, #12
 8009852:	4770      	bx	lr
 8009854:	20000024 	.word	0x20000024

08009858 <__swbuf_r>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	4614      	mov	r4, r2
 800985e:	4605      	mov	r5, r0
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x12>
 8009862:	6a03      	ldr	r3, [r0, #32]
 8009864:	b90b      	cbnz	r3, 800986a <__swbuf_r+0x12>
 8009866:	f7ff f813 	bl	8008890 <__sinit>
 800986a:	69a3      	ldr	r3, [r4, #24]
 800986c:	60a3      	str	r3, [r4, #8]
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	071a      	lsls	r2, r3, #28
 8009872:	d501      	bpl.n	8009878 <__swbuf_r+0x20>
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	b943      	cbnz	r3, 800988a <__swbuf_r+0x32>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f82a 	bl	80098d4 <__swsetup_r>
 8009880:	b118      	cbz	r0, 800988a <__swbuf_r+0x32>
 8009882:	f04f 37ff 	mov.w	r7, #4294967295
 8009886:	4638      	mov	r0, r7
 8009888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	6922      	ldr	r2, [r4, #16]
 800988e:	1a98      	subs	r0, r3, r2
 8009890:	6963      	ldr	r3, [r4, #20]
 8009892:	b2f6      	uxtb	r6, r6
 8009894:	4283      	cmp	r3, r0
 8009896:	4637      	mov	r7, r6
 8009898:	dc05      	bgt.n	80098a6 <__swbuf_r+0x4e>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f7ff ffa1 	bl	80097e4 <_fflush_r>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1ed      	bne.n	8009882 <__swbuf_r+0x2a>
 80098a6:	68a3      	ldr	r3, [r4, #8]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	60a3      	str	r3, [r4, #8]
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	6022      	str	r2, [r4, #0]
 80098b2:	701e      	strb	r6, [r3, #0]
 80098b4:	6962      	ldr	r2, [r4, #20]
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d004      	beq.n	80098c6 <__swbuf_r+0x6e>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	07db      	lsls	r3, r3, #31
 80098c0:	d5e1      	bpl.n	8009886 <__swbuf_r+0x2e>
 80098c2:	2e0a      	cmp	r6, #10
 80098c4:	d1df      	bne.n	8009886 <__swbuf_r+0x2e>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f7ff ff8b 	bl	80097e4 <_fflush_r>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d0d9      	beq.n	8009886 <__swbuf_r+0x2e>
 80098d2:	e7d6      	b.n	8009882 <__swbuf_r+0x2a>

080098d4 <__swsetup_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4b29      	ldr	r3, [pc, #164]	@ (800997c <__swsetup_r+0xa8>)
 80098d8:	4605      	mov	r5, r0
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	460c      	mov	r4, r1
 80098de:	b118      	cbz	r0, 80098e8 <__swsetup_r+0x14>
 80098e0:	6a03      	ldr	r3, [r0, #32]
 80098e2:	b90b      	cbnz	r3, 80098e8 <__swsetup_r+0x14>
 80098e4:	f7fe ffd4 	bl	8008890 <__sinit>
 80098e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ec:	0719      	lsls	r1, r3, #28
 80098ee:	d422      	bmi.n	8009936 <__swsetup_r+0x62>
 80098f0:	06da      	lsls	r2, r3, #27
 80098f2:	d407      	bmi.n	8009904 <__swsetup_r+0x30>
 80098f4:	2209      	movs	r2, #9
 80098f6:	602a      	str	r2, [r5, #0]
 80098f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009902:	e033      	b.n	800996c <__swsetup_r+0x98>
 8009904:	0758      	lsls	r0, r3, #29
 8009906:	d512      	bpl.n	800992e <__swsetup_r+0x5a>
 8009908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990a:	b141      	cbz	r1, 800991e <__swsetup_r+0x4a>
 800990c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__swsetup_r+0x46>
 8009914:	4628      	mov	r0, r5
 8009916:	f7ff f9bb 	bl	8008c90 <_free_r>
 800991a:	2300      	movs	r3, #0
 800991c:	6363      	str	r3, [r4, #52]	@ 0x34
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	2300      	movs	r3, #0
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f043 0308 	orr.w	r3, r3, #8
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	b94b      	cbnz	r3, 800994e <__swsetup_r+0x7a>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009944:	d003      	beq.n	800994e <__swsetup_r+0x7a>
 8009946:	4621      	mov	r1, r4
 8009948:	4628      	mov	r0, r5
 800994a:	f000 f89e 	bl	8009a8a <__smakebuf_r>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	f013 0201 	ands.w	r2, r3, #1
 8009956:	d00a      	beq.n	800996e <__swsetup_r+0x9a>
 8009958:	2200      	movs	r2, #0
 800995a:	60a2      	str	r2, [r4, #8]
 800995c:	6962      	ldr	r2, [r4, #20]
 800995e:	4252      	negs	r2, r2
 8009960:	61a2      	str	r2, [r4, #24]
 8009962:	6922      	ldr	r2, [r4, #16]
 8009964:	b942      	cbnz	r2, 8009978 <__swsetup_r+0xa4>
 8009966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800996a:	d1c5      	bne.n	80098f8 <__swsetup_r+0x24>
 800996c:	bd38      	pop	{r3, r4, r5, pc}
 800996e:	0799      	lsls	r1, r3, #30
 8009970:	bf58      	it	pl
 8009972:	6962      	ldrpl	r2, [r4, #20]
 8009974:	60a2      	str	r2, [r4, #8]
 8009976:	e7f4      	b.n	8009962 <__swsetup_r+0x8e>
 8009978:	2000      	movs	r0, #0
 800997a:	e7f7      	b.n	800996c <__swsetup_r+0x98>
 800997c:	20000024 	.word	0x20000024

08009980 <memmove>:
 8009980:	4288      	cmp	r0, r1
 8009982:	b510      	push	{r4, lr}
 8009984:	eb01 0402 	add.w	r4, r1, r2
 8009988:	d902      	bls.n	8009990 <memmove+0x10>
 800998a:	4284      	cmp	r4, r0
 800998c:	4623      	mov	r3, r4
 800998e:	d807      	bhi.n	80099a0 <memmove+0x20>
 8009990:	1e43      	subs	r3, r0, #1
 8009992:	42a1      	cmp	r1, r4
 8009994:	d008      	beq.n	80099a8 <memmove+0x28>
 8009996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800999a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800999e:	e7f8      	b.n	8009992 <memmove+0x12>
 80099a0:	4402      	add	r2, r0
 80099a2:	4601      	mov	r1, r0
 80099a4:	428a      	cmp	r2, r1
 80099a6:	d100      	bne.n	80099aa <memmove+0x2a>
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099b2:	e7f7      	b.n	80099a4 <memmove+0x24>

080099b4 <_sbrk_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d06      	ldr	r5, [pc, #24]	@ (80099d0 <_sbrk_r+0x1c>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	f7f8 f8e2 	bl	8001b88 <_sbrk>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_sbrk_r+0x1a>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_sbrk_r+0x1a>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20004d58 	.word	0x20004d58

080099d4 <abort>:
 80099d4:	b508      	push	{r3, lr}
 80099d6:	2006      	movs	r0, #6
 80099d8:	f000 f8bc 	bl	8009b54 <raise>
 80099dc:	2001      	movs	r0, #1
 80099de:	f7f8 f85b 	bl	8001a98 <_exit>

080099e2 <_realloc_r>:
 80099e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e6:	4607      	mov	r7, r0
 80099e8:	4614      	mov	r4, r2
 80099ea:	460d      	mov	r5, r1
 80099ec:	b921      	cbnz	r1, 80099f8 <_realloc_r+0x16>
 80099ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	4611      	mov	r1, r2
 80099f4:	f7ff b9c0 	b.w	8008d78 <_malloc_r>
 80099f8:	b92a      	cbnz	r2, 8009a06 <_realloc_r+0x24>
 80099fa:	f7ff f949 	bl	8008c90 <_free_r>
 80099fe:	4625      	mov	r5, r4
 8009a00:	4628      	mov	r0, r5
 8009a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a06:	f000 f8e3 	bl	8009bd0 <_malloc_usable_size_r>
 8009a0a:	4284      	cmp	r4, r0
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	d802      	bhi.n	8009a16 <_realloc_r+0x34>
 8009a10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a14:	d8f4      	bhi.n	8009a00 <_realloc_r+0x1e>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff f9ad 	bl	8008d78 <_malloc_r>
 8009a1e:	4680      	mov	r8, r0
 8009a20:	b908      	cbnz	r0, 8009a26 <_realloc_r+0x44>
 8009a22:	4645      	mov	r5, r8
 8009a24:	e7ec      	b.n	8009a00 <_realloc_r+0x1e>
 8009a26:	42b4      	cmp	r4, r6
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	bf28      	it	cs
 8009a2e:	4632      	movcs	r2, r6
 8009a30:	f7ff f901 	bl	8008c36 <memcpy>
 8009a34:	4629      	mov	r1, r5
 8009a36:	4638      	mov	r0, r7
 8009a38:	f7ff f92a 	bl	8008c90 <_free_r>
 8009a3c:	e7f1      	b.n	8009a22 <_realloc_r+0x40>

08009a3e <__swhatbuf_r>:
 8009a3e:	b570      	push	{r4, r5, r6, lr}
 8009a40:	460c      	mov	r4, r1
 8009a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a46:	2900      	cmp	r1, #0
 8009a48:	b096      	sub	sp, #88	@ 0x58
 8009a4a:	4615      	mov	r5, r2
 8009a4c:	461e      	mov	r6, r3
 8009a4e:	da0d      	bge.n	8009a6c <__swhatbuf_r+0x2e>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a56:	f04f 0100 	mov.w	r1, #0
 8009a5a:	bf14      	ite	ne
 8009a5c:	2340      	movne	r3, #64	@ 0x40
 8009a5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a62:	2000      	movs	r0, #0
 8009a64:	6031      	str	r1, [r6, #0]
 8009a66:	602b      	str	r3, [r5, #0]
 8009a68:	b016      	add	sp, #88	@ 0x58
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	466a      	mov	r2, sp
 8009a6e:	f000 f879 	bl	8009b64 <_fstat_r>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	dbec      	blt.n	8009a50 <__swhatbuf_r+0x12>
 8009a76:	9901      	ldr	r1, [sp, #4]
 8009a78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a80:	4259      	negs	r1, r3
 8009a82:	4159      	adcs	r1, r3
 8009a84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a88:	e7eb      	b.n	8009a62 <__swhatbuf_r+0x24>

08009a8a <__smakebuf_r>:
 8009a8a:	898b      	ldrh	r3, [r1, #12]
 8009a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8e:	079d      	lsls	r5, r3, #30
 8009a90:	4606      	mov	r6, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	d507      	bpl.n	8009aa6 <__smakebuf_r+0x1c>
 8009a96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	6123      	str	r3, [r4, #16]
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	6163      	str	r3, [r4, #20]
 8009aa2:	b003      	add	sp, #12
 8009aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa6:	ab01      	add	r3, sp, #4
 8009aa8:	466a      	mov	r2, sp
 8009aaa:	f7ff ffc8 	bl	8009a3e <__swhatbuf_r>
 8009aae:	9f00      	ldr	r7, [sp, #0]
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff f95f 	bl	8008d78 <_malloc_r>
 8009aba:	b948      	cbnz	r0, 8009ad0 <__smakebuf_r+0x46>
 8009abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac0:	059a      	lsls	r2, r3, #22
 8009ac2:	d4ee      	bmi.n	8009aa2 <__smakebuf_r+0x18>
 8009ac4:	f023 0303 	bic.w	r3, r3, #3
 8009ac8:	f043 0302 	orr.w	r3, r3, #2
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	e7e2      	b.n	8009a96 <__smakebuf_r+0xc>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	9b01      	ldr	r3, [sp, #4]
 8009adc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ae0:	b15b      	cbz	r3, 8009afa <__smakebuf_r+0x70>
 8009ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f84e 	bl	8009b88 <_isatty_r>
 8009aec:	b128      	cbz	r0, 8009afa <__smakebuf_r+0x70>
 8009aee:	89a3      	ldrh	r3, [r4, #12]
 8009af0:	f023 0303 	bic.w	r3, r3, #3
 8009af4:	f043 0301 	orr.w	r3, r3, #1
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	431d      	orrs	r5, r3
 8009afe:	81a5      	strh	r5, [r4, #12]
 8009b00:	e7cf      	b.n	8009aa2 <__smakebuf_r+0x18>

08009b02 <_raise_r>:
 8009b02:	291f      	cmp	r1, #31
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4605      	mov	r5, r0
 8009b08:	460c      	mov	r4, r1
 8009b0a:	d904      	bls.n	8009b16 <_raise_r+0x14>
 8009b0c:	2316      	movs	r3, #22
 8009b0e:	6003      	str	r3, [r0, #0]
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295
 8009b14:	bd38      	pop	{r3, r4, r5, pc}
 8009b16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b18:	b112      	cbz	r2, 8009b20 <_raise_r+0x1e>
 8009b1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b1e:	b94b      	cbnz	r3, 8009b34 <_raise_r+0x32>
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f853 	bl	8009bcc <_getpid_r>
 8009b26:	4622      	mov	r2, r4
 8009b28:	4601      	mov	r1, r0
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b30:	f000 b83a 	b.w	8009ba8 <_kill_r>
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d00a      	beq.n	8009b4e <_raise_r+0x4c>
 8009b38:	1c59      	adds	r1, r3, #1
 8009b3a:	d103      	bne.n	8009b44 <_raise_r+0x42>
 8009b3c:	2316      	movs	r3, #22
 8009b3e:	6003      	str	r3, [r0, #0]
 8009b40:	2001      	movs	r0, #1
 8009b42:	e7e7      	b.n	8009b14 <_raise_r+0x12>
 8009b44:	2100      	movs	r1, #0
 8009b46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4798      	blx	r3
 8009b4e:	2000      	movs	r0, #0
 8009b50:	e7e0      	b.n	8009b14 <_raise_r+0x12>
	...

08009b54 <raise>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	@ (8009b60 <raise+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f7ff bfd2 	b.w	8009b02 <_raise_r>
 8009b5e:	bf00      	nop
 8009b60:	20000024 	.word	0x20000024

08009b64 <_fstat_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	@ (8009b84 <_fstat_r+0x20>)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	f7f7 ffe1 	bl	8001b38 <_fstat>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d102      	bne.n	8009b80 <_fstat_r+0x1c>
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	b103      	cbz	r3, 8009b80 <_fstat_r+0x1c>
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
 8009b82:	bf00      	nop
 8009b84:	20004d58 	.word	0x20004d58

08009b88 <_isatty_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d06      	ldr	r5, [pc, #24]	@ (8009ba4 <_isatty_r+0x1c>)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	f7f7 ffe0 	bl	8001b58 <_isatty>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d102      	bne.n	8009ba2 <_isatty_r+0x1a>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	b103      	cbz	r3, 8009ba2 <_isatty_r+0x1a>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	20004d58 	.word	0x20004d58

08009ba8 <_kill_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d07      	ldr	r5, [pc, #28]	@ (8009bc8 <_kill_r+0x20>)
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f7f7 ff5f 	bl	8001a78 <_kill>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d102      	bne.n	8009bc4 <_kill_r+0x1c>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b103      	cbz	r3, 8009bc4 <_kill_r+0x1c>
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20004d58 	.word	0x20004d58

08009bcc <_getpid_r>:
 8009bcc:	f7f7 bf4c 	b.w	8001a68 <_getpid>

08009bd0 <_malloc_usable_size_r>:
 8009bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd4:	1f18      	subs	r0, r3, #4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bfbc      	itt	lt
 8009bda:	580b      	ldrlt	r3, [r1, r0]
 8009bdc:	18c0      	addlt	r0, r0, r3
 8009bde:	4770      	bx	lr

08009be0 <_init>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	bf00      	nop
 8009be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be6:	bc08      	pop	{r3}
 8009be8:	469e      	mov	lr, r3
 8009bea:	4770      	bx	lr

08009bec <_fini>:
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bee:	bf00      	nop
 8009bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf2:	bc08      	pop	{r3}
 8009bf4:	469e      	mov	lr, r3
 8009bf6:	4770      	bx	lr
